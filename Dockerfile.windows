# Windows-optimized Docker build for Google Lens OCR Pipeline
# This version handles Windows Docker Desktop networking issues better

# Stage 1: Python Builder - Install Python dependencies
FROM python:3.11-slim AS python-builder

# Configure apt for better Windows compatibility
RUN echo 'Acquire::http::Pipeline-Depth "0";' > /etc/apt/apt.conf.d/99pipeline && \
    echo 'Acquire::http::No-Cache "true";' >> /etc/apt/apt.conf.d/99pipeline && \
    echo 'Acquire::BrokenProxy "true";' >> /etc/apt/apt.conf.d/99pipeline

# Install system dependencies for PyMuPDF with retries
RUN apt-get update --fix-missing && apt-get install -y \
    build-essential \
    gcc \
    g++ \
    libffi-dev \
    libssl-dev \
    zlib1g-dev \
    libjpeg-dev \
    libfreetype6-dev \
    liblcms2-dev \
    libopenjp2-7-dev \
    libtiff5-dev \
    tk-dev \
    tcl-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Python packages
RUN pip install --no-cache-dir --retries 3 --timeout 60 \
    PyMuPDF==1.23.26 \
    tqdm==4.66.1 \
    Pillow==10.1.0

# Stage 2: Node.js Base - Install Node.js and dependencies
FROM node:18-slim AS node-base

# Configure apt for Windows compatibility
RUN echo 'Acquire::http::Pipeline-Depth "0";' > /etc/apt/apt.conf.d/99pipeline && \
    echo 'Acquire::http::No-Cache "true";' >> /etc/apt/apt.conf.d/99pipeline

# Install minimal system dependencies (compatible with newer Debian)
RUN apt-get update --fix-missing && apt-get install -y \
    ca-certificates \
    fonts-liberation \
    libasound2 \
    libatk1.0-0 \
    libatk-bridge2.0-0 \
    libdrm2 \
    libxcomposite1 \
    libxdamage1 \
    libxrandr2 \
    libgbm1 \
    libxss1 \
    libgtk-3-0 \
    libgconf-2-4 || apt-get install -y \
    ca-certificates \
    fonts-liberation \
    libasound2 \
    libatk1.0-0 \
    libatk-bridge2.0-0 \
    libdrm2 \
    libxcomposite1 \
    libxdamage1 \
    libxrandr2 \
    libgbm1 \
    libxss1 \
    libgtk-3-0 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY server/package*.json ./server/
COPY dashboard/package*.json ./dashboard/

# Install dependencies with Windows-friendly settings
RUN npm config set registry https://registry.npmjs.org/ && \
    npm config set fetch-timeout 300000 && \
    npm config set fetch-retries 5 && \
    npm config set fetch-retry-mintimeout 20000 && \
    npm config set fetch-retry-maxtimeout 120000 && \
    npm ci --only=production

# Install server dependencies
WORKDIR /app/server
RUN npm ci --only=production

# Install dashboard dependencies (including puppeteer which will download Chromium)
WORKDIR /app/dashboard
RUN npm ci

# Stage 3: Dashboard Builder - Build React dashboard  
FROM node:18-slim AS dashboard-builder

WORKDIR /app/dashboard
# Install dependencies fresh for reliable build
COPY dashboard/package*.json ./
RUN npm ci

# Copy source and build
COPY dashboard/ .
RUN npm run build

# Stage 4: Final Runtime - Combine everything
FROM python:3.11-slim AS runtime

# Configure apt for Windows compatibility
RUN echo 'Acquire::http::Pipeline-Depth "0";' > /etc/apt/apt.conf.d/99pipeline && \
    echo 'Acquire::http::No-Cache "true";' >> /etc/apt/apt.conf.d/99pipeline && \
    echo 'Acquire::BrokenProxy "true";' >> /etc/apt/apt.conf.d/99pipeline

# Install minimal system dependencies (with fallback for missing packages)
RUN apt-get update --fix-missing && \
    (apt-get install -y \
        curl \
        wget \
        ca-certificates \
        fonts-liberation \
        libgconf-2-4 \
        libasound2 \
        libatk1.0-0 \
        libatk-bridge2.0-0 \
        libdrm2 \
        libxcomposite1 \
        libxdamage1 \
        libxrandr2 \
        libgbm1 \
        libxss1 \
        libgtk-3-0 \
    || apt-get install -y \
        curl \
        wget \
        ca-certificates \
        fonts-liberation \
        libasound2 \
        libatk1.0-0 \
        libatk-bridge2.0-0 \
        libdrm2 \
        libxcomposite1 \
        libxdamage1 \
        libxrandr2 \
        libgbm1 \
        libxss1 \
        libgtk-3-0) \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y nodejs

# Copy Python packages from builder
COPY --from=python-builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=python-builder /usr/local/bin /usr/local/bin

# Set working directory
WORKDIR /app

# Copy application code
COPY . .

# Copy built Node.js dependencies
COPY --from=node-base /app/node_modules ./node_modules
COPY --from=node-base /app/server/node_modules ./server/node_modules

# Copy built dashboard
COPY --from=dashboard-builder /app/dashboard/dist ./dashboard/dist
COPY --from=dashboard-builder /app/dashboard/node_modules ./dashboard/node_modules

# Create necessary directories
RUN mkdir -p /app/1_New_File_Process_PDF_2_PNG \
    /app/2_Converted_PNGs \
    /app/3_OCR_TXT_Files \
    /app/logs \
    /app/server/uploads

# Let Puppeteer download its own Chromium (most reliable for Windows)
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=false

# Create non-root user for security
RUN useradd -r -s /bin/false ocruser && \
    chown -R ocruser:ocruser /app
USER ocruser

# Expose ports
EXPOSE 3003 3333

# Copy entrypoint script
COPY docker-entrypoint.sh /docker-entrypoint.sh
USER root
RUN chmod +x /docker-entrypoint.sh
USER ocruser

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:3003/api/health || exit 1

# Start the application
ENTRYPOINT ["/docker-entrypoint.sh"]