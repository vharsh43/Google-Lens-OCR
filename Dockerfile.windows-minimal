# Minimal Windows-optimized Docker build for Google Lens OCR Pipeline
# This version avoids problematic system packages and relies on Puppeteer's built-in Chromium

# Stage 1: Python Builder - Install Python dependencies
FROM python:3.11-slim AS python-builder

# Install Python packages (no system dependencies needed)
RUN pip install --no-cache-dir --retries 5 --timeout 120 \
    PyMuPDF==1.23.26 \
    tqdm==4.66.1 \
    Pillow==10.1.0

# Stage 2: Node.js Base - Install Node.js and dependencies
FROM node:18-slim AS node-base

# Install only essential system packages
RUN apt-get update && apt-get install -y \
    ca-certificates \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY server/package*.json ./server/
COPY dashboard/package*.json ./dashboard/

# Install dependencies with proper npm timeout settings
RUN npm config set fetch-timeout 300000 && \
    npm config set fetch-retries 5 && \
    npm config set fetch-retry-mintimeout 20000 && \
    npm config set fetch-retry-maxtimeout 120000 && \
    npm ci --only=production

# Install server dependencies
WORKDIR /app/server
RUN npm ci --only=production

# Install dashboard dependencies
WORKDIR /app/dashboard
RUN npm ci

# Stage 3: Dashboard Builder - Build React dashboard
FROM node:18-slim AS dashboard-builder

WORKDIR /app/dashboard
# Copy package files and install dependencies fresh for build
COPY dashboard/package*.json ./
RUN npm ci

# Copy source and build
COPY dashboard/ .
# Use npx to avoid binary symlink issues on Windows
RUN npx vite build

# Stage 4: Final Runtime - Minimal setup
FROM python:3.11-slim AS runtime

# Install only essential packages
RUN apt-get update && apt-get install -y \
    curl \
    ca-certificates \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js via NodeSource
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y nodejs && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Copy Python packages from builder
COPY --from=python-builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=python-builder /usr/local/bin /usr/local/bin

# Set working directory
WORKDIR /app

# Copy application code
COPY . .

# Copy built Node.js dependencies
COPY --from=node-base /app/node_modules ./node_modules
COPY --from=node-base /app/server/node_modules ./server/node_modules

# Copy built dashboard
COPY --from=dashboard-builder /app/dashboard/dist ./dashboard/dist
COPY --from=dashboard-builder /app/dashboard/node_modules ./dashboard/node_modules

# Create necessary directories
RUN mkdir -p /app/1_New_File_Process_PDF_2_PNG \
    /app/2_Converted_PNGs \
    /app/3_OCR_TXT_Files \
    /app/logs \
    /app/server/uploads

# Let Puppeteer download and use its own Chromium (most reliable approach)
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=false
ENV PUPPETEER_CACHE_DIR=/app/.cache/puppeteer

# Create non-root user for security
RUN useradd -r -s /bin/false ocruser && \
    chown -R ocruser:ocruser /app && \
    mkdir -p /app/.cache/puppeteer && \
    chown -R ocruser:ocruser /app/.cache
USER ocruser

# Expose ports
EXPOSE 3003 3333

# Copy entrypoint script
COPY docker-entrypoint.sh /docker-entrypoint.sh
USER root
RUN chmod +x /docker-entrypoint.sh
USER ocruser

# Health check with longer timeout for Windows
HEALTHCHECK --interval=60s --timeout=30s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:3003/api/health || exit 1

# Start the application
ENTRYPOINT ["/docker-entrypoint.sh"]