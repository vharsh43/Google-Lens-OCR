# Super-minimal Windows Docker build - avoids npm config issues
# Uses Node.js built-in retry mechanisms

# Stage 1: Python Builder
FROM python:3.11-slim AS python-builder
RUN pip install --no-cache-dir PyMuPDF==1.23.26 tqdm==4.66.1 Pillow==10.1.0

# Stage 2: Node.js dependencies
FROM node:18-slim AS node-deps
WORKDIR /app

# Copy package files
COPY package*.json ./
COPY server/package*.json ./server/
COPY dashboard/package*.json ./dashboard/

# Install root dependencies with default settings
RUN npm ci --only=production

# Install server dependencies
WORKDIR /app/server  
RUN npm ci --only=production

# Install dashboard dependencies
WORKDIR /app/dashboard
RUN npm ci

# Stage 3: Build dashboard
FROM node-deps AS dashboard-builder
WORKDIR /app/dashboard
COPY dashboard/ .
RUN npm run build

# Stage 4: Final runtime
FROM python:3.11-slim AS runtime

# Install minimal essentials
RUN apt-get update && apt-get install -y curl ca-certificates && \
    curl -fsSL https://deb.nodesource.com/setup_18.x | bash - && \
    apt-get install -y nodejs && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Copy Python dependencies
COPY --from=python-builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=python-builder /usr/local/bin /usr/local/bin

# Set up application
WORKDIR /app
COPY . .

# Copy Node.js dependencies
COPY --from=node-deps /app/node_modules ./node_modules
COPY --from=node-deps /app/server/node_modules ./server/node_modules
COPY --from=dashboard-builder /app/dashboard/dist ./dashboard/dist
COPY --from=dashboard-builder /app/dashboard/node_modules ./dashboard/node_modules

# Create directories
RUN mkdir -p /app/{1_New_File_Process_PDF_2_PNG,2_Converted_PNGs,3_OCR_TXT_Files,logs,server/uploads}

# Configure for Puppeteer self-download
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=false

# Security user
RUN useradd -r -s /bin/false ocruser && chown -R ocruser:ocruser /app
USER ocruser

# Ports and health check
EXPOSE 3003 3333
HEALTHCHECK --interval=60s --timeout=30s --start-period=120s --retries=3 \
    CMD curl -f http://localhost:3003/api/health || exit 1

# Entrypoint
COPY docker-entrypoint.sh /docker-entrypoint.sh
USER root
RUN chmod +x /docker-entrypoint.sh
USER ocruser

ENTRYPOINT ["/docker-entrypoint.sh"]