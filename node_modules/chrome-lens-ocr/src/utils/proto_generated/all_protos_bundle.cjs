// source: lens_overlay_client_context.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_filters_pb = require('./lens_overlay_filters_pb.cjs');
goog.object.extend(proto, lens_overlay_filters_pb);
var lens_overlay_platform_pb = require('./lens_overlay_platform_pb.cjs');
goog.object.extend(proto, lens_overlay_platform_pb);
var lens_overlay_surface_pb = require('./lens_overlay_surface_pb.cjs');
goog.object.extend(proto, lens_overlay_surface_pb);
goog.exportSymbol('proto.lens.ClientLoggingData', null, global);
goog.exportSymbol('proto.lens.LensOverlayClientContext', null, global);
goog.exportSymbol('proto.lens.LensRenderingEnvironment', null, global);
goog.exportSymbol('proto.lens.LocaleContext', null, global);
goog.exportSymbol('proto.lens.RenderingContext', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayClientContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayClientContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayClientContext.displayName = 'proto.lens.LensOverlayClientContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LocaleContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LocaleContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LocaleContext.displayName = 'proto.lens.LocaleContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.RenderingContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.RenderingContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.RenderingContext.displayName = 'proto.lens.RenderingContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.ClientLoggingData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.ClientLoggingData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.ClientLoggingData.displayName = 'proto.lens.ClientLoggingData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayClientContext.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayClientContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayClientContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayClientContext.toObject = function(includeInstance, msg) {
  var f, obj = {
platform: jspb.Message.getFieldWithDefault(msg, 1, 0),
surface: jspb.Message.getFieldWithDefault(msg, 2, 0),
localeContext: (f = msg.getLocaleContext()) && proto.lens.LocaleContext.toObject(includeInstance, f),
appId: jspb.Message.getFieldWithDefault(msg, 6, ""),
clientFilters: (f = msg.getClientFilters()) && lens_overlay_filters_pb.AppliedFilters.toObject(includeInstance, f),
renderingContext: (f = msg.getRenderingContext()) && proto.lens.RenderingContext.toObject(includeInstance, f),
clientLoggingData: (f = msg.getClientLoggingData()) && proto.lens.ClientLoggingData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayClientContext}
 */
proto.lens.LensOverlayClientContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayClientContext;
  return proto.lens.LensOverlayClientContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayClientContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayClientContext}
 */
proto.lens.LensOverlayClientContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lens.Platform} */ (reader.readEnum());
      msg.setPlatform(value);
      break;
    case 2:
      var value = /** @type {!proto.lens.Surface} */ (reader.readEnum());
      msg.setSurface(value);
      break;
    case 4:
      var value = new proto.lens.LocaleContext;
      reader.readMessage(value,proto.lens.LocaleContext.deserializeBinaryFromReader);
      msg.setLocaleContext(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAppId(value);
      break;
    case 17:
      var value = new lens_overlay_filters_pb.AppliedFilters;
      reader.readMessage(value,lens_overlay_filters_pb.AppliedFilters.deserializeBinaryFromReader);
      msg.setClientFilters(value);
      break;
    case 20:
      var value = new proto.lens.RenderingContext;
      reader.readMessage(value,proto.lens.RenderingContext.deserializeBinaryFromReader);
      msg.setRenderingContext(value);
      break;
    case 23:
      var value = new proto.lens.ClientLoggingData;
      reader.readMessage(value,proto.lens.ClientLoggingData.deserializeBinaryFromReader);
      msg.setClientLoggingData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayClientContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayClientContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayClientContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayClientContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlatform();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSurface();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getLocaleContext();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.lens.LocaleContext.serializeBinaryToWriter
    );
  }
  f = message.getAppId();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getClientFilters();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      lens_overlay_filters_pb.AppliedFilters.serializeBinaryToWriter
    );
  }
  f = message.getRenderingContext();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.lens.RenderingContext.serializeBinaryToWriter
    );
  }
  f = message.getClientLoggingData();
  if (f != null) {
    writer.writeMessage(
      23,
      f,
      proto.lens.ClientLoggingData.serializeBinaryToWriter
    );
  }
};


/**
 * optional Platform platform = 1;
 * @return {!proto.lens.Platform}
 */
proto.lens.LensOverlayClientContext.prototype.getPlatform = function() {
  return /** @type {!proto.lens.Platform} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lens.Platform} value
 * @return {!proto.lens.LensOverlayClientContext} returns this
 */
proto.lens.LensOverlayClientContext.prototype.setPlatform = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Surface surface = 2;
 * @return {!proto.lens.Surface}
 */
proto.lens.LensOverlayClientContext.prototype.getSurface = function() {
  return /** @type {!proto.lens.Surface} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.lens.Surface} value
 * @return {!proto.lens.LensOverlayClientContext} returns this
 */
proto.lens.LensOverlayClientContext.prototype.setSurface = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional LocaleContext locale_context = 4;
 * @return {?proto.lens.LocaleContext}
 */
proto.lens.LensOverlayClientContext.prototype.getLocaleContext = function() {
  return /** @type{?proto.lens.LocaleContext} */ (
    jspb.Message.getWrapperField(this, proto.lens.LocaleContext, 4));
};


/**
 * @param {?proto.lens.LocaleContext|undefined} value
 * @return {!proto.lens.LensOverlayClientContext} returns this
*/
proto.lens.LensOverlayClientContext.prototype.setLocaleContext = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayClientContext} returns this
 */
proto.lens.LensOverlayClientContext.prototype.clearLocaleContext = function() {
  return this.setLocaleContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayClientContext.prototype.hasLocaleContext = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string app_id = 6;
 * @return {string}
 */
proto.lens.LensOverlayClientContext.prototype.getAppId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.LensOverlayClientContext} returns this
 */
proto.lens.LensOverlayClientContext.prototype.setAppId = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional AppliedFilters client_filters = 17;
 * @return {?proto.lens.AppliedFilters}
 */
proto.lens.LensOverlayClientContext.prototype.getClientFilters = function() {
  return /** @type{?proto.lens.AppliedFilters} */ (
    jspb.Message.getWrapperField(this, lens_overlay_filters_pb.AppliedFilters, 17));
};


/**
 * @param {?proto.lens.AppliedFilters|undefined} value
 * @return {!proto.lens.LensOverlayClientContext} returns this
*/
proto.lens.LensOverlayClientContext.prototype.setClientFilters = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayClientContext} returns this
 */
proto.lens.LensOverlayClientContext.prototype.clearClientFilters = function() {
  return this.setClientFilters(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayClientContext.prototype.hasClientFilters = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional RenderingContext rendering_context = 20;
 * @return {?proto.lens.RenderingContext}
 */
proto.lens.LensOverlayClientContext.prototype.getRenderingContext = function() {
  return /** @type{?proto.lens.RenderingContext} */ (
    jspb.Message.getWrapperField(this, proto.lens.RenderingContext, 20));
};


/**
 * @param {?proto.lens.RenderingContext|undefined} value
 * @return {!proto.lens.LensOverlayClientContext} returns this
*/
proto.lens.LensOverlayClientContext.prototype.setRenderingContext = function(value) {
  return jspb.Message.setWrapperField(this, 20, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayClientContext} returns this
 */
proto.lens.LensOverlayClientContext.prototype.clearRenderingContext = function() {
  return this.setRenderingContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayClientContext.prototype.hasRenderingContext = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional ClientLoggingData client_logging_data = 23;
 * @return {?proto.lens.ClientLoggingData}
 */
proto.lens.LensOverlayClientContext.prototype.getClientLoggingData = function() {
  return /** @type{?proto.lens.ClientLoggingData} */ (
    jspb.Message.getWrapperField(this, proto.lens.ClientLoggingData, 23));
};


/**
 * @param {?proto.lens.ClientLoggingData|undefined} value
 * @return {!proto.lens.LensOverlayClientContext} returns this
*/
proto.lens.LensOverlayClientContext.prototype.setClientLoggingData = function(value) {
  return jspb.Message.setWrapperField(this, 23, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayClientContext} returns this
 */
proto.lens.LensOverlayClientContext.prototype.clearClientLoggingData = function() {
  return this.setClientLoggingData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayClientContext.prototype.hasClientLoggingData = function() {
  return jspb.Message.getField(this, 23) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LocaleContext.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LocaleContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LocaleContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LocaleContext.toObject = function(includeInstance, msg) {
  var f, obj = {
language: jspb.Message.getFieldWithDefault(msg, 1, ""),
region: jspb.Message.getFieldWithDefault(msg, 2, ""),
timeZone: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LocaleContext}
 */
proto.lens.LocaleContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LocaleContext;
  return proto.lens.LocaleContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LocaleContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LocaleContext}
 */
proto.lens.LocaleContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLanguage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRegion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeZone(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LocaleContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LocaleContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LocaleContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LocaleContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLanguage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRegion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimeZone();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string language = 1;
 * @return {string}
 */
proto.lens.LocaleContext.prototype.getLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.LocaleContext} returns this
 */
proto.lens.LocaleContext.prototype.setLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string region = 2;
 * @return {string}
 */
proto.lens.LocaleContext.prototype.getRegion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.LocaleContext} returns this
 */
proto.lens.LocaleContext.prototype.setRegion = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string time_zone = 3;
 * @return {string}
 */
proto.lens.LocaleContext.prototype.getTimeZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.LocaleContext} returns this
 */
proto.lens.LocaleContext.prototype.setTimeZone = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.RenderingContext.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.RenderingContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.RenderingContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.RenderingContext.toObject = function(includeInstance, msg) {
  var f, obj = {
renderingEnvironment: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.RenderingContext}
 */
proto.lens.RenderingContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.RenderingContext;
  return proto.lens.RenderingContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.RenderingContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.RenderingContext}
 */
proto.lens.RenderingContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {!proto.lens.LensRenderingEnvironment} */ (reader.readEnum());
      msg.setRenderingEnvironment(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.RenderingContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.RenderingContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.RenderingContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.RenderingContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRenderingEnvironment();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * optional LensRenderingEnvironment rendering_environment = 2;
 * @return {!proto.lens.LensRenderingEnvironment}
 */
proto.lens.RenderingContext.prototype.getRenderingEnvironment = function() {
  return /** @type {!proto.lens.LensRenderingEnvironment} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.lens.LensRenderingEnvironment} value
 * @return {!proto.lens.RenderingContext} returns this
 */
proto.lens.RenderingContext.prototype.setRenderingEnvironment = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.ClientLoggingData.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.ClientLoggingData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.ClientLoggingData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ClientLoggingData.toObject = function(includeInstance, msg) {
  var f, obj = {
isHistoryEligible: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.ClientLoggingData}
 */
proto.lens.ClientLoggingData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.ClientLoggingData;
  return proto.lens.ClientLoggingData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.ClientLoggingData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.ClientLoggingData}
 */
proto.lens.ClientLoggingData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsHistoryEligible(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.ClientLoggingData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.ClientLoggingData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.ClientLoggingData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ClientLoggingData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsHistoryEligible();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool is_history_eligible = 1;
 * @return {boolean}
 */
proto.lens.ClientLoggingData.prototype.getIsHistoryEligible = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lens.ClientLoggingData} returns this
 */
proto.lens.ClientLoggingData.prototype.setIsHistoryEligible = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.lens.LensRenderingEnvironment = {
  RENDERING_ENV_UNSPECIFIED: 0,
  RENDERING_ENV_LENS_OVERLAY: 14
};

goog.object.extend(exports, proto.lens);
// source: lens_overlay_client_logs.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_phase_latencies_metadata_pb = require('./lens_overlay_phase_latencies_metadata_pb.cjs');
goog.object.extend(proto, lens_overlay_phase_latencies_metadata_pb);
goog.exportSymbol('proto.lens.LensOverlayClientLogs', null, global);
goog.exportSymbol('proto.lens.LensOverlayClientLogs.LensOverlayEntryPoint', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayClientLogs = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayClientLogs, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayClientLogs.displayName = 'proto.lens.LensOverlayClientLogs';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayClientLogs.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayClientLogs.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayClientLogs} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayClientLogs.toObject = function(includeInstance, msg) {
  var f, obj = {
phaseLatenciesMetadata: (f = msg.getPhaseLatenciesMetadata()) && lens_overlay_phase_latencies_metadata_pb.LensOverlayPhaseLatenciesMetadata.toObject(includeInstance, f),
lensOverlayEntryPoint: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
paellaId: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
metricsCollectionDisabled: (f = jspb.Message.getBooleanField(msg, 5)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayClientLogs}
 */
proto.lens.LensOverlayClientLogs.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayClientLogs;
  return proto.lens.LensOverlayClientLogs.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayClientLogs} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayClientLogs}
 */
proto.lens.LensOverlayClientLogs.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new lens_overlay_phase_latencies_metadata_pb.LensOverlayPhaseLatenciesMetadata;
      reader.readMessage(value,lens_overlay_phase_latencies_metadata_pb.LensOverlayPhaseLatenciesMetadata.deserializeBinaryFromReader);
      msg.setPhaseLatenciesMetadata(value);
      break;
    case 2:
      var value = /** @type {!proto.lens.LensOverlayClientLogs.LensOverlayEntryPoint} */ (reader.readEnum());
      msg.setLensOverlayEntryPoint(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPaellaId(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setMetricsCollectionDisabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayClientLogs.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayClientLogs.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayClientLogs} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayClientLogs.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhaseLatenciesMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      lens_overlay_phase_latencies_metadata_pb.LensOverlayPhaseLatenciesMetadata.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.lens.LensOverlayClientLogs.LensOverlayEntryPoint} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.lens.LensOverlayClientLogs.LensOverlayEntryPoint = {
  UNKNOWN_ENTRY_POINT: 0,
  APP_MENU: 1,
  PAGE_CONTEXT_MENU: 2,
  IMAGE_CONTEXT_MENU: 3,
  OMNIBOX_BUTTON: 4,
  TOOLBAR_BUTTON: 5,
  FIND_IN_PAGE: 6
};

/**
 * optional LensOverlayPhaseLatenciesMetadata phase_latencies_metadata = 1;
 * @return {?proto.lens.LensOverlayPhaseLatenciesMetadata}
 */
proto.lens.LensOverlayClientLogs.prototype.getPhaseLatenciesMetadata = function() {
  return /** @type{?proto.lens.LensOverlayPhaseLatenciesMetadata} */ (
    jspb.Message.getWrapperField(this, lens_overlay_phase_latencies_metadata_pb.LensOverlayPhaseLatenciesMetadata, 1));
};


/**
 * @param {?proto.lens.LensOverlayPhaseLatenciesMetadata|undefined} value
 * @return {!proto.lens.LensOverlayClientLogs} returns this
*/
proto.lens.LensOverlayClientLogs.prototype.setPhaseLatenciesMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayClientLogs} returns this
 */
proto.lens.LensOverlayClientLogs.prototype.clearPhaseLatenciesMetadata = function() {
  return this.setPhaseLatenciesMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayClientLogs.prototype.hasPhaseLatenciesMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LensOverlayEntryPoint lens_overlay_entry_point = 2;
 * @return {!proto.lens.LensOverlayClientLogs.LensOverlayEntryPoint}
 */
proto.lens.LensOverlayClientLogs.prototype.getLensOverlayEntryPoint = function() {
  return /** @type {!proto.lens.LensOverlayClientLogs.LensOverlayEntryPoint} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.lens.LensOverlayClientLogs.LensOverlayEntryPoint} value
 * @return {!proto.lens.LensOverlayClientLogs} returns this
 */
proto.lens.LensOverlayClientLogs.prototype.setLensOverlayEntryPoint = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.lens.LensOverlayClientLogs} returns this
 */
proto.lens.LensOverlayClientLogs.prototype.clearLensOverlayEntryPoint = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayClientLogs.prototype.hasLensOverlayEntryPoint = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint64 paella_id = 3;
 * @return {number}
 */
proto.lens.LensOverlayClientLogs.prototype.getPaellaId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.LensOverlayClientLogs} returns this
 */
proto.lens.LensOverlayClientLogs.prototype.setPaellaId = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.lens.LensOverlayClientLogs} returns this
 */
proto.lens.LensOverlayClientLogs.prototype.clearPaellaId = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayClientLogs.prototype.hasPaellaId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool metrics_collection_disabled = 5;
 * @return {boolean}
 */
proto.lens.LensOverlayClientLogs.prototype.getMetricsCollectionDisabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lens.LensOverlayClientLogs} returns this
 */
proto.lens.LensOverlayClientLogs.prototype.setMetricsCollectionDisabled = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.lens.LensOverlayClientLogs} returns this
 */
proto.lens.LensOverlayClientLogs.prototype.clearMetricsCollectionDisabled = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayClientLogs.prototype.hasMetricsCollectionDisabled = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_client_platform.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.lens.ClientPlatform', null, global);
/**
 * @enum {number}
 */
proto.lens.ClientPlatform = {
  CLIENT_PLATFORM_UNSPECIFIED: 0,
  CLIENT_PLATFORM_LENS_OVERLAY: 2
};

goog.object.extend(exports, proto.lens);
// source: lens_overlay_cluster_info.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_routing_info_pb = require('./lens_overlay_routing_info_pb.cjs');
goog.object.extend(proto, lens_overlay_routing_info_pb);
goog.exportSymbol('proto.lens.LensOverlayClusterInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayClusterInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayClusterInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayClusterInfo.displayName = 'proto.lens.LensOverlayClusterInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayClusterInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayClusterInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayClusterInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayClusterInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
serverSessionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
searchSessionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
routingInfo: (f = msg.getRoutingInfo()) && lens_overlay_routing_info_pb.LensOverlayRoutingInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayClusterInfo}
 */
proto.lens.LensOverlayClusterInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayClusterInfo;
  return proto.lens.LensOverlayClusterInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayClusterInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayClusterInfo}
 */
proto.lens.LensOverlayClusterInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerSessionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearchSessionId(value);
      break;
    case 6:
      var value = new lens_overlay_routing_info_pb.LensOverlayRoutingInfo;
      reader.readMessage(value,lens_overlay_routing_info_pb.LensOverlayRoutingInfo.deserializeBinaryFromReader);
      msg.setRoutingInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayClusterInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayClusterInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayClusterInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayClusterInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSearchSessionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRoutingInfo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      lens_overlay_routing_info_pb.LensOverlayRoutingInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string server_session_id = 1;
 * @return {string}
 */
proto.lens.LensOverlayClusterInfo.prototype.getServerSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.LensOverlayClusterInfo} returns this
 */
proto.lens.LensOverlayClusterInfo.prototype.setServerSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string search_session_id = 2;
 * @return {string}
 */
proto.lens.LensOverlayClusterInfo.prototype.getSearchSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.LensOverlayClusterInfo} returns this
 */
proto.lens.LensOverlayClusterInfo.prototype.setSearchSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional LensOverlayRoutingInfo routing_info = 6;
 * @return {?proto.lens.LensOverlayRoutingInfo}
 */
proto.lens.LensOverlayClusterInfo.prototype.getRoutingInfo = function() {
  return /** @type{?proto.lens.LensOverlayRoutingInfo} */ (
    jspb.Message.getWrapperField(this, lens_overlay_routing_info_pb.LensOverlayRoutingInfo, 6));
};


/**
 * @param {?proto.lens.LensOverlayRoutingInfo|undefined} value
 * @return {!proto.lens.LensOverlayClusterInfo} returns this
*/
proto.lens.LensOverlayClusterInfo.prototype.setRoutingInfo = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayClusterInfo} returns this
 */
proto.lens.LensOverlayClusterInfo.prototype.clearRoutingInfo = function() {
  return this.setRoutingInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayClusterInfo.prototype.hasRoutingInfo = function() {
  return jspb.Message.getField(this, 6) != null;
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_deep_gleam_data.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_text_pb = require('./lens_overlay_text_pb.cjs');
goog.object.extend(proto, lens_overlay_text_pb);
goog.exportSymbol('proto.lens.DeepGleamData', null, global);
goog.exportSymbol('proto.lens.DeepGleamData.RenderingOneofCase', null, global);
goog.exportSymbol('proto.lens.TranslationData', null, global);
goog.exportSymbol('proto.lens.TranslationData.BackgroundImageData', null, global);
goog.exportSymbol('proto.lens.TranslationData.BackgroundImageData.FileFormat', null, global);
goog.exportSymbol('proto.lens.TranslationData.Line', null, global);
goog.exportSymbol('proto.lens.TranslationData.Line.Word', null, global);
goog.exportSymbol('proto.lens.TranslationData.Status', null, global);
goog.exportSymbol('proto.lens.TranslationData.Status.Code', null, global);
goog.exportSymbol('proto.lens.TranslationData.TextStyle', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.DeepGleamData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.DeepGleamData.repeatedFields_, proto.lens.DeepGleamData.oneofGroups_);
};
goog.inherits(proto.lens.DeepGleamData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.DeepGleamData.displayName = 'proto.lens.DeepGleamData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TranslationData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.TranslationData.repeatedFields_, null);
};
goog.inherits(proto.lens.TranslationData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TranslationData.displayName = 'proto.lens.TranslationData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TranslationData.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.TranslationData.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TranslationData.Status.displayName = 'proto.lens.TranslationData.Status';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TranslationData.TextStyle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.TranslationData.TextStyle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TranslationData.TextStyle.displayName = 'proto.lens.TranslationData.TextStyle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TranslationData.BackgroundImageData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.TranslationData.BackgroundImageData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TranslationData.BackgroundImageData.displayName = 'proto.lens.TranslationData.BackgroundImageData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TranslationData.Line = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.TranslationData.Line.repeatedFields_, null);
};
goog.inherits(proto.lens.TranslationData.Line, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TranslationData.Line.displayName = 'proto.lens.TranslationData.Line';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TranslationData.Line.Word = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.TranslationData.Line.Word, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TranslationData.Line.Word.displayName = 'proto.lens.TranslationData.Line.Word';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.DeepGleamData.repeatedFields_ = [11];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.lens.DeepGleamData.oneofGroups_ = [[10]];

/**
 * @enum {number}
 */
proto.lens.DeepGleamData.RenderingOneofCase = {
  RENDERING_ONEOF_NOT_SET: 0,
  TRANSLATION: 10
};

/**
 * @return {proto.lens.DeepGleamData.RenderingOneofCase}
 */
proto.lens.DeepGleamData.prototype.getRenderingOneofCase = function() {
  return /** @type {proto.lens.DeepGleamData.RenderingOneofCase} */(jspb.Message.computeOneofCase(this, proto.lens.DeepGleamData.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.DeepGleamData.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.DeepGleamData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.DeepGleamData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.DeepGleamData.toObject = function(includeInstance, msg) {
  var f, obj = {
translation: (f = msg.getTranslation()) && proto.lens.TranslationData.toObject(includeInstance, f),
visualObjectIdList: (f = jspb.Message.getRepeatedField(msg, 11)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.DeepGleamData}
 */
proto.lens.DeepGleamData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.DeepGleamData;
  return proto.lens.DeepGleamData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.DeepGleamData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.DeepGleamData}
 */
proto.lens.DeepGleamData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = new proto.lens.TranslationData;
      reader.readMessage(value,proto.lens.TranslationData.deserializeBinaryFromReader);
      msg.setTranslation(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.addVisualObjectId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.DeepGleamData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.DeepGleamData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.DeepGleamData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.DeepGleamData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTranslation();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.lens.TranslationData.serializeBinaryToWriter
    );
  }
  f = message.getVisualObjectIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      11,
      f
    );
  }
};


/**
 * optional TranslationData translation = 10;
 * @return {?proto.lens.TranslationData}
 */
proto.lens.DeepGleamData.prototype.getTranslation = function() {
  return /** @type{?proto.lens.TranslationData} */ (
    jspb.Message.getWrapperField(this, proto.lens.TranslationData, 10));
};


/**
 * @param {?proto.lens.TranslationData|undefined} value
 * @return {!proto.lens.DeepGleamData} returns this
*/
proto.lens.DeepGleamData.prototype.setTranslation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.lens.DeepGleamData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.DeepGleamData} returns this
 */
proto.lens.DeepGleamData.prototype.clearTranslation = function() {
  return this.setTranslation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.DeepGleamData.prototype.hasTranslation = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated string visual_object_id = 11;
 * @return {!Array<string>}
 */
proto.lens.DeepGleamData.prototype.getVisualObjectIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 11));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.lens.DeepGleamData} returns this
 */
proto.lens.DeepGleamData.prototype.setVisualObjectIdList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.lens.DeepGleamData} returns this
 */
proto.lens.DeepGleamData.prototype.addVisualObjectId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.DeepGleamData} returns this
 */
proto.lens.DeepGleamData.prototype.clearVisualObjectIdList = function() {
  return this.setVisualObjectIdList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.TranslationData.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TranslationData.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TranslationData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TranslationData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.toObject = function(includeInstance, msg) {
  var f, obj = {
status: (f = msg.getStatus()) && proto.lens.TranslationData.Status.toObject(includeInstance, f),
targetLanguage: jspb.Message.getFieldWithDefault(msg, 2, ""),
sourceLanguage: jspb.Message.getFieldWithDefault(msg, 3, ""),
translation: jspb.Message.getFieldWithDefault(msg, 4, ""),
lineList: jspb.Message.toObjectList(msg.getLineList(),
    proto.lens.TranslationData.Line.toObject, includeInstance),
writingDirection: jspb.Message.getFieldWithDefault(msg, 7, 0),
alignment: jspb.Message.getFieldWithDefault(msg, 8, 0),
justified: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TranslationData}
 */
proto.lens.TranslationData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TranslationData;
  return proto.lens.TranslationData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TranslationData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TranslationData}
 */
proto.lens.TranslationData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.TranslationData.Status;
      reader.readMessage(value,proto.lens.TranslationData.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetLanguage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceLanguage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTranslation(value);
      break;
    case 5:
      var value = new proto.lens.TranslationData.Line;
      reader.readMessage(value,proto.lens.TranslationData.Line.deserializeBinaryFromReader);
      msg.addLine(value);
      break;
    case 7:
      var value = /** @type {!proto.lens.WritingDirection} */ (reader.readEnum());
      msg.setWritingDirection(value);
      break;
    case 8:
      var value = /** @type {!proto.lens.Alignment} */ (reader.readEnum());
      msg.setAlignment(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setJustified(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TranslationData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TranslationData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TranslationData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.TranslationData.Status.serializeBinaryToWriter
    );
  }
  f = message.getTargetLanguage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSourceLanguage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTranslation();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLineList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.lens.TranslationData.Line.serializeBinaryToWriter
    );
  }
  f = message.getWritingDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getAlignment();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getJustified();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TranslationData.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TranslationData.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TranslationData.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
code: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TranslationData.Status}
 */
proto.lens.TranslationData.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TranslationData.Status;
  return proto.lens.TranslationData.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TranslationData.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TranslationData.Status}
 */
proto.lens.TranslationData.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lens.TranslationData.Status.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TranslationData.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TranslationData.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TranslationData.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.lens.TranslationData.Status.Code = {
  UNKNOWN: 0,
  SUCCESS: 1,
  SERVER_ERROR: 2,
  UNSUPPORTED_LANGUAGE_PAIR: 3,
  SAME_LANGUAGE: 4,
  UNKNOWN_SOURCE_LANGUAGE: 5,
  INVALID_REQUEST: 6,
  DEADLINE_EXCEEDED: 7,
  EMPTY_TRANSLATION: 8,
  NO_OP_TRANSLATION: 9
};

/**
 * optional Code code = 1;
 * @return {!proto.lens.TranslationData.Status.Code}
 */
proto.lens.TranslationData.Status.prototype.getCode = function() {
  return /** @type {!proto.lens.TranslationData.Status.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lens.TranslationData.Status.Code} value
 * @return {!proto.lens.TranslationData.Status} returns this
 */
proto.lens.TranslationData.Status.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TranslationData.TextStyle.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TranslationData.TextStyle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TranslationData.TextStyle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.TextStyle.toObject = function(includeInstance, msg) {
  var f, obj = {
textColor: jspb.Message.getFieldWithDefault(msg, 1, 0),
backgroundPrimaryColor: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TranslationData.TextStyle}
 */
proto.lens.TranslationData.TextStyle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TranslationData.TextStyle;
  return proto.lens.TranslationData.TextStyle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TranslationData.TextStyle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TranslationData.TextStyle}
 */
proto.lens.TranslationData.TextStyle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTextColor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBackgroundPrimaryColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TranslationData.TextStyle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TranslationData.TextStyle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TranslationData.TextStyle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.TextStyle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTextColor();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBackgroundPrimaryColor();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 text_color = 1;
 * @return {number}
 */
proto.lens.TranslationData.TextStyle.prototype.getTextColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.TranslationData.TextStyle} returns this
 */
proto.lens.TranslationData.TextStyle.prototype.setTextColor = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 background_primary_color = 2;
 * @return {number}
 */
proto.lens.TranslationData.TextStyle.prototype.getBackgroundPrimaryColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.TranslationData.TextStyle} returns this
 */
proto.lens.TranslationData.TextStyle.prototype.setBackgroundPrimaryColor = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TranslationData.BackgroundImageData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TranslationData.BackgroundImageData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.BackgroundImageData.toObject = function(includeInstance, msg) {
  var f, obj = {
backgroundImage: msg.getBackgroundImage_asB64(),
imageWidth: jspb.Message.getFieldWithDefault(msg, 2, 0),
imageHeight: jspb.Message.getFieldWithDefault(msg, 3, 0),
verticalPadding: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
horizontalPadding: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
fileFormat: jspb.Message.getFieldWithDefault(msg, 6, 0),
textMask: msg.getTextMask_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TranslationData.BackgroundImageData}
 */
proto.lens.TranslationData.BackgroundImageData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TranslationData.BackgroundImageData;
  return proto.lens.TranslationData.BackgroundImageData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TranslationData.BackgroundImageData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TranslationData.BackgroundImageData}
 */
proto.lens.TranslationData.BackgroundImageData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBackgroundImage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setImageWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setImageHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVerticalPadding(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHorizontalPadding(value);
      break;
    case 6:
      var value = /** @type {!proto.lens.TranslationData.BackgroundImageData.FileFormat} */ (reader.readEnum());
      msg.setFileFormat(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTextMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TranslationData.BackgroundImageData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TranslationData.BackgroundImageData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.BackgroundImageData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBackgroundImage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getImageWidth();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getImageHeight();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getVerticalPadding();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getHorizontalPadding();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getFileFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getTextMask_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.lens.TranslationData.BackgroundImageData.FileFormat = {
  UNKNOWN: 0,
  RAW_BYTES_RGBA: 1,
  PNG_RGBA: 2,
  WEBP_RGBA: 3,
  JPEG_RGB_PNG_MASK: 4
};

/**
 * optional bytes background_image = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.getBackgroundImage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes background_image = 1;
 * This is a type-conversion wrapper around `getBackgroundImage()`
 * @return {string}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.getBackgroundImage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBackgroundImage()));
};


/**
 * optional bytes background_image = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBackgroundImage()`
 * @return {!Uint8Array}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.getBackgroundImage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBackgroundImage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lens.TranslationData.BackgroundImageData} returns this
 */
proto.lens.TranslationData.BackgroundImageData.prototype.setBackgroundImage = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int32 image_width = 2;
 * @return {number}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.getImageWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.TranslationData.BackgroundImageData} returns this
 */
proto.lens.TranslationData.BackgroundImageData.prototype.setImageWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 image_height = 3;
 * @return {number}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.getImageHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.TranslationData.BackgroundImageData} returns this
 */
proto.lens.TranslationData.BackgroundImageData.prototype.setImageHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional float vertical_padding = 4;
 * @return {number}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.getVerticalPadding = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.lens.TranslationData.BackgroundImageData} returns this
 */
proto.lens.TranslationData.BackgroundImageData.prototype.setVerticalPadding = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float horizontal_padding = 5;
 * @return {number}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.getHorizontalPadding = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.lens.TranslationData.BackgroundImageData} returns this
 */
proto.lens.TranslationData.BackgroundImageData.prototype.setHorizontalPadding = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional FileFormat file_format = 6;
 * @return {!proto.lens.TranslationData.BackgroundImageData.FileFormat}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.getFileFormat = function() {
  return /** @type {!proto.lens.TranslationData.BackgroundImageData.FileFormat} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.lens.TranslationData.BackgroundImageData.FileFormat} value
 * @return {!proto.lens.TranslationData.BackgroundImageData} returns this
 */
proto.lens.TranslationData.BackgroundImageData.prototype.setFileFormat = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional bytes text_mask = 7;
 * @return {!(string|Uint8Array)}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.getTextMask = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes text_mask = 7;
 * This is a type-conversion wrapper around `getTextMask()`
 * @return {string}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.getTextMask_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTextMask()));
};


/**
 * optional bytes text_mask = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTextMask()`
 * @return {!Uint8Array}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.getTextMask_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTextMask()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lens.TranslationData.BackgroundImageData} returns this
 */
proto.lens.TranslationData.BackgroundImageData.prototype.setTextMask = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.TranslationData.Line.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TranslationData.Line.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TranslationData.Line.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TranslationData.Line} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.Line.toObject = function(includeInstance, msg) {
  var f, obj = {
start: jspb.Message.getFieldWithDefault(msg, 1, 0),
end: jspb.Message.getFieldWithDefault(msg, 2, 0),
style: (f = msg.getStyle()) && proto.lens.TranslationData.TextStyle.toObject(includeInstance, f),
wordList: jspb.Message.toObjectList(msg.getWordList(),
    proto.lens.TranslationData.Line.Word.toObject, includeInstance),
backgroundImageData: (f = msg.getBackgroundImageData()) && proto.lens.TranslationData.BackgroundImageData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TranslationData.Line}
 */
proto.lens.TranslationData.Line.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TranslationData.Line;
  return proto.lens.TranslationData.Line.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TranslationData.Line} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TranslationData.Line}
 */
proto.lens.TranslationData.Line.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStart(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEnd(value);
      break;
    case 3:
      var value = new proto.lens.TranslationData.TextStyle;
      reader.readMessage(value,proto.lens.TranslationData.TextStyle.deserializeBinaryFromReader);
      msg.setStyle(value);
      break;
    case 5:
      var value = new proto.lens.TranslationData.Line.Word;
      reader.readMessage(value,proto.lens.TranslationData.Line.Word.deserializeBinaryFromReader);
      msg.addWord(value);
      break;
    case 9:
      var value = new proto.lens.TranslationData.BackgroundImageData;
      reader.readMessage(value,proto.lens.TranslationData.BackgroundImageData.deserializeBinaryFromReader);
      msg.setBackgroundImageData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TranslationData.Line.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TranslationData.Line.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TranslationData.Line} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.Line.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEnd();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStyle();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lens.TranslationData.TextStyle.serializeBinaryToWriter
    );
  }
  f = message.getWordList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.lens.TranslationData.Line.Word.serializeBinaryToWriter
    );
  }
  f = message.getBackgroundImageData();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.lens.TranslationData.BackgroundImageData.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TranslationData.Line.Word.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TranslationData.Line.Word.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TranslationData.Line.Word} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.Line.Word.toObject = function(includeInstance, msg) {
  var f, obj = {
start: jspb.Message.getFieldWithDefault(msg, 1, 0),
end: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TranslationData.Line.Word}
 */
proto.lens.TranslationData.Line.Word.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TranslationData.Line.Word;
  return proto.lens.TranslationData.Line.Word.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TranslationData.Line.Word} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TranslationData.Line.Word}
 */
proto.lens.TranslationData.Line.Word.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStart(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TranslationData.Line.Word.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TranslationData.Line.Word.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TranslationData.Line.Word} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.Line.Word.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEnd();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 start = 1;
 * @return {number}
 */
proto.lens.TranslationData.Line.Word.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.TranslationData.Line.Word} returns this
 */
proto.lens.TranslationData.Line.Word.prototype.setStart = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 end = 2;
 * @return {number}
 */
proto.lens.TranslationData.Line.Word.prototype.getEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.TranslationData.Line.Word} returns this
 */
proto.lens.TranslationData.Line.Word.prototype.setEnd = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 start = 1;
 * @return {number}
 */
proto.lens.TranslationData.Line.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.TranslationData.Line} returns this
 */
proto.lens.TranslationData.Line.prototype.setStart = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 end = 2;
 * @return {number}
 */
proto.lens.TranslationData.Line.prototype.getEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.TranslationData.Line} returns this
 */
proto.lens.TranslationData.Line.prototype.setEnd = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional TextStyle style = 3;
 * @return {?proto.lens.TranslationData.TextStyle}
 */
proto.lens.TranslationData.Line.prototype.getStyle = function() {
  return /** @type{?proto.lens.TranslationData.TextStyle} */ (
    jspb.Message.getWrapperField(this, proto.lens.TranslationData.TextStyle, 3));
};


/**
 * @param {?proto.lens.TranslationData.TextStyle|undefined} value
 * @return {!proto.lens.TranslationData.Line} returns this
*/
proto.lens.TranslationData.Line.prototype.setStyle = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.TranslationData.Line} returns this
 */
proto.lens.TranslationData.Line.prototype.clearStyle = function() {
  return this.setStyle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.TranslationData.Line.prototype.hasStyle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Word word = 5;
 * @return {!Array<!proto.lens.TranslationData.Line.Word>}
 */
proto.lens.TranslationData.Line.prototype.getWordList = function() {
  return /** @type{!Array<!proto.lens.TranslationData.Line.Word>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lens.TranslationData.Line.Word, 5));
};


/**
 * @param {!Array<!proto.lens.TranslationData.Line.Word>} value
 * @return {!proto.lens.TranslationData.Line} returns this
*/
proto.lens.TranslationData.Line.prototype.setWordList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.lens.TranslationData.Line.Word=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.TranslationData.Line.Word}
 */
proto.lens.TranslationData.Line.prototype.addWord = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.lens.TranslationData.Line.Word, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.TranslationData.Line} returns this
 */
proto.lens.TranslationData.Line.prototype.clearWordList = function() {
  return this.setWordList([]);
};


/**
 * optional BackgroundImageData background_image_data = 9;
 * @return {?proto.lens.TranslationData.BackgroundImageData}
 */
proto.lens.TranslationData.Line.prototype.getBackgroundImageData = function() {
  return /** @type{?proto.lens.TranslationData.BackgroundImageData} */ (
    jspb.Message.getWrapperField(this, proto.lens.TranslationData.BackgroundImageData, 9));
};


/**
 * @param {?proto.lens.TranslationData.BackgroundImageData|undefined} value
 * @return {!proto.lens.TranslationData.Line} returns this
*/
proto.lens.TranslationData.Line.prototype.setBackgroundImageData = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.TranslationData.Line} returns this
 */
proto.lens.TranslationData.Line.prototype.clearBackgroundImageData = function() {
  return this.setBackgroundImageData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.TranslationData.Line.prototype.hasBackgroundImageData = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Status status = 1;
 * @return {?proto.lens.TranslationData.Status}
 */
proto.lens.TranslationData.prototype.getStatus = function() {
  return /** @type{?proto.lens.TranslationData.Status} */ (
    jspb.Message.getWrapperField(this, proto.lens.TranslationData.Status, 1));
};


/**
 * @param {?proto.lens.TranslationData.Status|undefined} value
 * @return {!proto.lens.TranslationData} returns this
*/
proto.lens.TranslationData.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.TranslationData} returns this
 */
proto.lens.TranslationData.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.TranslationData.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string target_language = 2;
 * @return {string}
 */
proto.lens.TranslationData.prototype.getTargetLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.TranslationData} returns this
 */
proto.lens.TranslationData.prototype.setTargetLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string source_language = 3;
 * @return {string}
 */
proto.lens.TranslationData.prototype.getSourceLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.TranslationData} returns this
 */
proto.lens.TranslationData.prototype.setSourceLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string translation = 4;
 * @return {string}
 */
proto.lens.TranslationData.prototype.getTranslation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.TranslationData} returns this
 */
proto.lens.TranslationData.prototype.setTranslation = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Line line = 5;
 * @return {!Array<!proto.lens.TranslationData.Line>}
 */
proto.lens.TranslationData.prototype.getLineList = function() {
  return /** @type{!Array<!proto.lens.TranslationData.Line>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lens.TranslationData.Line, 5));
};


/**
 * @param {!Array<!proto.lens.TranslationData.Line>} value
 * @return {!proto.lens.TranslationData} returns this
*/
proto.lens.TranslationData.prototype.setLineList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.lens.TranslationData.Line=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.TranslationData.Line}
 */
proto.lens.TranslationData.prototype.addLine = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.lens.TranslationData.Line, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.TranslationData} returns this
 */
proto.lens.TranslationData.prototype.clearLineList = function() {
  return this.setLineList([]);
};


/**
 * optional WritingDirection writing_direction = 7;
 * @return {!proto.lens.WritingDirection}
 */
proto.lens.TranslationData.prototype.getWritingDirection = function() {
  return /** @type {!proto.lens.WritingDirection} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.lens.WritingDirection} value
 * @return {!proto.lens.TranslationData} returns this
 */
proto.lens.TranslationData.prototype.setWritingDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional Alignment alignment = 8;
 * @return {!proto.lens.Alignment}
 */
proto.lens.TranslationData.prototype.getAlignment = function() {
  return /** @type {!proto.lens.Alignment} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.lens.Alignment} value
 * @return {!proto.lens.TranslationData} returns this
 */
proto.lens.TranslationData.prototype.setAlignment = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional bool justified = 9;
 * @return {boolean}
 */
proto.lens.TranslationData.prototype.getJustified = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lens.TranslationData} returns this
 */
proto.lens.TranslationData.prototype.setJustified = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_document.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.lens.LensOverlayDocument', null, global);
goog.exportSymbol('proto.lens.Page', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayDocument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.LensOverlayDocument.repeatedFields_, null);
};
goog.inherits(proto.lens.LensOverlayDocument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayDocument.displayName = 'proto.lens.LensOverlayDocument';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.Page = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.Page.repeatedFields_, null);
};
goog.inherits(proto.lens.Page, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.Page.displayName = 'proto.lens.Page';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.LensOverlayDocument.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayDocument.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayDocument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayDocument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayDocument.toObject = function(includeInstance, msg) {
  var f, obj = {
pagesList: jspb.Message.toObjectList(msg.getPagesList(),
    proto.lens.Page.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayDocument}
 */
proto.lens.LensOverlayDocument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayDocument;
  return proto.lens.LensOverlayDocument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayDocument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayDocument}
 */
proto.lens.LensOverlayDocument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.Page;
      reader.readMessage(value,proto.lens.Page.deserializeBinaryFromReader);
      msg.addPages(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayDocument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayDocument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayDocument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayDocument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.lens.Page.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Page pages = 1;
 * @return {!Array<!proto.lens.Page>}
 */
proto.lens.LensOverlayDocument.prototype.getPagesList = function() {
  return /** @type{!Array<!proto.lens.Page>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lens.Page, 1));
};


/**
 * @param {!Array<!proto.lens.Page>} value
 * @return {!proto.lens.LensOverlayDocument} returns this
*/
proto.lens.LensOverlayDocument.prototype.setPagesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.lens.Page=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.Page}
 */
proto.lens.LensOverlayDocument.prototype.addPages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.lens.Page, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.LensOverlayDocument} returns this
 */
proto.lens.LensOverlayDocument.prototype.clearPagesList = function() {
  return this.setPagesList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.Page.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.Page.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.Page.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.Page} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Page.toObject = function(includeInstance, msg) {
  var f, obj = {
pageNumber: jspb.Message.getFieldWithDefault(msg, 1, 0),
textSegmentsList: (f = jspb.Message.getRepeatedField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.Page}
 */
proto.lens.Page.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.Page;
  return proto.lens.Page.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.Page} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.Page}
 */
proto.lens.Page.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageNumber(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.addTextSegments(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.Page.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.Page.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.Page} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Page.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPageNumber();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTextSegmentsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      4,
      f
    );
  }
};


/**
 * optional int32 page_number = 1;
 * @return {number}
 */
proto.lens.Page.prototype.getPageNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.Page} returns this
 */
proto.lens.Page.prototype.setPageNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * repeated string text_segments = 4;
 * @return {!Array<string>}
 */
proto.lens.Page.prototype.getTextSegmentsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 4));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.lens.Page} returns this
 */
proto.lens.Page.prototype.setTextSegmentsList = function(value) {
  return jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.lens.Page} returns this
 */
proto.lens.Page.prototype.addTextSegments = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.Page} returns this
 */
proto.lens.Page.prototype.clearTextSegmentsList = function() {
  return this.setTextSegmentsList([]);
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_filters.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.lens.AppliedFilter', null, global);
goog.exportSymbol('proto.lens.AppliedFilter.FilterPayloadCase', null, global);
goog.exportSymbol('proto.lens.AppliedFilter.Translate', null, global);
goog.exportSymbol('proto.lens.AppliedFilters', null, global);
goog.exportSymbol('proto.lens.LensOverlayFilterType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.AppliedFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.lens.AppliedFilter.oneofGroups_);
};
goog.inherits(proto.lens.AppliedFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.AppliedFilter.displayName = 'proto.lens.AppliedFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.AppliedFilter.Translate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.AppliedFilter.Translate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.AppliedFilter.Translate.displayName = 'proto.lens.AppliedFilter.Translate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.AppliedFilters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.AppliedFilters.repeatedFields_, null);
};
goog.inherits(proto.lens.AppliedFilters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.AppliedFilters.displayName = 'proto.lens.AppliedFilters';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.lens.AppliedFilter.oneofGroups_ = [[3]];

/**
 * @enum {number}
 */
proto.lens.AppliedFilter.FilterPayloadCase = {
  FILTER_PAYLOAD_NOT_SET: 0,
  TRANSLATE: 3
};

/**
 * @return {proto.lens.AppliedFilter.FilterPayloadCase}
 */
proto.lens.AppliedFilter.prototype.getFilterPayloadCase = function() {
  return /** @type {proto.lens.AppliedFilter.FilterPayloadCase} */(jspb.Message.computeOneofCase(this, proto.lens.AppliedFilter.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.AppliedFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.AppliedFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.AppliedFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.AppliedFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
filterType: jspb.Message.getFieldWithDefault(msg, 1, 0),
translate: (f = msg.getTranslate()) && proto.lens.AppliedFilter.Translate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.AppliedFilter}
 */
proto.lens.AppliedFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.AppliedFilter;
  return proto.lens.AppliedFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.AppliedFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.AppliedFilter}
 */
proto.lens.AppliedFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lens.LensOverlayFilterType} */ (reader.readEnum());
      msg.setFilterType(value);
      break;
    case 3:
      var value = new proto.lens.AppliedFilter.Translate;
      reader.readMessage(value,proto.lens.AppliedFilter.Translate.deserializeBinaryFromReader);
      msg.setTranslate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.AppliedFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.AppliedFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.AppliedFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.AppliedFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilterType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTranslate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lens.AppliedFilter.Translate.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.AppliedFilter.Translate.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.AppliedFilter.Translate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.AppliedFilter.Translate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.AppliedFilter.Translate.toObject = function(includeInstance, msg) {
  var f, obj = {
targetLanguage: jspb.Message.getFieldWithDefault(msg, 1, ""),
sourceLanguage: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.AppliedFilter.Translate}
 */
proto.lens.AppliedFilter.Translate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.AppliedFilter.Translate;
  return proto.lens.AppliedFilter.Translate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.AppliedFilter.Translate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.AppliedFilter.Translate}
 */
proto.lens.AppliedFilter.Translate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetLanguage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceLanguage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.AppliedFilter.Translate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.AppliedFilter.Translate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.AppliedFilter.Translate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.AppliedFilter.Translate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetLanguage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSourceLanguage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string target_language = 1;
 * @return {string}
 */
proto.lens.AppliedFilter.Translate.prototype.getTargetLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.AppliedFilter.Translate} returns this
 */
proto.lens.AppliedFilter.Translate.prototype.setTargetLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string source_language = 2;
 * @return {string}
 */
proto.lens.AppliedFilter.Translate.prototype.getSourceLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.AppliedFilter.Translate} returns this
 */
proto.lens.AppliedFilter.Translate.prototype.setSourceLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional LensOverlayFilterType filter_type = 1;
 * @return {!proto.lens.LensOverlayFilterType}
 */
proto.lens.AppliedFilter.prototype.getFilterType = function() {
  return /** @type {!proto.lens.LensOverlayFilterType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lens.LensOverlayFilterType} value
 * @return {!proto.lens.AppliedFilter} returns this
 */
proto.lens.AppliedFilter.prototype.setFilterType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Translate translate = 3;
 * @return {?proto.lens.AppliedFilter.Translate}
 */
proto.lens.AppliedFilter.prototype.getTranslate = function() {
  return /** @type{?proto.lens.AppliedFilter.Translate} */ (
    jspb.Message.getWrapperField(this, proto.lens.AppliedFilter.Translate, 3));
};


/**
 * @param {?proto.lens.AppliedFilter.Translate|undefined} value
 * @return {!proto.lens.AppliedFilter} returns this
*/
proto.lens.AppliedFilter.prototype.setTranslate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.lens.AppliedFilter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.AppliedFilter} returns this
 */
proto.lens.AppliedFilter.prototype.clearTranslate = function() {
  return this.setTranslate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.AppliedFilter.prototype.hasTranslate = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.AppliedFilters.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.AppliedFilters.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.AppliedFilters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.AppliedFilters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.AppliedFilters.toObject = function(includeInstance, msg) {
  var f, obj = {
filterList: jspb.Message.toObjectList(msg.getFilterList(),
    proto.lens.AppliedFilter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.AppliedFilters}
 */
proto.lens.AppliedFilters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.AppliedFilters;
  return proto.lens.AppliedFilters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.AppliedFilters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.AppliedFilters}
 */
proto.lens.AppliedFilters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.AppliedFilter;
      reader.readMessage(value,proto.lens.AppliedFilter.deserializeBinaryFromReader);
      msg.addFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.AppliedFilters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.AppliedFilters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.AppliedFilters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.AppliedFilters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilterList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.lens.AppliedFilter.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AppliedFilter filter = 1;
 * @return {!Array<!proto.lens.AppliedFilter>}
 */
proto.lens.AppliedFilters.prototype.getFilterList = function() {
  return /** @type{!Array<!proto.lens.AppliedFilter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lens.AppliedFilter, 1));
};


/**
 * @param {!Array<!proto.lens.AppliedFilter>} value
 * @return {!proto.lens.AppliedFilters} returns this
*/
proto.lens.AppliedFilters.prototype.setFilterList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.lens.AppliedFilter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.AppliedFilter}
 */
proto.lens.AppliedFilters.prototype.addFilter = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.lens.AppliedFilter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.AppliedFilters} returns this
 */
proto.lens.AppliedFilters.prototype.clearFilterList = function() {
  return this.setFilterList([]);
};


/**
 * @enum {number}
 */
proto.lens.LensOverlayFilterType = {
  UNKNOWN_FILTER_TYPE: 0,
  TRANSLATE: 2,
  AUTO_FILTER: 7
};

goog.object.extend(exports, proto.lens);
// source: lens_overlay_geometry.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_polygon_pb = require('./lens_overlay_polygon_pb.cjs');
goog.object.extend(proto, lens_overlay_polygon_pb);
goog.exportSymbol('proto.lens.CenterRotatedBox', null, global);
goog.exportSymbol('proto.lens.Geometry', null, global);
goog.exportSymbol('proto.lens.ZoomedCrop', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.CenterRotatedBox = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.CenterRotatedBox, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.CenterRotatedBox.displayName = 'proto.lens.CenterRotatedBox';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.Geometry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.Geometry.repeatedFields_, null);
};
goog.inherits(proto.lens.Geometry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.Geometry.displayName = 'proto.lens.Geometry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.ZoomedCrop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.ZoomedCrop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.ZoomedCrop.displayName = 'proto.lens.ZoomedCrop';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.CenterRotatedBox.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.CenterRotatedBox.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.CenterRotatedBox} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.CenterRotatedBox.toObject = function(includeInstance, msg) {
  var f, obj = {
centerX: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
centerY: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
width: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
height: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
rotationZ: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
coordinateType: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.CenterRotatedBox}
 */
proto.lens.CenterRotatedBox.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.CenterRotatedBox;
  return proto.lens.CenterRotatedBox.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.CenterRotatedBox} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.CenterRotatedBox}
 */
proto.lens.CenterRotatedBox.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCenterX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCenterY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWidth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRotationZ(value);
      break;
    case 6:
      var value = /** @type {!proto.lens.CoordinateType} */ (reader.readEnum());
      msg.setCoordinateType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.CenterRotatedBox.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.CenterRotatedBox.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.CenterRotatedBox} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.CenterRotatedBox.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCenterX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getCenterY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getRotationZ();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getCoordinateType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional float center_x = 1;
 * @return {number}
 */
proto.lens.CenterRotatedBox.prototype.getCenterX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.lens.CenterRotatedBox} returns this
 */
proto.lens.CenterRotatedBox.prototype.setCenterX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float center_y = 2;
 * @return {number}
 */
proto.lens.CenterRotatedBox.prototype.getCenterY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.lens.CenterRotatedBox} returns this
 */
proto.lens.CenterRotatedBox.prototype.setCenterY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float width = 3;
 * @return {number}
 */
proto.lens.CenterRotatedBox.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.lens.CenterRotatedBox} returns this
 */
proto.lens.CenterRotatedBox.prototype.setWidth = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float height = 4;
 * @return {number}
 */
proto.lens.CenterRotatedBox.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.lens.CenterRotatedBox} returns this
 */
proto.lens.CenterRotatedBox.prototype.setHeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float rotation_z = 5;
 * @return {number}
 */
proto.lens.CenterRotatedBox.prototype.getRotationZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.lens.CenterRotatedBox} returns this
 */
proto.lens.CenterRotatedBox.prototype.setRotationZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional CoordinateType coordinate_type = 6;
 * @return {!proto.lens.CoordinateType}
 */
proto.lens.CenterRotatedBox.prototype.getCoordinateType = function() {
  return /** @type {!proto.lens.CoordinateType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.lens.CoordinateType} value
 * @return {!proto.lens.CenterRotatedBox} returns this
 */
proto.lens.CenterRotatedBox.prototype.setCoordinateType = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.Geometry.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.Geometry.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.Geometry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.Geometry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Geometry.toObject = function(includeInstance, msg) {
  var f, obj = {
boundingBox: (f = msg.getBoundingBox()) && proto.lens.CenterRotatedBox.toObject(includeInstance, f),
segmentationPolygonList: jspb.Message.toObjectList(msg.getSegmentationPolygonList(),
    lens_overlay_polygon_pb.Polygon.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.Geometry}
 */
proto.lens.Geometry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.Geometry;
  return proto.lens.Geometry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.Geometry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.Geometry}
 */
proto.lens.Geometry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.CenterRotatedBox;
      reader.readMessage(value,proto.lens.CenterRotatedBox.deserializeBinaryFromReader);
      msg.setBoundingBox(value);
      break;
    case 5:
      var value = new lens_overlay_polygon_pb.Polygon;
      reader.readMessage(value,lens_overlay_polygon_pb.Polygon.deserializeBinaryFromReader);
      msg.addSegmentationPolygon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.Geometry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.Geometry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.Geometry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Geometry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoundingBox();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.CenterRotatedBox.serializeBinaryToWriter
    );
  }
  f = message.getSegmentationPolygonList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      lens_overlay_polygon_pb.Polygon.serializeBinaryToWriter
    );
  }
};


/**
 * optional CenterRotatedBox bounding_box = 1;
 * @return {?proto.lens.CenterRotatedBox}
 */
proto.lens.Geometry.prototype.getBoundingBox = function() {
  return /** @type{?proto.lens.CenterRotatedBox} */ (
    jspb.Message.getWrapperField(this, proto.lens.CenterRotatedBox, 1));
};


/**
 * @param {?proto.lens.CenterRotatedBox|undefined} value
 * @return {!proto.lens.Geometry} returns this
*/
proto.lens.Geometry.prototype.setBoundingBox = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.Geometry} returns this
 */
proto.lens.Geometry.prototype.clearBoundingBox = function() {
  return this.setBoundingBox(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.Geometry.prototype.hasBoundingBox = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Polygon segmentation_polygon = 5;
 * @return {!Array<!proto.lens.Polygon>}
 */
proto.lens.Geometry.prototype.getSegmentationPolygonList = function() {
  return /** @type{!Array<!proto.lens.Polygon>} */ (
    jspb.Message.getRepeatedWrapperField(this, lens_overlay_polygon_pb.Polygon, 5));
};


/**
 * @param {!Array<!proto.lens.Polygon>} value
 * @return {!proto.lens.Geometry} returns this
*/
proto.lens.Geometry.prototype.setSegmentationPolygonList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.lens.Polygon=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.Polygon}
 */
proto.lens.Geometry.prototype.addSegmentationPolygon = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.lens.Polygon, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.Geometry} returns this
 */
proto.lens.Geometry.prototype.clearSegmentationPolygonList = function() {
  return this.setSegmentationPolygonList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.ZoomedCrop.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.ZoomedCrop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.ZoomedCrop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ZoomedCrop.toObject = function(includeInstance, msg) {
  var f, obj = {
crop: (f = msg.getCrop()) && proto.lens.CenterRotatedBox.toObject(includeInstance, f),
parentWidth: jspb.Message.getFieldWithDefault(msg, 2, 0),
parentHeight: jspb.Message.getFieldWithDefault(msg, 3, 0),
zoom: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.ZoomedCrop}
 */
proto.lens.ZoomedCrop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.ZoomedCrop;
  return proto.lens.ZoomedCrop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.ZoomedCrop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.ZoomedCrop}
 */
proto.lens.ZoomedCrop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.CenterRotatedBox;
      reader.readMessage(value,proto.lens.CenterRotatedBox.deserializeBinaryFromReader);
      msg.setCrop(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParentWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParentHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.ZoomedCrop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.ZoomedCrop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.ZoomedCrop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ZoomedCrop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCrop();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.CenterRotatedBox.serializeBinaryToWriter
    );
  }
  f = message.getParentWidth();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getParentHeight();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getZoom();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional CenterRotatedBox crop = 1;
 * @return {?proto.lens.CenterRotatedBox}
 */
proto.lens.ZoomedCrop.prototype.getCrop = function() {
  return /** @type{?proto.lens.CenterRotatedBox} */ (
    jspb.Message.getWrapperField(this, proto.lens.CenterRotatedBox, 1));
};


/**
 * @param {?proto.lens.CenterRotatedBox|undefined} value
 * @return {!proto.lens.ZoomedCrop} returns this
*/
proto.lens.ZoomedCrop.prototype.setCrop = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.ZoomedCrop} returns this
 */
proto.lens.ZoomedCrop.prototype.clearCrop = function() {
  return this.setCrop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.ZoomedCrop.prototype.hasCrop = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 parent_width = 2;
 * @return {number}
 */
proto.lens.ZoomedCrop.prototype.getParentWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.ZoomedCrop} returns this
 */
proto.lens.ZoomedCrop.prototype.setParentWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 parent_height = 3;
 * @return {number}
 */
proto.lens.ZoomedCrop.prototype.getParentHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.ZoomedCrop} returns this
 */
proto.lens.ZoomedCrop.prototype.setParentHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional float zoom = 4;
 * @return {number}
 */
proto.lens.ZoomedCrop.prototype.getZoom = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.lens.ZoomedCrop} returns this
 */
proto.lens.ZoomedCrop.prototype.setZoom = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_image_crop.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_geometry_pb = require('./lens_overlay_geometry_pb.cjs');
goog.object.extend(proto, lens_overlay_geometry_pb);
var lens_overlay_payload_pb = require('./lens_overlay_payload_pb.cjs');
goog.object.extend(proto, lens_overlay_payload_pb);
goog.exportSymbol('proto.lens.ImageCrop', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.ImageCrop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.ImageCrop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.ImageCrop.displayName = 'proto.lens.ImageCrop';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.ImageCrop.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.ImageCrop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.ImageCrop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ImageCrop.toObject = function(includeInstance, msg) {
  var f, obj = {
cropId: jspb.Message.getFieldWithDefault(msg, 1, ""),
image: (f = msg.getImage()) && lens_overlay_payload_pb.ClientImage.toObject(includeInstance, f),
zoomedCrop: (f = msg.getZoomedCrop()) && lens_overlay_geometry_pb.ZoomedCrop.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.ImageCrop}
 */
proto.lens.ImageCrop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.ImageCrop;
  return proto.lens.ImageCrop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.ImageCrop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.ImageCrop}
 */
proto.lens.ImageCrop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCropId(value);
      break;
    case 2:
      var value = new lens_overlay_payload_pb.ClientImage;
      reader.readMessage(value,lens_overlay_payload_pb.ClientImage.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 3:
      var value = new lens_overlay_geometry_pb.ZoomedCrop;
      reader.readMessage(value,lens_overlay_geometry_pb.ZoomedCrop.deserializeBinaryFromReader);
      msg.setZoomedCrop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.ImageCrop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.ImageCrop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.ImageCrop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ImageCrop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCropId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      lens_overlay_payload_pb.ClientImage.serializeBinaryToWriter
    );
  }
  f = message.getZoomedCrop();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      lens_overlay_geometry_pb.ZoomedCrop.serializeBinaryToWriter
    );
  }
};


/**
 * optional string crop_id = 1;
 * @return {string}
 */
proto.lens.ImageCrop.prototype.getCropId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.ImageCrop} returns this
 */
proto.lens.ImageCrop.prototype.setCropId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ClientImage image = 2;
 * @return {?proto.lens.ClientImage}
 */
proto.lens.ImageCrop.prototype.getImage = function() {
  return /** @type{?proto.lens.ClientImage} */ (
    jspb.Message.getWrapperField(this, lens_overlay_payload_pb.ClientImage, 2));
};


/**
 * @param {?proto.lens.ClientImage|undefined} value
 * @return {!proto.lens.ImageCrop} returns this
*/
proto.lens.ImageCrop.prototype.setImage = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.ImageCrop} returns this
 */
proto.lens.ImageCrop.prototype.clearImage = function() {
  return this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.ImageCrop.prototype.hasImage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ZoomedCrop zoomed_crop = 3;
 * @return {?proto.lens.ZoomedCrop}
 */
proto.lens.ImageCrop.prototype.getZoomedCrop = function() {
  return /** @type{?proto.lens.ZoomedCrop} */ (
    jspb.Message.getWrapperField(this, lens_overlay_geometry_pb.ZoomedCrop, 3));
};


/**
 * @param {?proto.lens.ZoomedCrop|undefined} value
 * @return {!proto.lens.ImageCrop} returns this
*/
proto.lens.ImageCrop.prototype.setZoomedCrop = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.ImageCrop} returns this
 */
proto.lens.ImageCrop.prototype.clearZoomedCrop = function() {
  return this.setZoomedCrop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.ImageCrop.prototype.hasZoomedCrop = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_image_data.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_geometry_pb = require('./lens_overlay_geometry_pb.cjs');
goog.object.extend(proto, lens_overlay_geometry_pb);
goog.exportSymbol('proto.lens.ImageData', null, global);
goog.exportSymbol('proto.lens.ImageMetadata', null, global);
goog.exportSymbol('proto.lens.ImagePayload', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.ImageData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.ImageData.repeatedFields_, null);
};
goog.inherits(proto.lens.ImageData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.ImageData.displayName = 'proto.lens.ImageData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.ImagePayload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.ImagePayload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.ImagePayload.displayName = 'proto.lens.ImagePayload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.ImageMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.ImageMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.ImageMetadata.displayName = 'proto.lens.ImageMetadata';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.ImageData.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.ImageData.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.ImageData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.ImageData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ImageData.toObject = function(includeInstance, msg) {
  var f, obj = {
payload: (f = msg.getPayload()) && proto.lens.ImagePayload.toObject(includeInstance, f),
imageMetadata: (f = msg.getImageMetadata()) && proto.lens.ImageMetadata.toObject(includeInstance, f),
significantRegionsList: jspb.Message.toObjectList(msg.getSignificantRegionsList(),
    lens_overlay_geometry_pb.Geometry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.ImageData}
 */
proto.lens.ImageData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.ImageData;
  return proto.lens.ImageData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.ImageData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.ImageData}
 */
proto.lens.ImageData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.ImagePayload;
      reader.readMessage(value,proto.lens.ImagePayload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 3:
      var value = new proto.lens.ImageMetadata;
      reader.readMessage(value,proto.lens.ImageMetadata.deserializeBinaryFromReader);
      msg.setImageMetadata(value);
      break;
    case 4:
      var value = new lens_overlay_geometry_pb.Geometry;
      reader.readMessage(value,lens_overlay_geometry_pb.Geometry.deserializeBinaryFromReader);
      msg.addSignificantRegions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.ImageData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.ImageData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.ImageData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ImageData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.ImagePayload.serializeBinaryToWriter
    );
  }
  f = message.getImageMetadata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lens.ImageMetadata.serializeBinaryToWriter
    );
  }
  f = message.getSignificantRegionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      lens_overlay_geometry_pb.Geometry.serializeBinaryToWriter
    );
  }
};


/**
 * optional ImagePayload payload = 1;
 * @return {?proto.lens.ImagePayload}
 */
proto.lens.ImageData.prototype.getPayload = function() {
  return /** @type{?proto.lens.ImagePayload} */ (
    jspb.Message.getWrapperField(this, proto.lens.ImagePayload, 1));
};


/**
 * @param {?proto.lens.ImagePayload|undefined} value
 * @return {!proto.lens.ImageData} returns this
*/
proto.lens.ImageData.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.ImageData} returns this
 */
proto.lens.ImageData.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.ImageData.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ImageMetadata image_metadata = 3;
 * @return {?proto.lens.ImageMetadata}
 */
proto.lens.ImageData.prototype.getImageMetadata = function() {
  return /** @type{?proto.lens.ImageMetadata} */ (
    jspb.Message.getWrapperField(this, proto.lens.ImageMetadata, 3));
};


/**
 * @param {?proto.lens.ImageMetadata|undefined} value
 * @return {!proto.lens.ImageData} returns this
*/
proto.lens.ImageData.prototype.setImageMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.ImageData} returns this
 */
proto.lens.ImageData.prototype.clearImageMetadata = function() {
  return this.setImageMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.ImageData.prototype.hasImageMetadata = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Geometry significant_regions = 4;
 * @return {!Array<!proto.lens.Geometry>}
 */
proto.lens.ImageData.prototype.getSignificantRegionsList = function() {
  return /** @type{!Array<!proto.lens.Geometry>} */ (
    jspb.Message.getRepeatedWrapperField(this, lens_overlay_geometry_pb.Geometry, 4));
};


/**
 * @param {!Array<!proto.lens.Geometry>} value
 * @return {!proto.lens.ImageData} returns this
*/
proto.lens.ImageData.prototype.setSignificantRegionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.lens.Geometry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.Geometry}
 */
proto.lens.ImageData.prototype.addSignificantRegions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.lens.Geometry, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.ImageData} returns this
 */
proto.lens.ImageData.prototype.clearSignificantRegionsList = function() {
  return this.setSignificantRegionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.ImagePayload.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.ImagePayload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.ImagePayload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ImagePayload.toObject = function(includeInstance, msg) {
  var f, obj = {
imageBytes: msg.getImageBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.ImagePayload}
 */
proto.lens.ImagePayload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.ImagePayload;
  return proto.lens.ImagePayload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.ImagePayload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.ImagePayload}
 */
proto.lens.ImagePayload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImageBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.ImagePayload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.ImagePayload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.ImagePayload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ImagePayload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImageBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes image_bytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lens.ImagePayload.prototype.getImageBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes image_bytes = 1;
 * This is a type-conversion wrapper around `getImageBytes()`
 * @return {string}
 */
proto.lens.ImagePayload.prototype.getImageBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImageBytes()));
};


/**
 * optional bytes image_bytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImageBytes()`
 * @return {!Uint8Array}
 */
proto.lens.ImagePayload.prototype.getImageBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImageBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lens.ImagePayload} returns this
 */
proto.lens.ImagePayload.prototype.setImageBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.ImageMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.ImageMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.ImageMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ImageMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
width: jspb.Message.getFieldWithDefault(msg, 1, 0),
height: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.ImageMetadata}
 */
proto.lens.ImageMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.ImageMetadata;
  return proto.lens.ImageMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.ImageMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.ImageMetadata}
 */
proto.lens.ImageMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.ImageMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.ImageMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.ImageMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ImageMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWidth();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 width = 1;
 * @return {number}
 */
proto.lens.ImageMetadata.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.ImageMetadata} returns this
 */
proto.lens.ImageMetadata.prototype.setWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 height = 2;
 * @return {number}
 */
proto.lens.ImageMetadata.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.ImageMetadata} returns this
 */
proto.lens.ImageMetadata.prototype.setHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_interaction_request_metadata.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_geometry_pb = require('./lens_overlay_geometry_pb.cjs');
goog.object.extend(proto, lens_overlay_geometry_pb);
var lens_overlay_text_query_pb = require('./lens_overlay_text_query_pb.cjs');
goog.object.extend(proto, lens_overlay_text_query_pb);
goog.exportSymbol('proto.lens.LensOverlayInteractionRequestMetadata', null, global);
goog.exportSymbol('proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata', null, global);
goog.exportSymbol('proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata', null, global);
goog.exportSymbol('proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object', null, global);
goog.exportSymbol('proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point', null, global);
goog.exportSymbol('proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region', null, global);
goog.exportSymbol('proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.SelectionCase', null, global);
goog.exportSymbol('proto.lens.LensOverlayInteractionRequestMetadata.Type', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayInteractionRequestMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayInteractionRequestMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayInteractionRequestMetadata.displayName = 'proto.lens.LensOverlayInteractionRequestMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.oneofGroups_);
};
goog.inherits(proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.displayName = 'proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.displayName = 'proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.displayName = 'proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.displayName = 'proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.displayName = 'proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayInteractionRequestMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayInteractionRequestMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
type: jspb.Message.getFieldWithDefault(msg, 1, 0),
selectionMetadata: (f = msg.getSelectionMetadata()) && proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.toObject(includeInstance, f),
queryMetadata: (f = msg.getQueryMetadata()) && proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata}
 */
proto.lens.LensOverlayInteractionRequestMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayInteractionRequestMetadata;
  return proto.lens.LensOverlayInteractionRequestMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata}
 */
proto.lens.LensOverlayInteractionRequestMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lens.LensOverlayInteractionRequestMetadata.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata;
      reader.readMessage(value,proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.deserializeBinaryFromReader);
      msg.setSelectionMetadata(value);
      break;
    case 4:
      var value = new proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata;
      reader.readMessage(value,proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.deserializeBinaryFromReader);
      msg.setQueryMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayInteractionRequestMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayInteractionRequestMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSelectionMetadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.serializeBinaryToWriter
    );
  }
  f = message.getQueryMetadata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.lens.LensOverlayInteractionRequestMetadata.Type = {
  UNKNOWN: 0,
  TAP: 1,
  REGION: 2,
  TEXT_SELECTION: 3,
  REGION_SEARCH: 4,
  OBJECT_FULFILLMENT: 5,
  CONTEXTUAL_SEARCH_QUERY: 9,
  PDF_QUERY: 10,
  WEBPAGE_QUERY: 11
};


/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.SelectionCase = {
  SELECTION_NOT_SET: 0,
  POINT: 1,
  REGION: 2,
  OBJECT: 3
};

/**
 * @return {proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.SelectionCase}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.getSelectionCase = function() {
  return /** @type {proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.SelectionCase} */(jspb.Message.computeOneofCase(this, proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
point: (f = msg.getPoint()) && proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.toObject(includeInstance, f),
region: (f = msg.getRegion()) && proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.toObject(includeInstance, f),
object: (f = msg.getObject()) && proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata;
  return proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point;
      reader.readMessage(value,proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.deserializeBinaryFromReader);
      msg.setPoint(value);
      break;
    case 2:
      var value = new proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region;
      reader.readMessage(value,proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.deserializeBinaryFromReader);
      msg.setRegion(value);
      break;
    case 3:
      var value = new proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object;
      reader.readMessage(value,proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.deserializeBinaryFromReader);
      msg.setObject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.serializeBinaryToWriter
    );
  }
  f = message.getRegion();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.serializeBinaryToWriter
    );
  }
  f = message.getObject();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.toObject = function(includeInstance, msg) {
  var f, obj = {
x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point;
  return proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.toObject = function(includeInstance, msg) {
  var f, obj = {
region: (f = msg.getRegion()) && lens_overlay_geometry_pb.CenterRotatedBox.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region;
  return proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new lens_overlay_geometry_pb.CenterRotatedBox;
      reader.readMessage(value,lens_overlay_geometry_pb.CenterRotatedBox.deserializeBinaryFromReader);
      msg.setRegion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      lens_overlay_geometry_pb.CenterRotatedBox.serializeBinaryToWriter
    );
  }
};


/**
 * optional CenterRotatedBox region = 1;
 * @return {?proto.lens.CenterRotatedBox}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.prototype.getRegion = function() {
  return /** @type{?proto.lens.CenterRotatedBox} */ (
    jspb.Message.getWrapperField(this, lens_overlay_geometry_pb.CenterRotatedBox, 1));
};


/**
 * @param {?proto.lens.CenterRotatedBox|undefined} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region} returns this
*/
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.prototype.setRegion = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.prototype.clearRegion = function() {
  return this.setRegion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.prototype.hasRegion = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.toObject = function(includeInstance, msg) {
  var f, obj = {
objectId: jspb.Message.getFieldWithDefault(msg, 1, ""),
geometry: (f = msg.getGeometry()) && lens_overlay_geometry_pb.Geometry.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object;
  return proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setObjectId(value);
      break;
    case 2:
      var value = new lens_overlay_geometry_pb.Geometry;
      reader.readMessage(value,lens_overlay_geometry_pb.Geometry.deserializeBinaryFromReader);
      msg.setGeometry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGeometry();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      lens_overlay_geometry_pb.Geometry.serializeBinaryToWriter
    );
  }
};


/**
 * optional string object_id = 1;
 * @return {string}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.prototype.getObjectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.prototype.setObjectId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Geometry geometry = 2;
 * @return {?proto.lens.Geometry}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.prototype.getGeometry = function() {
  return /** @type{?proto.lens.Geometry} */ (
    jspb.Message.getWrapperField(this, lens_overlay_geometry_pb.Geometry, 2));
};


/**
 * @param {?proto.lens.Geometry|undefined} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object} returns this
*/
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.prototype.setGeometry = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.prototype.clearGeometry = function() {
  return this.setGeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.prototype.hasGeometry = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Point point = 1;
 * @return {?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.getPoint = function() {
  return /** @type{?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point} */ (
    jspb.Message.getWrapperField(this, proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point, 1));
};


/**
 * @param {?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point|undefined} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata} returns this
*/
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.setPoint = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.clearPoint = function() {
  return this.setPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.hasPoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Region region = 2;
 * @return {?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.getRegion = function() {
  return /** @type{?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region} */ (
    jspb.Message.getWrapperField(this, proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region, 2));
};


/**
 * @param {?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region|undefined} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata} returns this
*/
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.setRegion = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.clearRegion = function() {
  return this.setRegion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.hasRegion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Object object = 3;
 * @return {?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.getObject = function() {
  return /** @type{?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object} */ (
    jspb.Message.getWrapperField(this, proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object, 3));
};


/**
 * @param {?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object|undefined} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata} returns this
*/
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.setObject = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.clearObject = function() {
  return this.setObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.hasObject = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
textQuery: (f = msg.getTextQuery()) && lens_overlay_text_query_pb.TextQuery.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata}
 */
proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata;
  return proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata}
 */
proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new lens_overlay_text_query_pb.TextQuery;
      reader.readMessage(value,lens_overlay_text_query_pb.TextQuery.deserializeBinaryFromReader);
      msg.setTextQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTextQuery();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      lens_overlay_text_query_pb.TextQuery.serializeBinaryToWriter
    );
  }
};


/**
 * optional TextQuery text_query = 2;
 * @return {?proto.lens.TextQuery}
 */
proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.prototype.getTextQuery = function() {
  return /** @type{?proto.lens.TextQuery} */ (
    jspb.Message.getWrapperField(this, lens_overlay_text_query_pb.TextQuery, 2));
};


/**
 * @param {?proto.lens.TextQuery|undefined} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata} returns this
*/
proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.prototype.setTextQuery = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.prototype.clearTextQuery = function() {
  return this.setTextQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.prototype.hasTextQuery = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Type type = 1;
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.Type}
 */
proto.lens.LensOverlayInteractionRequestMetadata.prototype.getType = function() {
  return /** @type {!proto.lens.LensOverlayInteractionRequestMetadata.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.Type} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional SelectionMetadata selection_metadata = 2;
 * @return {?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata}
 */
proto.lens.LensOverlayInteractionRequestMetadata.prototype.getSelectionMetadata = function() {
  return /** @type{?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata} */ (
    jspb.Message.getWrapperField(this, proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata, 2));
};


/**
 * @param {?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata|undefined} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata} returns this
*/
proto.lens.LensOverlayInteractionRequestMetadata.prototype.setSelectionMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.prototype.clearSelectionMetadata = function() {
  return this.setSelectionMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionRequestMetadata.prototype.hasSelectionMetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional QueryMetadata query_metadata = 4;
 * @return {?proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata}
 */
proto.lens.LensOverlayInteractionRequestMetadata.prototype.getQueryMetadata = function() {
  return /** @type{?proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata} */ (
    jspb.Message.getWrapperField(this, proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata, 4));
};


/**
 * @param {?proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata|undefined} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata} returns this
*/
proto.lens.LensOverlayInteractionRequestMetadata.prototype.setQueryMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.prototype.clearQueryMetadata = function() {
  return this.setQueryMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionRequestMetadata.prototype.hasQueryMetadata = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_knowledge_intent_query.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_translate_stickiness_signals_pb = require('./lens_overlay_translate_stickiness_signals_pb.cjs');
goog.object.extend(proto, lens_overlay_translate_stickiness_signals_pb);
goog.exportSymbol('proto.lens.Argument', null, global);
goog.exportSymbol('proto.lens.ArgumentValue', null, global);
goog.exportSymbol('proto.lens.ArgumentValue.ValueCase', null, global);
goog.exportSymbol('proto.lens.FunctionCall', null, global);
goog.exportSymbol('proto.lens.FunctionCallSignals', null, global);
goog.exportSymbol('proto.lens.SimpleValue', null, global);
goog.exportSymbol('proto.lens.SimpleValue.ValueCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.FunctionCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.FunctionCall.repeatedFields_, null);
};
goog.inherits(proto.lens.FunctionCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.FunctionCall.displayName = 'proto.lens.FunctionCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.FunctionCallSignals = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.lens.FunctionCallSignals, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.FunctionCallSignals.displayName = 'proto.lens.FunctionCallSignals';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.Argument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.Argument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.Argument.displayName = 'proto.lens.Argument';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.ArgumentValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.lens.ArgumentValue.oneofGroups_);
};
goog.inherits(proto.lens.ArgumentValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.ArgumentValue.displayName = 'proto.lens.ArgumentValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.SimpleValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.lens.SimpleValue.oneofGroups_);
};
goog.inherits(proto.lens.SimpleValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.SimpleValue.displayName = 'proto.lens.SimpleValue';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.FunctionCall.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.FunctionCall.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.FunctionCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.FunctionCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.FunctionCall.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
argumentList: jspb.Message.toObjectList(msg.getArgumentList(),
    proto.lens.Argument.toObject, includeInstance),
signals: (f = msg.getSignals()) && proto.lens.FunctionCallSignals.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.FunctionCall}
 */
proto.lens.FunctionCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.FunctionCall;
  return proto.lens.FunctionCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.FunctionCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.FunctionCall}
 */
proto.lens.FunctionCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.lens.Argument;
      reader.readMessage(value,proto.lens.Argument.deserializeBinaryFromReader);
      msg.addArgument(value);
      break;
    case 4:
      var value = new proto.lens.FunctionCallSignals;
      reader.readMessage(value,proto.lens.FunctionCallSignals.deserializeBinaryFromReader);
      msg.setSignals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.FunctionCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.FunctionCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.FunctionCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.FunctionCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArgumentList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.lens.Argument.serializeBinaryToWriter
    );
  }
  f = message.getSignals();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.lens.FunctionCallSignals.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.lens.FunctionCall.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.FunctionCall} returns this
 */
proto.lens.FunctionCall.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Argument argument = 2;
 * @return {!Array<!proto.lens.Argument>}
 */
proto.lens.FunctionCall.prototype.getArgumentList = function() {
  return /** @type{!Array<!proto.lens.Argument>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lens.Argument, 2));
};


/**
 * @param {!Array<!proto.lens.Argument>} value
 * @return {!proto.lens.FunctionCall} returns this
*/
proto.lens.FunctionCall.prototype.setArgumentList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.lens.Argument=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.Argument}
 */
proto.lens.FunctionCall.prototype.addArgument = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.lens.Argument, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.FunctionCall} returns this
 */
proto.lens.FunctionCall.prototype.clearArgumentList = function() {
  return this.setArgumentList([]);
};


/**
 * optional FunctionCallSignals signals = 4;
 * @return {?proto.lens.FunctionCallSignals}
 */
proto.lens.FunctionCall.prototype.getSignals = function() {
  return /** @type{?proto.lens.FunctionCallSignals} */ (
    jspb.Message.getWrapperField(this, proto.lens.FunctionCallSignals, 4));
};


/**
 * @param {?proto.lens.FunctionCallSignals|undefined} value
 * @return {!proto.lens.FunctionCall} returns this
*/
proto.lens.FunctionCall.prototype.setSignals = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.FunctionCall} returns this
 */
proto.lens.FunctionCall.prototype.clearSignals = function() {
  return this.setSignals(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.FunctionCall.prototype.hasSignals = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.FunctionCallSignals.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.FunctionCallSignals.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.FunctionCallSignals} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.FunctionCallSignals.toObject = function(includeInstance, msg) {
  var f, obj = {
translateStickinessSignals: (f = msg.getTranslateStickinessSignals()) && lens_overlay_translate_stickiness_signals_pb.TranslateStickinessSignals.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.FunctionCallSignals}
 */
proto.lens.FunctionCallSignals.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.FunctionCallSignals;
  return proto.lens.FunctionCallSignals.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.FunctionCallSignals} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.FunctionCallSignals}
 */
proto.lens.FunctionCallSignals.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 311378150:
      var value = new lens_overlay_translate_stickiness_signals_pb.TranslateStickinessSignals;
      reader.readMessage(value,lens_overlay_translate_stickiness_signals_pb.TranslateStickinessSignals.deserializeBinaryFromReader);
      msg.setTranslateStickinessSignals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.FunctionCallSignals.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.FunctionCallSignals.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.FunctionCallSignals} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.FunctionCallSignals.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTranslateStickinessSignals();
  if (f != null) {
    writer.writeMessage(
      311378150,
      f,
      lens_overlay_translate_stickiness_signals_pb.TranslateStickinessSignals.serializeBinaryToWriter
    );
  }
};


/**
 * optional TranslateStickinessSignals translate_stickiness_signals = 311378150;
 * @return {?proto.lens.TranslateStickinessSignals}
 */
proto.lens.FunctionCallSignals.prototype.getTranslateStickinessSignals = function() {
  return /** @type{?proto.lens.TranslateStickinessSignals} */ (
    jspb.Message.getWrapperField(this, lens_overlay_translate_stickiness_signals_pb.TranslateStickinessSignals, 311378150));
};


/**
 * @param {?proto.lens.TranslateStickinessSignals|undefined} value
 * @return {!proto.lens.FunctionCallSignals} returns this
*/
proto.lens.FunctionCallSignals.prototype.setTranslateStickinessSignals = function(value) {
  return jspb.Message.setWrapperField(this, 311378150, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.FunctionCallSignals} returns this
 */
proto.lens.FunctionCallSignals.prototype.clearTranslateStickinessSignals = function() {
  return this.setTranslateStickinessSignals(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.FunctionCallSignals.prototype.hasTranslateStickinessSignals = function() {
  return jspb.Message.getField(this, 311378150) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.Argument.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.Argument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.Argument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Argument.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
value: (f = msg.getValue()) && proto.lens.ArgumentValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.Argument}
 */
proto.lens.Argument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.Argument;
  return proto.lens.Argument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.Argument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.Argument}
 */
proto.lens.Argument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.lens.ArgumentValue;
      reader.readMessage(value,proto.lens.ArgumentValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.Argument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.Argument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.Argument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Argument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lens.ArgumentValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.lens.Argument.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.Argument} returns this
 */
proto.lens.Argument.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ArgumentValue value = 2;
 * @return {?proto.lens.ArgumentValue}
 */
proto.lens.Argument.prototype.getValue = function() {
  return /** @type{?proto.lens.ArgumentValue} */ (
    jspb.Message.getWrapperField(this, proto.lens.ArgumentValue, 2));
};


/**
 * @param {?proto.lens.ArgumentValue|undefined} value
 * @return {!proto.lens.Argument} returns this
*/
proto.lens.Argument.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.Argument} returns this
 */
proto.lens.Argument.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.Argument.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.lens.ArgumentValue.oneofGroups_ = [[3]];

/**
 * @enum {number}
 */
proto.lens.ArgumentValue.ValueCase = {
  VALUE_NOT_SET: 0,
  SIMPLE_VALUE: 3
};

/**
 * @return {proto.lens.ArgumentValue.ValueCase}
 */
proto.lens.ArgumentValue.prototype.getValueCase = function() {
  return /** @type {proto.lens.ArgumentValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.lens.ArgumentValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.ArgumentValue.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.ArgumentValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.ArgumentValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ArgumentValue.toObject = function(includeInstance, msg) {
  var f, obj = {
simpleValue: (f = msg.getSimpleValue()) && proto.lens.SimpleValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.ArgumentValue}
 */
proto.lens.ArgumentValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.ArgumentValue;
  return proto.lens.ArgumentValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.ArgumentValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.ArgumentValue}
 */
proto.lens.ArgumentValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.lens.SimpleValue;
      reader.readMessage(value,proto.lens.SimpleValue.deserializeBinaryFromReader);
      msg.setSimpleValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.ArgumentValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.ArgumentValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.ArgumentValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ArgumentValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSimpleValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lens.SimpleValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional SimpleValue simple_value = 3;
 * @return {?proto.lens.SimpleValue}
 */
proto.lens.ArgumentValue.prototype.getSimpleValue = function() {
  return /** @type{?proto.lens.SimpleValue} */ (
    jspb.Message.getWrapperField(this, proto.lens.SimpleValue, 3));
};


/**
 * @param {?proto.lens.SimpleValue|undefined} value
 * @return {!proto.lens.ArgumentValue} returns this
*/
proto.lens.ArgumentValue.prototype.setSimpleValue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.lens.ArgumentValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.ArgumentValue} returns this
 */
proto.lens.ArgumentValue.prototype.clearSimpleValue = function() {
  return this.setSimpleValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.ArgumentValue.prototype.hasSimpleValue = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.lens.SimpleValue.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.lens.SimpleValue.ValueCase = {
  VALUE_NOT_SET: 0,
  STRING_VALUE: 1
};

/**
 * @return {proto.lens.SimpleValue.ValueCase}
 */
proto.lens.SimpleValue.prototype.getValueCase = function() {
  return /** @type {proto.lens.SimpleValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.lens.SimpleValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.SimpleValue.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.SimpleValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.SimpleValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.SimpleValue.toObject = function(includeInstance, msg) {
  var f, obj = {
stringValue: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.SimpleValue}
 */
proto.lens.SimpleValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.SimpleValue;
  return proto.lens.SimpleValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.SimpleValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.SimpleValue}
 */
proto.lens.SimpleValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.SimpleValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.SimpleValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.SimpleValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.SimpleValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string string_value = 1;
 * @return {string}
 */
proto.lens.SimpleValue.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.SimpleValue} returns this
 */
proto.lens.SimpleValue.prototype.setStringValue = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.lens.SimpleValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.lens.SimpleValue} returns this
 */
proto.lens.SimpleValue.prototype.clearStringValue = function() {
  return jspb.Message.setOneofField(this, 1, proto.lens.SimpleValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.SimpleValue.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_knowledge_query.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_knowledge_intent_query_pb = require('./lens_overlay_knowledge_intent_query_pb.cjs');
goog.object.extend(proto, lens_overlay_knowledge_intent_query_pb);
goog.exportSymbol('proto.lens.Query', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.Query = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.lens.Query, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.Query.displayName = 'proto.lens.Query';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.Query.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.Query.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.Query} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Query.toObject = function(includeInstance, msg) {
  var f, obj = {
intentQuery: (f = msg.getIntentQuery()) && lens_overlay_knowledge_intent_query_pb.FunctionCall.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.Query}
 */
proto.lens.Query.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.Query;
  return proto.lens.Query.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.Query} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.Query}
 */
proto.lens.Query.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 56249026:
      var value = new lens_overlay_knowledge_intent_query_pb.FunctionCall;
      reader.readMessage(value,lens_overlay_knowledge_intent_query_pb.FunctionCall.deserializeBinaryFromReader);
      msg.setIntentQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.Query.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.Query.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.Query} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Query.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIntentQuery();
  if (f != null) {
    writer.writeMessage(
      56249026,
      f,
      lens_overlay_knowledge_intent_query_pb.FunctionCall.serializeBinaryToWriter
    );
  }
};


/**
 * optional FunctionCall intent_query = 56249026;
 * @return {?proto.lens.FunctionCall}
 */
proto.lens.Query.prototype.getIntentQuery = function() {
  return /** @type{?proto.lens.FunctionCall} */ (
    jspb.Message.getWrapperField(this, lens_overlay_knowledge_intent_query_pb.FunctionCall, 56249026));
};


/**
 * @param {?proto.lens.FunctionCall|undefined} value
 * @return {!proto.lens.Query} returns this
*/
proto.lens.Query.prototype.setIntentQuery = function(value) {
  return jspb.Message.setWrapperField(this, 56249026, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.Query} returns this
 */
proto.lens.Query.prototype.clearIntentQuery = function() {
  return this.setIntentQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.Query.prototype.hasIntentQuery = function() {
  return jspb.Message.getField(this, 56249026) != null;
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_math_solver_query.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.lens.MathSolverQuery', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.MathSolverQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.MathSolverQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.MathSolverQuery.displayName = 'proto.lens.MathSolverQuery';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.MathSolverQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.MathSolverQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.MathSolverQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.MathSolverQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
mathInputEquation: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.MathSolverQuery}
 */
proto.lens.MathSolverQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.MathSolverQuery;
  return proto.lens.MathSolverQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.MathSolverQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.MathSolverQuery}
 */
proto.lens.MathSolverQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setMathInputEquation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.MathSolverQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.MathSolverQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.MathSolverQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.MathSolverQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMathInputEquation();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string math_input_equation = 3;
 * @return {string}
 */
proto.lens.MathSolverQuery.prototype.getMathInputEquation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.MathSolverQuery} returns this
 */
proto.lens.MathSolverQuery.prototype.setMathInputEquation = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_message_set.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_knowledge_query_pb = require('./lens_overlay_knowledge_query_pb.cjs');
goog.object.extend(proto, lens_overlay_knowledge_query_pb);
goog.exportSymbol('proto.lens.MessageSet', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.MessageSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.lens.MessageSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.MessageSet.displayName = 'proto.lens.MessageSet';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.MessageSet.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.MessageSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.MessageSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.MessageSet.toObject = function(includeInstance, msg) {
  var f, obj = {
messageSetExtension: (f = msg.getMessageSetExtension()) && lens_overlay_knowledge_query_pb.Query.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.MessageSet}
 */
proto.lens.MessageSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.MessageSet;
  return proto.lens.MessageSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.MessageSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.MessageSet}
 */
proto.lens.MessageSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 41401449:
      var value = new lens_overlay_knowledge_query_pb.Query;
      reader.readMessage(value,lens_overlay_knowledge_query_pb.Query.deserializeBinaryFromReader);
      msg.setMessageSetExtension(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.MessageSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.MessageSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.MessageSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.MessageSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessageSetExtension();
  if (f != null) {
    writer.writeMessage(
      41401449,
      f,
      lens_overlay_knowledge_query_pb.Query.serializeBinaryToWriter
    );
  }
};


/**
 * optional Query message_set_extension = 41401449;
 * @return {?proto.lens.Query}
 */
proto.lens.MessageSet.prototype.getMessageSetExtension = function() {
  return /** @type{?proto.lens.Query} */ (
    jspb.Message.getWrapperField(this, lens_overlay_knowledge_query_pb.Query, 41401449));
};


/**
 * @param {?proto.lens.Query|undefined} value
 * @return {!proto.lens.MessageSet} returns this
*/
proto.lens.MessageSet.prototype.setMessageSetExtension = function(value) {
  return jspb.Message.setWrapperField(this, 41401449, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.MessageSet} returns this
 */
proto.lens.MessageSet.prototype.clearMessageSetExtension = function() {
  return this.setMessageSetExtension(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.MessageSet.prototype.hasMessageSetExtension = function() {
  return jspb.Message.getField(this, 41401449) != null;
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_overlay_object.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_geometry_pb = require('./lens_overlay_geometry_pb.cjs');
goog.object.extend(proto, lens_overlay_geometry_pb);
goog.exportSymbol('proto.lens.OverlayObject', null, global);
goog.exportSymbol('proto.lens.OverlayObject.InteractionProperties', null, global);
goog.exportSymbol('proto.lens.OverlayObject.RenderingMetadata', null, global);
goog.exportSymbol('proto.lens.OverlayObject.RenderingMetadata.RenderType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.OverlayObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.OverlayObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.OverlayObject.displayName = 'proto.lens.OverlayObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.OverlayObject.RenderingMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.OverlayObject.RenderingMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.OverlayObject.RenderingMetadata.displayName = 'proto.lens.OverlayObject.RenderingMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.OverlayObject.InteractionProperties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.OverlayObject.InteractionProperties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.OverlayObject.InteractionProperties.displayName = 'proto.lens.OverlayObject.InteractionProperties';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.OverlayObject.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.OverlayObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.OverlayObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.OverlayObject.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
geometry: (f = msg.getGeometry()) && lens_overlay_geometry_pb.Geometry.toObject(includeInstance, f),
renderingMetadata: (f = msg.getRenderingMetadata()) && proto.lens.OverlayObject.RenderingMetadata.toObject(includeInstance, f),
interactionProperties: (f = msg.getInteractionProperties()) && proto.lens.OverlayObject.InteractionProperties.toObject(includeInstance, f),
isFulfilled: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.OverlayObject}
 */
proto.lens.OverlayObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.OverlayObject;
  return proto.lens.OverlayObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.OverlayObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.OverlayObject}
 */
proto.lens.OverlayObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new lens_overlay_geometry_pb.Geometry;
      reader.readMessage(value,lens_overlay_geometry_pb.Geometry.deserializeBinaryFromReader);
      msg.setGeometry(value);
      break;
    case 8:
      var value = new proto.lens.OverlayObject.RenderingMetadata;
      reader.readMessage(value,proto.lens.OverlayObject.RenderingMetadata.deserializeBinaryFromReader);
      msg.setRenderingMetadata(value);
      break;
    case 4:
      var value = new proto.lens.OverlayObject.InteractionProperties;
      reader.readMessage(value,proto.lens.OverlayObject.InteractionProperties.deserializeBinaryFromReader);
      msg.setInteractionProperties(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFulfilled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.OverlayObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.OverlayObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.OverlayObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.OverlayObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGeometry();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      lens_overlay_geometry_pb.Geometry.serializeBinaryToWriter
    );
  }
  f = message.getRenderingMetadata();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.lens.OverlayObject.RenderingMetadata.serializeBinaryToWriter
    );
  }
  f = message.getInteractionProperties();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.lens.OverlayObject.InteractionProperties.serializeBinaryToWriter
    );
  }
  f = message.getIsFulfilled();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.OverlayObject.RenderingMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.OverlayObject.RenderingMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.OverlayObject.RenderingMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.OverlayObject.RenderingMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
renderType: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.OverlayObject.RenderingMetadata}
 */
proto.lens.OverlayObject.RenderingMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.OverlayObject.RenderingMetadata;
  return proto.lens.OverlayObject.RenderingMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.OverlayObject.RenderingMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.OverlayObject.RenderingMetadata}
 */
proto.lens.OverlayObject.RenderingMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lens.OverlayObject.RenderingMetadata.RenderType} */ (reader.readEnum());
      msg.setRenderType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.OverlayObject.RenderingMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.OverlayObject.RenderingMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.OverlayObject.RenderingMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.OverlayObject.RenderingMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRenderType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.lens.OverlayObject.RenderingMetadata.RenderType = {
  DEFAULT: 0,
  GLEAM: 1
};

/**
 * optional RenderType render_type = 1;
 * @return {!proto.lens.OverlayObject.RenderingMetadata.RenderType}
 */
proto.lens.OverlayObject.RenderingMetadata.prototype.getRenderType = function() {
  return /** @type {!proto.lens.OverlayObject.RenderingMetadata.RenderType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lens.OverlayObject.RenderingMetadata.RenderType} value
 * @return {!proto.lens.OverlayObject.RenderingMetadata} returns this
 */
proto.lens.OverlayObject.RenderingMetadata.prototype.setRenderType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.OverlayObject.InteractionProperties.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.OverlayObject.InteractionProperties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.OverlayObject.InteractionProperties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.OverlayObject.InteractionProperties.toObject = function(includeInstance, msg) {
  var f, obj = {
selectOnTap: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.OverlayObject.InteractionProperties}
 */
proto.lens.OverlayObject.InteractionProperties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.OverlayObject.InteractionProperties;
  return proto.lens.OverlayObject.InteractionProperties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.OverlayObject.InteractionProperties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.OverlayObject.InteractionProperties}
 */
proto.lens.OverlayObject.InteractionProperties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSelectOnTap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.OverlayObject.InteractionProperties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.OverlayObject.InteractionProperties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.OverlayObject.InteractionProperties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.OverlayObject.InteractionProperties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelectOnTap();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool select_on_tap = 1;
 * @return {boolean}
 */
proto.lens.OverlayObject.InteractionProperties.prototype.getSelectOnTap = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lens.OverlayObject.InteractionProperties} returns this
 */
proto.lens.OverlayObject.InteractionProperties.prototype.setSelectOnTap = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.lens.OverlayObject.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.OverlayObject} returns this
 */
proto.lens.OverlayObject.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Geometry geometry = 2;
 * @return {?proto.lens.Geometry}
 */
proto.lens.OverlayObject.prototype.getGeometry = function() {
  return /** @type{?proto.lens.Geometry} */ (
    jspb.Message.getWrapperField(this, lens_overlay_geometry_pb.Geometry, 2));
};


/**
 * @param {?proto.lens.Geometry|undefined} value
 * @return {!proto.lens.OverlayObject} returns this
*/
proto.lens.OverlayObject.prototype.setGeometry = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.OverlayObject} returns this
 */
proto.lens.OverlayObject.prototype.clearGeometry = function() {
  return this.setGeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.OverlayObject.prototype.hasGeometry = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RenderingMetadata rendering_metadata = 8;
 * @return {?proto.lens.OverlayObject.RenderingMetadata}
 */
proto.lens.OverlayObject.prototype.getRenderingMetadata = function() {
  return /** @type{?proto.lens.OverlayObject.RenderingMetadata} */ (
    jspb.Message.getWrapperField(this, proto.lens.OverlayObject.RenderingMetadata, 8));
};


/**
 * @param {?proto.lens.OverlayObject.RenderingMetadata|undefined} value
 * @return {!proto.lens.OverlayObject} returns this
*/
proto.lens.OverlayObject.prototype.setRenderingMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.OverlayObject} returns this
 */
proto.lens.OverlayObject.prototype.clearRenderingMetadata = function() {
  return this.setRenderingMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.OverlayObject.prototype.hasRenderingMetadata = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional InteractionProperties interaction_properties = 4;
 * @return {?proto.lens.OverlayObject.InteractionProperties}
 */
proto.lens.OverlayObject.prototype.getInteractionProperties = function() {
  return /** @type{?proto.lens.OverlayObject.InteractionProperties} */ (
    jspb.Message.getWrapperField(this, proto.lens.OverlayObject.InteractionProperties, 4));
};


/**
 * @param {?proto.lens.OverlayObject.InteractionProperties|undefined} value
 * @return {!proto.lens.OverlayObject} returns this
*/
proto.lens.OverlayObject.prototype.setInteractionProperties = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.OverlayObject} returns this
 */
proto.lens.OverlayObject.prototype.clearInteractionProperties = function() {
  return this.setInteractionProperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.OverlayObject.prototype.hasInteractionProperties = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool is_fulfilled = 9;
 * @return {boolean}
 */
proto.lens.OverlayObject.prototype.getIsFulfilled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lens.OverlayObject} returns this
 */
proto.lens.OverlayObject.prototype.setIsFulfilled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_payload.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.lens.ClientImage', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.ClientImage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.ClientImage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.ClientImage.displayName = 'proto.lens.ClientImage';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.ClientImage.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.ClientImage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.ClientImage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ClientImage.toObject = function(includeInstance, msg) {
  var f, obj = {
imageContent: msg.getImageContent_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.ClientImage}
 */
proto.lens.ClientImage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.ClientImage;
  return proto.lens.ClientImage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.ClientImage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.ClientImage}
 */
proto.lens.ClientImage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImageContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.ClientImage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.ClientImage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.ClientImage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ClientImage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImageContent_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes image_content = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lens.ClientImage.prototype.getImageContent = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes image_content = 1;
 * This is a type-conversion wrapper around `getImageContent()`
 * @return {string}
 */
proto.lens.ClientImage.prototype.getImageContent_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImageContent()));
};


/**
 * optional bytes image_content = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImageContent()`
 * @return {!Uint8Array}
 */
proto.lens.ClientImage.prototype.getImageContent_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImageContent()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lens.ClientImage} returns this
 */
proto.lens.ClientImage.prototype.setImageContent = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_phase_latencies_metadata.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.lens.LensOverlayPhaseLatenciesMetadata', null, global);
goog.exportSymbol('proto.lens.LensOverlayPhaseLatenciesMetadata.ImageType', null, global);
goog.exportSymbol('proto.lens.LensOverlayPhaseLatenciesMetadata.Phase', null, global);
goog.exportSymbol('proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData', null, global);
goog.exportSymbol('proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData', null, global);
goog.exportSymbol('proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.PhaseDataCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayPhaseLatenciesMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.LensOverlayPhaseLatenciesMetadata.repeatedFields_, null);
};
goog.inherits(proto.lens.LensOverlayPhaseLatenciesMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayPhaseLatenciesMetadata.displayName = 'proto.lens.LensOverlayPhaseLatenciesMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.oneofGroups_);
};
goog.inherits(proto.lens.LensOverlayPhaseLatenciesMetadata.Phase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.displayName = 'proto.lens.LensOverlayPhaseLatenciesMetadata.Phase';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.displayName = 'proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.displayName = 'proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayPhaseLatenciesMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
phaseList: jspb.Message.toObjectList(msg.getPhaseList(),
    proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayPhaseLatenciesMetadata;
  return proto.lens.LensOverlayPhaseLatenciesMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.LensOverlayPhaseLatenciesMetadata.Phase;
      reader.readMessage(value,proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.deserializeBinaryFromReader);
      msg.addPhase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayPhaseLatenciesMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhaseList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.ImageType = {
  UNKNOWN: 0,
  JPEG: 1,
  PNG: 2,
  WEBP: 3
};


/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.PhaseDataCase = {
  PHASE_DATA_NOT_SET: 0,
  IMAGE_DOWNSCALE_DATA: 3,
  IMAGE_ENCODE_DATA: 4
};

/**
 * @return {proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.PhaseDataCase}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.prototype.getPhaseDataCase = function() {
  return /** @type {proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.PhaseDataCase} */(jspb.Message.computeOneofCase(this, proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.toObject = function(includeInstance, msg) {
  var f, obj = {
imageDownscaleData: (f = msg.getImageDownscaleData()) && proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.toObject(includeInstance, f),
imageEncodeData: (f = msg.getImageEncodeData()) && proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayPhaseLatenciesMetadata.Phase;
  return proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData;
      reader.readMessage(value,proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.deserializeBinaryFromReader);
      msg.setImageDownscaleData(value);
      break;
    case 4:
      var value = new proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData;
      reader.readMessage(value,proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.deserializeBinaryFromReader);
      msg.setImageEncodeData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImageDownscaleData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.serializeBinaryToWriter
    );
  }
  f = message.getImageEncodeData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.toObject = function(includeInstance, msg) {
  var f, obj = {
originalImageSize: jspb.Message.getFieldWithDefault(msg, 1, 0),
downscaledImageSize: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData;
  return proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOriginalImageSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDownscaledImageSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOriginalImageSize();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getDownscaledImageSize();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 original_image_size = 1;
 * @return {number}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.prototype.getOriginalImageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData} returns this
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.prototype.setOriginalImageSize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 downscaled_image_size = 2;
 * @return {number}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.prototype.getDownscaledImageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData} returns this
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.prototype.setDownscaledImageSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.toObject = function(includeInstance, msg) {
  var f, obj = {
originalImageType: jspb.Message.getFieldWithDefault(msg, 1, 0),
encodedImageSizeBytes: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData;
  return proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lens.LensOverlayPhaseLatenciesMetadata.ImageType} */ (reader.readEnum());
      msg.setOriginalImageType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEncodedImageSizeBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOriginalImageType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEncodedImageSizeBytes();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional ImageType original_image_type = 1;
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.ImageType}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.prototype.getOriginalImageType = function() {
  return /** @type {!proto.lens.LensOverlayPhaseLatenciesMetadata.ImageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata.ImageType} value
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData} returns this
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.prototype.setOriginalImageType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 encoded_image_size_bytes = 2;
 * @return {number}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.prototype.getEncodedImageSizeBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData} returns this
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.prototype.setEncodedImageSizeBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ImageDownscaleData image_downscale_data = 3;
 * @return {?proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.prototype.getImageDownscaleData = function() {
  return /** @type{?proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData} */ (
    jspb.Message.getWrapperField(this, proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData, 3));
};


/**
 * @param {?proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData|undefined} value
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase} returns this
*/
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.prototype.setImageDownscaleData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase} returns this
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.prototype.clearImageDownscaleData = function() {
  return this.setImageDownscaleData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.prototype.hasImageDownscaleData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ImageEncodeData image_encode_data = 4;
 * @return {?proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.prototype.getImageEncodeData = function() {
  return /** @type{?proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData} */ (
    jspb.Message.getWrapperField(this, proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData, 4));
};


/**
 * @param {?proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData|undefined} value
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase} returns this
*/
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.prototype.setImageEncodeData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase} returns this
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.prototype.clearImageEncodeData = function() {
  return this.setImageEncodeData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.prototype.hasImageEncodeData = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Phase phase = 1;
 * @return {!Array<!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase>}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.prototype.getPhaseList = function() {
  return /** @type{!Array<!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lens.LensOverlayPhaseLatenciesMetadata.Phase, 1));
};


/**
 * @param {!Array<!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase>} value
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata} returns this
*/
proto.lens.LensOverlayPhaseLatenciesMetadata.prototype.setPhaseList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.prototype.addPhase = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.lens.LensOverlayPhaseLatenciesMetadata.Phase, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata} returns this
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.prototype.clearPhaseList = function() {
  return this.setPhaseList([]);
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_platform.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.lens.Platform', null, global);
/**
 * @enum {number}
 */
proto.lens.Platform = {
  PLATFORM_UNSPECIFIED: 0,
  PLATFORM_WEB: 3,
  PLATFORM_LENS_OVERLAY: 6
};

goog.object.extend(exports, proto.lens);
// source: lens_overlay_polygon.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.lens.CoordinateType', null, global);
goog.exportSymbol('proto.lens.Polygon', null, global);
goog.exportSymbol('proto.lens.Polygon.Vertex', null, global);
goog.exportSymbol('proto.lens.Polygon.VertexOrdering', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.Polygon = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.Polygon.repeatedFields_, null);
};
goog.inherits(proto.lens.Polygon, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.Polygon.displayName = 'proto.lens.Polygon';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.Polygon.Vertex = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.Polygon.Vertex, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.Polygon.Vertex.displayName = 'proto.lens.Polygon.Vertex';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.Polygon.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.Polygon.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.Polygon.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.Polygon} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Polygon.toObject = function(includeInstance, msg) {
  var f, obj = {
vertexList: jspb.Message.toObjectList(msg.getVertexList(),
    proto.lens.Polygon.Vertex.toObject, includeInstance),
vertexOrdering: jspb.Message.getFieldWithDefault(msg, 2, 0),
coordinateType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.Polygon}
 */
proto.lens.Polygon.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.Polygon;
  return proto.lens.Polygon.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.Polygon} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.Polygon}
 */
proto.lens.Polygon.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.Polygon.Vertex;
      reader.readMessage(value,proto.lens.Polygon.Vertex.deserializeBinaryFromReader);
      msg.addVertex(value);
      break;
    case 2:
      var value = /** @type {!proto.lens.Polygon.VertexOrdering} */ (reader.readEnum());
      msg.setVertexOrdering(value);
      break;
    case 3:
      var value = /** @type {!proto.lens.CoordinateType} */ (reader.readEnum());
      msg.setCoordinateType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.Polygon.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.Polygon.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.Polygon} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Polygon.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVertexList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.lens.Polygon.Vertex.serializeBinaryToWriter
    );
  }
  f = message.getVertexOrdering();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getCoordinateType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.lens.Polygon.VertexOrdering = {
  VERTEX_ORDERING_UNSPECIFIED: 0,
  CLOCKWISE: 1,
  COUNTER_CLOCKWISE: 2
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.Polygon.Vertex.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.Polygon.Vertex.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.Polygon.Vertex} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Polygon.Vertex.toObject = function(includeInstance, msg) {
  var f, obj = {
x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.Polygon.Vertex}
 */
proto.lens.Polygon.Vertex.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.Polygon.Vertex;
  return proto.lens.Polygon.Vertex.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.Polygon.Vertex} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.Polygon.Vertex}
 */
proto.lens.Polygon.Vertex.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.Polygon.Vertex.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.Polygon.Vertex.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.Polygon.Vertex} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Polygon.Vertex.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.lens.Polygon.Vertex.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.lens.Polygon.Vertex} returns this
 */
proto.lens.Polygon.Vertex.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.lens.Polygon.Vertex.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.lens.Polygon.Vertex} returns this
 */
proto.lens.Polygon.Vertex.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * repeated Vertex vertex = 1;
 * @return {!Array<!proto.lens.Polygon.Vertex>}
 */
proto.lens.Polygon.prototype.getVertexList = function() {
  return /** @type{!Array<!proto.lens.Polygon.Vertex>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lens.Polygon.Vertex, 1));
};


/**
 * @param {!Array<!proto.lens.Polygon.Vertex>} value
 * @return {!proto.lens.Polygon} returns this
*/
proto.lens.Polygon.prototype.setVertexList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.lens.Polygon.Vertex=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.Polygon.Vertex}
 */
proto.lens.Polygon.prototype.addVertex = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.lens.Polygon.Vertex, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.Polygon} returns this
 */
proto.lens.Polygon.prototype.clearVertexList = function() {
  return this.setVertexList([]);
};


/**
 * optional VertexOrdering vertex_ordering = 2;
 * @return {!proto.lens.Polygon.VertexOrdering}
 */
proto.lens.Polygon.prototype.getVertexOrdering = function() {
  return /** @type {!proto.lens.Polygon.VertexOrdering} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.lens.Polygon.VertexOrdering} value
 * @return {!proto.lens.Polygon} returns this
 */
proto.lens.Polygon.prototype.setVertexOrdering = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional CoordinateType coordinate_type = 3;
 * @return {!proto.lens.CoordinateType}
 */
proto.lens.Polygon.prototype.getCoordinateType = function() {
  return /** @type {!proto.lens.CoordinateType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.lens.CoordinateType} value
 * @return {!proto.lens.Polygon} returns this
 */
proto.lens.Polygon.prototype.setCoordinateType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.lens.CoordinateType = {
  COORDINATE_TYPE_UNSPECIFIED: 0,
  NORMALIZED: 1,
  IMAGE: 2
};

goog.object.extend(exports, proto.lens);
// source: lens_overlay_request_id.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_routing_info_pb = require('./lens_overlay_routing_info_pb.cjs');
goog.object.extend(proto, lens_overlay_routing_info_pb);
goog.exportSymbol('proto.lens.LensOverlayRequestId', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayRequestId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayRequestId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayRequestId.displayName = 'proto.lens.LensOverlayRequestId';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayRequestId.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayRequestId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayRequestId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayRequestId.toObject = function(includeInstance, msg) {
  var f, obj = {
uuid: jspb.Message.getFieldWithDefault(msg, 1, 0),
sequenceId: jspb.Message.getFieldWithDefault(msg, 2, 0),
imageSequenceId: jspb.Message.getFieldWithDefault(msg, 3, 0),
analyticsId: msg.getAnalyticsId_asB64(),
longContextId: jspb.Message.getFieldWithDefault(msg, 9, 0),
routingInfo: (f = msg.getRoutingInfo()) && lens_overlay_routing_info_pb.LensOverlayRoutingInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayRequestId}
 */
proto.lens.LensOverlayRequestId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayRequestId;
  return proto.lens.LensOverlayRequestId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayRequestId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayRequestId}
 */
proto.lens.LensOverlayRequestId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUuid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequenceId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setImageSequenceId(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAnalyticsId(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLongContextId(value);
      break;
    case 6:
      var value = new lens_overlay_routing_info_pb.LensOverlayRoutingInfo;
      reader.readMessage(value,lens_overlay_routing_info_pb.LensOverlayRoutingInfo.deserializeBinaryFromReader);
      msg.setRoutingInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayRequestId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayRequestId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayRequestId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayRequestId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUuid();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getSequenceId();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getImageSequenceId();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getAnalyticsId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getLongContextId();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getRoutingInfo();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      lens_overlay_routing_info_pb.LensOverlayRoutingInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 uuid = 1;
 * @return {number}
 */
proto.lens.LensOverlayRequestId.prototype.getUuid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.LensOverlayRequestId} returns this
 */
proto.lens.LensOverlayRequestId.prototype.setUuid = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 sequence_id = 2;
 * @return {number}
 */
proto.lens.LensOverlayRequestId.prototype.getSequenceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.LensOverlayRequestId} returns this
 */
proto.lens.LensOverlayRequestId.prototype.setSequenceId = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 image_sequence_id = 3;
 * @return {number}
 */
proto.lens.LensOverlayRequestId.prototype.getImageSequenceId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.LensOverlayRequestId} returns this
 */
proto.lens.LensOverlayRequestId.prototype.setImageSequenceId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes analytics_id = 4;
 * @return {!(string|Uint8Array)}
 */
proto.lens.LensOverlayRequestId.prototype.getAnalyticsId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes analytics_id = 4;
 * This is a type-conversion wrapper around `getAnalyticsId()`
 * @return {string}
 */
proto.lens.LensOverlayRequestId.prototype.getAnalyticsId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAnalyticsId()));
};


/**
 * optional bytes analytics_id = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAnalyticsId()`
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayRequestId.prototype.getAnalyticsId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAnalyticsId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lens.LensOverlayRequestId} returns this
 */
proto.lens.LensOverlayRequestId.prototype.setAnalyticsId = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional int32 long_context_id = 9;
 * @return {number}
 */
proto.lens.LensOverlayRequestId.prototype.getLongContextId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.LensOverlayRequestId} returns this
 */
proto.lens.LensOverlayRequestId.prototype.setLongContextId = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional LensOverlayRoutingInfo routing_info = 6;
 * @return {?proto.lens.LensOverlayRoutingInfo}
 */
proto.lens.LensOverlayRequestId.prototype.getRoutingInfo = function() {
  return /** @type{?proto.lens.LensOverlayRoutingInfo} */ (
    jspb.Message.getWrapperField(this, lens_overlay_routing_info_pb.LensOverlayRoutingInfo, 6));
};


/**
 * @param {?proto.lens.LensOverlayRoutingInfo|undefined} value
 * @return {!proto.lens.LensOverlayRequestId} returns this
*/
proto.lens.LensOverlayRequestId.prototype.setRoutingInfo = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayRequestId} returns this
 */
proto.lens.LensOverlayRequestId.prototype.clearRoutingInfo = function() {
  return this.setRoutingInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayRequestId.prototype.hasRoutingInfo = function() {
  return jspb.Message.getField(this, 6) != null;
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_request_type.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.lens.RequestType', null, global);
/**
 * @enum {number}
 */
proto.lens.RequestType = {
  REQUEST_TYPE_DEFAULT: 0,
  REQUEST_TYPE_PDF: 1,
  REQUEST_TYPE_EARLY_PARTIAL_PDF: 3,
  REQUEST_TYPE_WEBPAGE: 2
};

goog.object.extend(exports, proto.lens);
// source: lens_overlay_routing_info.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.lens.LensOverlayRoutingInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayRoutingInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayRoutingInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayRoutingInfo.displayName = 'proto.lens.LensOverlayRoutingInfo';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayRoutingInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayRoutingInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayRoutingInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayRoutingInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
serverAddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
cellAddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
bladeTarget: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayRoutingInfo}
 */
proto.lens.LensOverlayRoutingInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayRoutingInfo;
  return proto.lens.LensOverlayRoutingInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayRoutingInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayRoutingInfo}
 */
proto.lens.LensOverlayRoutingInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerAddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCellAddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBladeTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayRoutingInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayRoutingInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayRoutingInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayRoutingInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCellAddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBladeTarget();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string server_address = 1;
 * @return {string}
 */
proto.lens.LensOverlayRoutingInfo.prototype.getServerAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.LensOverlayRoutingInfo} returns this
 */
proto.lens.LensOverlayRoutingInfo.prototype.setServerAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cell_address = 3;
 * @return {string}
 */
proto.lens.LensOverlayRoutingInfo.prototype.getCellAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.LensOverlayRoutingInfo} returns this
 */
proto.lens.LensOverlayRoutingInfo.prototype.setCellAddress = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string blade_target = 2;
 * @return {string}
 */
proto.lens.LensOverlayRoutingInfo.prototype.getBladeTarget = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.LensOverlayRoutingInfo} returns this
 */
proto.lens.LensOverlayRoutingInfo.prototype.setBladeTarget = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_selection_type.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.lens.LensOverlaySelectionType', null, global);
/**
 * @enum {number}
 */
proto.lens.LensOverlaySelectionType = {
  UNKNOWN_SELECTION_TYPE: 0,
  TAP_ON_EMPTY: 1,
  SELECT_TEXT_HIGHLIGHT: 3,
  REGION_SEARCH: 7,
  INJECTED_IMAGE: 10,
  TAP_ON_REGION_GLEAM: 15,
  MULTIMODAL_SEARCH: 18,
  SELECT_TRANSLATED_TEXT: 21,
  TAP_ON_OBJECT: 22,
  MULTIMODAL_SUGGEST_TYPEAHEAD: 25,
  MULTIMODAL_SUGGEST_ZERO_PREFIX: 26,
  TRANSLATE_CHIP: 52,
  SYMBOLIC_MATH_OBJECT: 53
};

goog.object.extend(exports, proto.lens);
// source: lens_overlay_server.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_client_logs_pb = require('./lens_overlay_client_logs_pb.cjs');
goog.object.extend(proto, lens_overlay_client_logs_pb);
var lens_overlay_routing_info_pb = require('./lens_overlay_routing_info_pb.cjs');
goog.object.extend(proto, lens_overlay_routing_info_pb);
var lens_overlay_service_deps_pb = require('./lens_overlay_service_deps_pb.cjs');
goog.object.extend(proto, lens_overlay_service_deps_pb);
goog.exportSymbol('proto.lens.LensOverlayServerClusterInfoRequest', null, global);
goog.exportSymbol('proto.lens.LensOverlayServerClusterInfoResponse', null, global);
goog.exportSymbol('proto.lens.LensOverlayServerError', null, global);
goog.exportSymbol('proto.lens.LensOverlayServerError.ErrorType', null, global);
goog.exportSymbol('proto.lens.LensOverlayServerRequest', null, global);
goog.exportSymbol('proto.lens.LensOverlayServerResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayServerClusterInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayServerClusterInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayServerClusterInfoRequest.displayName = 'proto.lens.LensOverlayServerClusterInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayServerClusterInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayServerClusterInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayServerClusterInfoResponse.displayName = 'proto.lens.LensOverlayServerClusterInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayServerError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayServerError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayServerError.displayName = 'proto.lens.LensOverlayServerError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayServerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayServerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayServerRequest.displayName = 'proto.lens.LensOverlayServerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayServerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayServerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayServerResponse.displayName = 'proto.lens.LensOverlayServerResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayServerClusterInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayServerClusterInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayServerClusterInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayServerClusterInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
enableSearchSessionId: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayServerClusterInfoRequest}
 */
proto.lens.LensOverlayServerClusterInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayServerClusterInfoRequest;
  return proto.lens.LensOverlayServerClusterInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayServerClusterInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayServerClusterInfoRequest}
 */
proto.lens.LensOverlayServerClusterInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableSearchSessionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayServerClusterInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayServerClusterInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayServerClusterInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayServerClusterInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnableSearchSessionId();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enable_search_session_id = 1;
 * @return {boolean}
 */
proto.lens.LensOverlayServerClusterInfoRequest.prototype.getEnableSearchSessionId = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lens.LensOverlayServerClusterInfoRequest} returns this
 */
proto.lens.LensOverlayServerClusterInfoRequest.prototype.setEnableSearchSessionId = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayServerClusterInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayServerClusterInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayServerClusterInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayServerClusterInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
serverSessionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
searchSessionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
routingInfo: (f = msg.getRoutingInfo()) && lens_overlay_routing_info_pb.LensOverlayRoutingInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayServerClusterInfoResponse}
 */
proto.lens.LensOverlayServerClusterInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayServerClusterInfoResponse;
  return proto.lens.LensOverlayServerClusterInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayServerClusterInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayServerClusterInfoResponse}
 */
proto.lens.LensOverlayServerClusterInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerSessionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearchSessionId(value);
      break;
    case 3:
      var value = new lens_overlay_routing_info_pb.LensOverlayRoutingInfo;
      reader.readMessage(value,lens_overlay_routing_info_pb.LensOverlayRoutingInfo.deserializeBinaryFromReader);
      msg.setRoutingInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayServerClusterInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayServerClusterInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayServerClusterInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayServerClusterInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSearchSessionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRoutingInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      lens_overlay_routing_info_pb.LensOverlayRoutingInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string server_session_id = 1;
 * @return {string}
 */
proto.lens.LensOverlayServerClusterInfoResponse.prototype.getServerSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.LensOverlayServerClusterInfoResponse} returns this
 */
proto.lens.LensOverlayServerClusterInfoResponse.prototype.setServerSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string search_session_id = 2;
 * @return {string}
 */
proto.lens.LensOverlayServerClusterInfoResponse.prototype.getSearchSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.LensOverlayServerClusterInfoResponse} returns this
 */
proto.lens.LensOverlayServerClusterInfoResponse.prototype.setSearchSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional LensOverlayRoutingInfo routing_info = 3;
 * @return {?proto.lens.LensOverlayRoutingInfo}
 */
proto.lens.LensOverlayServerClusterInfoResponse.prototype.getRoutingInfo = function() {
  return /** @type{?proto.lens.LensOverlayRoutingInfo} */ (
    jspb.Message.getWrapperField(this, lens_overlay_routing_info_pb.LensOverlayRoutingInfo, 3));
};


/**
 * @param {?proto.lens.LensOverlayRoutingInfo|undefined} value
 * @return {!proto.lens.LensOverlayServerClusterInfoResponse} returns this
*/
proto.lens.LensOverlayServerClusterInfoResponse.prototype.setRoutingInfo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayServerClusterInfoResponse} returns this
 */
proto.lens.LensOverlayServerClusterInfoResponse.prototype.clearRoutingInfo = function() {
  return this.setRoutingInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayServerClusterInfoResponse.prototype.hasRoutingInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayServerError.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayServerError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayServerError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayServerError.toObject = function(includeInstance, msg) {
  var f, obj = {
errorType: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayServerError}
 */
proto.lens.LensOverlayServerError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayServerError;
  return proto.lens.LensOverlayServerError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayServerError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayServerError}
 */
proto.lens.LensOverlayServerError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lens.LensOverlayServerError.ErrorType} */ (reader.readEnum());
      msg.setErrorType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayServerError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayServerError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayServerError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayServerError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.lens.LensOverlayServerError.ErrorType = {
  UNKNOWN_TYPE: 0,
  MISSING_REQUEST: 1
};

/**
 * optional ErrorType error_type = 1;
 * @return {!proto.lens.LensOverlayServerError.ErrorType}
 */
proto.lens.LensOverlayServerError.prototype.getErrorType = function() {
  return /** @type {!proto.lens.LensOverlayServerError.ErrorType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lens.LensOverlayServerError.ErrorType} value
 * @return {!proto.lens.LensOverlayServerError} returns this
 */
proto.lens.LensOverlayServerError.prototype.setErrorType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayServerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayServerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayServerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayServerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
objectsRequest: (f = msg.getObjectsRequest()) && lens_overlay_service_deps_pb.LensOverlayObjectsRequest.toObject(includeInstance, f),
interactionRequest: (f = msg.getInteractionRequest()) && lens_overlay_service_deps_pb.LensOverlayInteractionRequest.toObject(includeInstance, f),
clientLogs: (f = msg.getClientLogs()) && lens_overlay_client_logs_pb.LensOverlayClientLogs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayServerRequest}
 */
proto.lens.LensOverlayServerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayServerRequest;
  return proto.lens.LensOverlayServerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayServerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayServerRequest}
 */
proto.lens.LensOverlayServerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new lens_overlay_service_deps_pb.LensOverlayObjectsRequest;
      reader.readMessage(value,lens_overlay_service_deps_pb.LensOverlayObjectsRequest.deserializeBinaryFromReader);
      msg.setObjectsRequest(value);
      break;
    case 2:
      var value = new lens_overlay_service_deps_pb.LensOverlayInteractionRequest;
      reader.readMessage(value,lens_overlay_service_deps_pb.LensOverlayInteractionRequest.deserializeBinaryFromReader);
      msg.setInteractionRequest(value);
      break;
    case 3:
      var value = new lens_overlay_client_logs_pb.LensOverlayClientLogs;
      reader.readMessage(value,lens_overlay_client_logs_pb.LensOverlayClientLogs.deserializeBinaryFromReader);
      msg.setClientLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayServerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayServerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayServerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayServerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectsRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      lens_overlay_service_deps_pb.LensOverlayObjectsRequest.serializeBinaryToWriter
    );
  }
  f = message.getInteractionRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      lens_overlay_service_deps_pb.LensOverlayInteractionRequest.serializeBinaryToWriter
    );
  }
  f = message.getClientLogs();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      lens_overlay_client_logs_pb.LensOverlayClientLogs.serializeBinaryToWriter
    );
  }
};


/**
 * optional LensOverlayObjectsRequest objects_request = 1;
 * @return {?proto.lens.LensOverlayObjectsRequest}
 */
proto.lens.LensOverlayServerRequest.prototype.getObjectsRequest = function() {
  return /** @type{?proto.lens.LensOverlayObjectsRequest} */ (
    jspb.Message.getWrapperField(this, lens_overlay_service_deps_pb.LensOverlayObjectsRequest, 1));
};


/**
 * @param {?proto.lens.LensOverlayObjectsRequest|undefined} value
 * @return {!proto.lens.LensOverlayServerRequest} returns this
*/
proto.lens.LensOverlayServerRequest.prototype.setObjectsRequest = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayServerRequest} returns this
 */
proto.lens.LensOverlayServerRequest.prototype.clearObjectsRequest = function() {
  return this.setObjectsRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayServerRequest.prototype.hasObjectsRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LensOverlayInteractionRequest interaction_request = 2;
 * @return {?proto.lens.LensOverlayInteractionRequest}
 */
proto.lens.LensOverlayServerRequest.prototype.getInteractionRequest = function() {
  return /** @type{?proto.lens.LensOverlayInteractionRequest} */ (
    jspb.Message.getWrapperField(this, lens_overlay_service_deps_pb.LensOverlayInteractionRequest, 2));
};


/**
 * @param {?proto.lens.LensOverlayInteractionRequest|undefined} value
 * @return {!proto.lens.LensOverlayServerRequest} returns this
*/
proto.lens.LensOverlayServerRequest.prototype.setInteractionRequest = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayServerRequest} returns this
 */
proto.lens.LensOverlayServerRequest.prototype.clearInteractionRequest = function() {
  return this.setInteractionRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayServerRequest.prototype.hasInteractionRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LensOverlayClientLogs client_logs = 3;
 * @return {?proto.lens.LensOverlayClientLogs}
 */
proto.lens.LensOverlayServerRequest.prototype.getClientLogs = function() {
  return /** @type{?proto.lens.LensOverlayClientLogs} */ (
    jspb.Message.getWrapperField(this, lens_overlay_client_logs_pb.LensOverlayClientLogs, 3));
};


/**
 * @param {?proto.lens.LensOverlayClientLogs|undefined} value
 * @return {!proto.lens.LensOverlayServerRequest} returns this
*/
proto.lens.LensOverlayServerRequest.prototype.setClientLogs = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayServerRequest} returns this
 */
proto.lens.LensOverlayServerRequest.prototype.clearClientLogs = function() {
  return this.setClientLogs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayServerRequest.prototype.hasClientLogs = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayServerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayServerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayServerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayServerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
error: (f = msg.getError()) && proto.lens.LensOverlayServerError.toObject(includeInstance, f),
objectsResponse: (f = msg.getObjectsResponse()) && lens_overlay_service_deps_pb.LensOverlayObjectsResponse.toObject(includeInstance, f),
interactionResponse: (f = msg.getInteractionResponse()) && lens_overlay_service_deps_pb.LensOverlayInteractionResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayServerResponse}
 */
proto.lens.LensOverlayServerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayServerResponse;
  return proto.lens.LensOverlayServerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayServerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayServerResponse}
 */
proto.lens.LensOverlayServerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.LensOverlayServerError;
      reader.readMessage(value,proto.lens.LensOverlayServerError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new lens_overlay_service_deps_pb.LensOverlayObjectsResponse;
      reader.readMessage(value,lens_overlay_service_deps_pb.LensOverlayObjectsResponse.deserializeBinaryFromReader);
      msg.setObjectsResponse(value);
      break;
    case 3:
      var value = new lens_overlay_service_deps_pb.LensOverlayInteractionResponse;
      reader.readMessage(value,lens_overlay_service_deps_pb.LensOverlayInteractionResponse.deserializeBinaryFromReader);
      msg.setInteractionResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayServerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayServerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayServerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayServerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.LensOverlayServerError.serializeBinaryToWriter
    );
  }
  f = message.getObjectsResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      lens_overlay_service_deps_pb.LensOverlayObjectsResponse.serializeBinaryToWriter
    );
  }
  f = message.getInteractionResponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      lens_overlay_service_deps_pb.LensOverlayInteractionResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional LensOverlayServerError error = 1;
 * @return {?proto.lens.LensOverlayServerError}
 */
proto.lens.LensOverlayServerResponse.prototype.getError = function() {
  return /** @type{?proto.lens.LensOverlayServerError} */ (
    jspb.Message.getWrapperField(this, proto.lens.LensOverlayServerError, 1));
};


/**
 * @param {?proto.lens.LensOverlayServerError|undefined} value
 * @return {!proto.lens.LensOverlayServerResponse} returns this
*/
proto.lens.LensOverlayServerResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayServerResponse} returns this
 */
proto.lens.LensOverlayServerResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayServerResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LensOverlayObjectsResponse objects_response = 2;
 * @return {?proto.lens.LensOverlayObjectsResponse}
 */
proto.lens.LensOverlayServerResponse.prototype.getObjectsResponse = function() {
  return /** @type{?proto.lens.LensOverlayObjectsResponse} */ (
    jspb.Message.getWrapperField(this, lens_overlay_service_deps_pb.LensOverlayObjectsResponse, 2));
};


/**
 * @param {?proto.lens.LensOverlayObjectsResponse|undefined} value
 * @return {!proto.lens.LensOverlayServerResponse} returns this
*/
proto.lens.LensOverlayServerResponse.prototype.setObjectsResponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayServerResponse} returns this
 */
proto.lens.LensOverlayServerResponse.prototype.clearObjectsResponse = function() {
  return this.setObjectsResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayServerResponse.prototype.hasObjectsResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LensOverlayInteractionResponse interaction_response = 3;
 * @return {?proto.lens.LensOverlayInteractionResponse}
 */
proto.lens.LensOverlayServerResponse.prototype.getInteractionResponse = function() {
  return /** @type{?proto.lens.LensOverlayInteractionResponse} */ (
    jspb.Message.getWrapperField(this, lens_overlay_service_deps_pb.LensOverlayInteractionResponse, 3));
};


/**
 * @param {?proto.lens.LensOverlayInteractionResponse|undefined} value
 * @return {!proto.lens.LensOverlayServerResponse} returns this
*/
proto.lens.LensOverlayServerResponse.prototype.setInteractionResponse = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayServerResponse} returns this
 */
proto.lens.LensOverlayServerResponse.prototype.clearInteractionResponse = function() {
  return this.setInteractionResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayServerResponse.prototype.hasInteractionResponse = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_service_deps.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_client_context_pb = require('./lens_overlay_client_context_pb.cjs');
goog.object.extend(proto, lens_overlay_client_context_pb);
var lens_overlay_cluster_info_pb = require('./lens_overlay_cluster_info_pb.cjs');
goog.object.extend(proto, lens_overlay_cluster_info_pb);
var lens_overlay_deep_gleam_data_pb = require('./lens_overlay_deep_gleam_data_pb.cjs');
goog.object.extend(proto, lens_overlay_deep_gleam_data_pb);
var lens_overlay_document_pb = require('./lens_overlay_document_pb.cjs');
goog.object.extend(proto, lens_overlay_document_pb);
var lens_overlay_image_crop_pb = require('./lens_overlay_image_crop_pb.cjs');
goog.object.extend(proto, lens_overlay_image_crop_pb);
var lens_overlay_image_data_pb = require('./lens_overlay_image_data_pb.cjs');
goog.object.extend(proto, lens_overlay_image_data_pb);
var lens_overlay_interaction_request_metadata_pb = require('./lens_overlay_interaction_request_metadata_pb.cjs');
goog.object.extend(proto, lens_overlay_interaction_request_metadata_pb);
var lens_overlay_overlay_object_pb = require('./lens_overlay_overlay_object_pb.cjs');
goog.object.extend(proto, lens_overlay_overlay_object_pb);
var lens_overlay_request_id_pb = require('./lens_overlay_request_id_pb.cjs');
goog.object.extend(proto, lens_overlay_request_id_pb);
var lens_overlay_request_type_pb = require('./lens_overlay_request_type_pb.cjs');
goog.object.extend(proto, lens_overlay_request_type_pb);
var lens_overlay_text_pb = require('./lens_overlay_text_pb.cjs');
goog.object.extend(proto, lens_overlay_text_pb);
goog.exportSymbol('proto.lens.ChunkDebugMetadata', null, global);
goog.exportSymbol('proto.lens.ChunkDebugOptions', null, global);
goog.exportSymbol('proto.lens.CompressionType', null, global);
goog.exportSymbol('proto.lens.Content', null, global);
goog.exportSymbol('proto.lens.ContentData', null, global);
goog.exportSymbol('proto.lens.ContentData.ContentType', null, global);
goog.exportSymbol('proto.lens.LensOverlayInteractionRequest', null, global);
goog.exportSymbol('proto.lens.LensOverlayInteractionResponse', null, global);
goog.exportSymbol('proto.lens.LensOverlayObjectsRequest', null, global);
goog.exportSymbol('proto.lens.LensOverlayObjectsResponse', null, global);
goog.exportSymbol('proto.lens.LensOverlayRequestContext', null, global);
goog.exportSymbol('proto.lens.LensOverlayUploadChunkRequest', null, global);
goog.exportSymbol('proto.lens.LensOverlayUploadChunkResponse', null, global);
goog.exportSymbol('proto.lens.Payload', null, global);
goog.exportSymbol('proto.lens.StoredChunkOptions', null, global);
goog.exportSymbol('proto.lens.ViewportRequestContext', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayRequestContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayRequestContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayRequestContext.displayName = 'proto.lens.LensOverlayRequestContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.ViewportRequestContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.ViewportRequestContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.ViewportRequestContext.displayName = 'proto.lens.ViewportRequestContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayObjectsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayObjectsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayObjectsRequest.displayName = 'proto.lens.LensOverlayObjectsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayUploadChunkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayUploadChunkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayUploadChunkRequest.displayName = 'proto.lens.LensOverlayUploadChunkRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayUploadChunkResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayUploadChunkResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayUploadChunkResponse.displayName = 'proto.lens.LensOverlayUploadChunkResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.ChunkDebugOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.ChunkDebugOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.ChunkDebugOptions.displayName = 'proto.lens.ChunkDebugOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.ChunkDebugMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.ChunkDebugMetadata.repeatedFields_, null);
};
goog.inherits(proto.lens.ChunkDebugMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.ChunkDebugMetadata.displayName = 'proto.lens.ChunkDebugMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayObjectsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.LensOverlayObjectsResponse.repeatedFields_, null);
};
goog.inherits(proto.lens.LensOverlayObjectsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayObjectsResponse.displayName = 'proto.lens.LensOverlayObjectsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayInteractionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayInteractionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayInteractionRequest.displayName = 'proto.lens.LensOverlayInteractionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayInteractionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayInteractionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayInteractionResponse.displayName = 'proto.lens.LensOverlayInteractionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.Payload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.Payload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.Payload.displayName = 'proto.lens.Payload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.StoredChunkOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.StoredChunkOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.StoredChunkOptions.displayName = 'proto.lens.StoredChunkOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.Content = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.Content.repeatedFields_, null);
};
goog.inherits(proto.lens.Content, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.Content.displayName = 'proto.lens.Content';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.ContentData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.ContentData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.ContentData.displayName = 'proto.lens.ContentData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayRequestContext.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayRequestContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayRequestContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayRequestContext.toObject = function(includeInstance, msg) {
  var f, obj = {
requestId: (f = msg.getRequestId()) && lens_overlay_request_id_pb.LensOverlayRequestId.toObject(includeInstance, f),
clientContext: (f = msg.getClientContext()) && lens_overlay_client_context_pb.LensOverlayClientContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayRequestContext}
 */
proto.lens.LensOverlayRequestContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayRequestContext;
  return proto.lens.LensOverlayRequestContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayRequestContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayRequestContext}
 */
proto.lens.LensOverlayRequestContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new lens_overlay_request_id_pb.LensOverlayRequestId;
      reader.readMessage(value,lens_overlay_request_id_pb.LensOverlayRequestId.deserializeBinaryFromReader);
      msg.setRequestId(value);
      break;
    case 4:
      var value = new lens_overlay_client_context_pb.LensOverlayClientContext;
      reader.readMessage(value,lens_overlay_client_context_pb.LensOverlayClientContext.deserializeBinaryFromReader);
      msg.setClientContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayRequestContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayRequestContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayRequestContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayRequestContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      lens_overlay_request_id_pb.LensOverlayRequestId.serializeBinaryToWriter
    );
  }
  f = message.getClientContext();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      lens_overlay_client_context_pb.LensOverlayClientContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional LensOverlayRequestId request_id = 3;
 * @return {?proto.lens.LensOverlayRequestId}
 */
proto.lens.LensOverlayRequestContext.prototype.getRequestId = function() {
  return /** @type{?proto.lens.LensOverlayRequestId} */ (
    jspb.Message.getWrapperField(this, lens_overlay_request_id_pb.LensOverlayRequestId, 3));
};


/**
 * @param {?proto.lens.LensOverlayRequestId|undefined} value
 * @return {!proto.lens.LensOverlayRequestContext} returns this
*/
proto.lens.LensOverlayRequestContext.prototype.setRequestId = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayRequestContext} returns this
 */
proto.lens.LensOverlayRequestContext.prototype.clearRequestId = function() {
  return this.setRequestId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayRequestContext.prototype.hasRequestId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LensOverlayClientContext client_context = 4;
 * @return {?proto.lens.LensOverlayClientContext}
 */
proto.lens.LensOverlayRequestContext.prototype.getClientContext = function() {
  return /** @type{?proto.lens.LensOverlayClientContext} */ (
    jspb.Message.getWrapperField(this, lens_overlay_client_context_pb.LensOverlayClientContext, 4));
};


/**
 * @param {?proto.lens.LensOverlayClientContext|undefined} value
 * @return {!proto.lens.LensOverlayRequestContext} returns this
*/
proto.lens.LensOverlayRequestContext.prototype.setClientContext = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayRequestContext} returns this
 */
proto.lens.LensOverlayRequestContext.prototype.clearClientContext = function() {
  return this.setClientContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayRequestContext.prototype.hasClientContext = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.ViewportRequestContext.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.ViewportRequestContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.ViewportRequestContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ViewportRequestContext.toObject = function(includeInstance, msg) {
  var f, obj = {
pdfPageNumber: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.ViewportRequestContext}
 */
proto.lens.ViewportRequestContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.ViewportRequestContext;
  return proto.lens.ViewportRequestContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.ViewportRequestContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.ViewportRequestContext}
 */
proto.lens.ViewportRequestContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPdfPageNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.ViewportRequestContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.ViewportRequestContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.ViewportRequestContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ViewportRequestContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPdfPageNumber();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 pdf_page_number = 1;
 * @return {number}
 */
proto.lens.ViewportRequestContext.prototype.getPdfPageNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.ViewportRequestContext} returns this
 */
proto.lens.ViewportRequestContext.prototype.setPdfPageNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayObjectsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayObjectsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayObjectsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayObjectsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
requestContext: (f = msg.getRequestContext()) && proto.lens.LensOverlayRequestContext.toObject(includeInstance, f),
imageData: (f = msg.getImageData()) && lens_overlay_image_data_pb.ImageData.toObject(includeInstance, f),
payload: (f = msg.getPayload()) && proto.lens.Payload.toObject(includeInstance, f),
viewportRequestContext: (f = msg.getViewportRequestContext()) && proto.lens.ViewportRequestContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayObjectsRequest}
 */
proto.lens.LensOverlayObjectsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayObjectsRequest;
  return proto.lens.LensOverlayObjectsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayObjectsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayObjectsRequest}
 */
proto.lens.LensOverlayObjectsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.LensOverlayRequestContext;
      reader.readMessage(value,proto.lens.LensOverlayRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    case 3:
      var value = new lens_overlay_image_data_pb.ImageData;
      reader.readMessage(value,lens_overlay_image_data_pb.ImageData.deserializeBinaryFromReader);
      msg.setImageData(value);
      break;
    case 4:
      var value = new proto.lens.Payload;
      reader.readMessage(value,proto.lens.Payload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 5:
      var value = new proto.lens.ViewportRequestContext;
      reader.readMessage(value,proto.lens.ViewportRequestContext.deserializeBinaryFromReader);
      msg.setViewportRequestContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayObjectsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayObjectsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayObjectsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayObjectsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.LensOverlayRequestContext.serializeBinaryToWriter
    );
  }
  f = message.getImageData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      lens_overlay_image_data_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.lens.Payload.serializeBinaryToWriter
    );
  }
  f = message.getViewportRequestContext();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.lens.ViewportRequestContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional LensOverlayRequestContext request_context = 1;
 * @return {?proto.lens.LensOverlayRequestContext}
 */
proto.lens.LensOverlayObjectsRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.lens.LensOverlayRequestContext} */ (
    jspb.Message.getWrapperField(this, proto.lens.LensOverlayRequestContext, 1));
};


/**
 * @param {?proto.lens.LensOverlayRequestContext|undefined} value
 * @return {!proto.lens.LensOverlayObjectsRequest} returns this
*/
proto.lens.LensOverlayObjectsRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayObjectsRequest} returns this
 */
proto.lens.LensOverlayObjectsRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayObjectsRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ImageData image_data = 3;
 * @return {?proto.lens.ImageData}
 */
proto.lens.LensOverlayObjectsRequest.prototype.getImageData = function() {
  return /** @type{?proto.lens.ImageData} */ (
    jspb.Message.getWrapperField(this, lens_overlay_image_data_pb.ImageData, 3));
};


/**
 * @param {?proto.lens.ImageData|undefined} value
 * @return {!proto.lens.LensOverlayObjectsRequest} returns this
*/
proto.lens.LensOverlayObjectsRequest.prototype.setImageData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayObjectsRequest} returns this
 */
proto.lens.LensOverlayObjectsRequest.prototype.clearImageData = function() {
  return this.setImageData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayObjectsRequest.prototype.hasImageData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Payload payload = 4;
 * @return {?proto.lens.Payload}
 */
proto.lens.LensOverlayObjectsRequest.prototype.getPayload = function() {
  return /** @type{?proto.lens.Payload} */ (
    jspb.Message.getWrapperField(this, proto.lens.Payload, 4));
};


/**
 * @param {?proto.lens.Payload|undefined} value
 * @return {!proto.lens.LensOverlayObjectsRequest} returns this
*/
proto.lens.LensOverlayObjectsRequest.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayObjectsRequest} returns this
 */
proto.lens.LensOverlayObjectsRequest.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayObjectsRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ViewportRequestContext viewport_request_context = 5;
 * @return {?proto.lens.ViewportRequestContext}
 */
proto.lens.LensOverlayObjectsRequest.prototype.getViewportRequestContext = function() {
  return /** @type{?proto.lens.ViewportRequestContext} */ (
    jspb.Message.getWrapperField(this, proto.lens.ViewportRequestContext, 5));
};


/**
 * @param {?proto.lens.ViewportRequestContext|undefined} value
 * @return {!proto.lens.LensOverlayObjectsRequest} returns this
*/
proto.lens.LensOverlayObjectsRequest.prototype.setViewportRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayObjectsRequest} returns this
 */
proto.lens.LensOverlayObjectsRequest.prototype.clearViewportRequestContext = function() {
  return this.setViewportRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayObjectsRequest.prototype.hasViewportRequestContext = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayUploadChunkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayUploadChunkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayUploadChunkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
requestContext: (f = msg.getRequestContext()) && proto.lens.LensOverlayRequestContext.toObject(includeInstance, f),
debugOptions: (f = msg.getDebugOptions()) && proto.lens.ChunkDebugOptions.toObject(includeInstance, f),
chunkId: jspb.Message.getFieldWithDefault(msg, 3, 0),
chunkBytes: msg.getChunkBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayUploadChunkRequest}
 */
proto.lens.LensOverlayUploadChunkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayUploadChunkRequest;
  return proto.lens.LensOverlayUploadChunkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayUploadChunkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayUploadChunkRequest}
 */
proto.lens.LensOverlayUploadChunkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.LensOverlayRequestContext;
      reader.readMessage(value,proto.lens.LensOverlayRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    case 6:
      var value = new proto.lens.ChunkDebugOptions;
      reader.readMessage(value,proto.lens.ChunkDebugOptions.deserializeBinaryFromReader);
      msg.setDebugOptions(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChunkId(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChunkBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayUploadChunkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayUploadChunkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayUploadChunkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.LensOverlayRequestContext.serializeBinaryToWriter
    );
  }
  f = message.getDebugOptions();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.lens.ChunkDebugOptions.serializeBinaryToWriter
    );
  }
  f = message.getChunkId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getChunkBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional LensOverlayRequestContext request_context = 1;
 * @return {?proto.lens.LensOverlayRequestContext}
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.lens.LensOverlayRequestContext} */ (
    jspb.Message.getWrapperField(this, proto.lens.LensOverlayRequestContext, 1));
};


/**
 * @param {?proto.lens.LensOverlayRequestContext|undefined} value
 * @return {!proto.lens.LensOverlayUploadChunkRequest} returns this
*/
proto.lens.LensOverlayUploadChunkRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayUploadChunkRequest} returns this
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChunkDebugOptions debug_options = 6;
 * @return {?proto.lens.ChunkDebugOptions}
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.getDebugOptions = function() {
  return /** @type{?proto.lens.ChunkDebugOptions} */ (
    jspb.Message.getWrapperField(this, proto.lens.ChunkDebugOptions, 6));
};


/**
 * @param {?proto.lens.ChunkDebugOptions|undefined} value
 * @return {!proto.lens.LensOverlayUploadChunkRequest} returns this
*/
proto.lens.LensOverlayUploadChunkRequest.prototype.setDebugOptions = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayUploadChunkRequest} returns this
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.clearDebugOptions = function() {
  return this.setDebugOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.hasDebugOptions = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int64 chunk_id = 3;
 * @return {number}
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.getChunkId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.LensOverlayUploadChunkRequest} returns this
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.setChunkId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes chunk_bytes = 4;
 * @return {!(string|Uint8Array)}
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.getChunkBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes chunk_bytes = 4;
 * This is a type-conversion wrapper around `getChunkBytes()`
 * @return {string}
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.getChunkBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChunkBytes()));
};


/**
 * optional bytes chunk_bytes = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChunkBytes()`
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.getChunkBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChunkBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lens.LensOverlayUploadChunkRequest} returns this
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.setChunkBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayUploadChunkResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayUploadChunkResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayUploadChunkResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayUploadChunkResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
debugMetadata: (f = msg.getDebugMetadata()) && proto.lens.ChunkDebugMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayUploadChunkResponse}
 */
proto.lens.LensOverlayUploadChunkResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayUploadChunkResponse;
  return proto.lens.LensOverlayUploadChunkResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayUploadChunkResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayUploadChunkResponse}
 */
proto.lens.LensOverlayUploadChunkResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.lens.ChunkDebugMetadata;
      reader.readMessage(value,proto.lens.ChunkDebugMetadata.deserializeBinaryFromReader);
      msg.setDebugMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayUploadChunkResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayUploadChunkResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayUploadChunkResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayUploadChunkResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDebugMetadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lens.ChunkDebugMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChunkDebugMetadata debug_metadata = 2;
 * @return {?proto.lens.ChunkDebugMetadata}
 */
proto.lens.LensOverlayUploadChunkResponse.prototype.getDebugMetadata = function() {
  return /** @type{?proto.lens.ChunkDebugMetadata} */ (
    jspb.Message.getWrapperField(this, proto.lens.ChunkDebugMetadata, 2));
};


/**
 * @param {?proto.lens.ChunkDebugMetadata|undefined} value
 * @return {!proto.lens.LensOverlayUploadChunkResponse} returns this
*/
proto.lens.LensOverlayUploadChunkResponse.prototype.setDebugMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayUploadChunkResponse} returns this
 */
proto.lens.LensOverlayUploadChunkResponse.prototype.clearDebugMetadata = function() {
  return this.setDebugMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayUploadChunkResponse.prototype.hasDebugMetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.ChunkDebugOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.ChunkDebugOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.ChunkDebugOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ChunkDebugOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
totalChunks: jspb.Message.getFieldWithDefault(msg, 1, 0),
queryChunks: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.ChunkDebugOptions}
 */
proto.lens.ChunkDebugOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.ChunkDebugOptions;
  return proto.lens.ChunkDebugOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.ChunkDebugOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.ChunkDebugOptions}
 */
proto.lens.ChunkDebugOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalChunks(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setQueryChunks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.ChunkDebugOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.ChunkDebugOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.ChunkDebugOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ChunkDebugOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalChunks();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getQueryChunks();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional int64 total_chunks = 1;
 * @return {number}
 */
proto.lens.ChunkDebugOptions.prototype.getTotalChunks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.ChunkDebugOptions} returns this
 */
proto.lens.ChunkDebugOptions.prototype.setTotalChunks = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool query_chunks = 2;
 * @return {boolean}
 */
proto.lens.ChunkDebugOptions.prototype.getQueryChunks = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lens.ChunkDebugOptions} returns this
 */
proto.lens.ChunkDebugOptions.prototype.setQueryChunks = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.ChunkDebugMetadata.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.ChunkDebugMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.ChunkDebugMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.ChunkDebugMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ChunkDebugMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
remainingChunksList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.ChunkDebugMetadata}
 */
proto.lens.ChunkDebugMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.ChunkDebugMetadata;
  return proto.lens.ChunkDebugMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.ChunkDebugMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.ChunkDebugMetadata}
 */
proto.lens.ChunkDebugMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRemainingChunks(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.ChunkDebugMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.ChunkDebugMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.ChunkDebugMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ChunkDebugMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemainingChunksList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
};


/**
 * repeated int64 remaining_chunks = 1;
 * @return {!Array<number>}
 */
proto.lens.ChunkDebugMetadata.prototype.getRemainingChunksList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.lens.ChunkDebugMetadata} returns this
 */
proto.lens.ChunkDebugMetadata.prototype.setRemainingChunksList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.lens.ChunkDebugMetadata} returns this
 */
proto.lens.ChunkDebugMetadata.prototype.addRemainingChunks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.ChunkDebugMetadata} returns this
 */
proto.lens.ChunkDebugMetadata.prototype.clearRemainingChunksList = function() {
  return this.setRemainingChunksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.LensOverlayObjectsResponse.repeatedFields_ = [2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayObjectsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayObjectsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayObjectsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayObjectsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
overlayObjectsList: jspb.Message.toObjectList(msg.getOverlayObjectsList(),
    lens_overlay_overlay_object_pb.OverlayObject.toObject, includeInstance),
text: (f = msg.getText()) && lens_overlay_text_pb.Text.toObject(includeInstance, f),
deepGleamsList: jspb.Message.toObjectList(msg.getDeepGleamsList(),
    lens_overlay_deep_gleam_data_pb.DeepGleamData.toObject, includeInstance),
clusterInfo: (f = msg.getClusterInfo()) && lens_overlay_cluster_info_pb.LensOverlayClusterInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayObjectsResponse}
 */
proto.lens.LensOverlayObjectsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayObjectsResponse;
  return proto.lens.LensOverlayObjectsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayObjectsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayObjectsResponse}
 */
proto.lens.LensOverlayObjectsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new lens_overlay_overlay_object_pb.OverlayObject;
      reader.readMessage(value,lens_overlay_overlay_object_pb.OverlayObject.deserializeBinaryFromReader);
      msg.addOverlayObjects(value);
      break;
    case 3:
      var value = new lens_overlay_text_pb.Text;
      reader.readMessage(value,lens_overlay_text_pb.Text.deserializeBinaryFromReader);
      msg.setText(value);
      break;
    case 4:
      var value = new lens_overlay_deep_gleam_data_pb.DeepGleamData;
      reader.readMessage(value,lens_overlay_deep_gleam_data_pb.DeepGleamData.deserializeBinaryFromReader);
      msg.addDeepGleams(value);
      break;
    case 7:
      var value = new lens_overlay_cluster_info_pb.LensOverlayClusterInfo;
      reader.readMessage(value,lens_overlay_cluster_info_pb.LensOverlayClusterInfo.deserializeBinaryFromReader);
      msg.setClusterInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayObjectsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayObjectsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayObjectsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayObjectsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOverlayObjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      lens_overlay_overlay_object_pb.OverlayObject.serializeBinaryToWriter
    );
  }
  f = message.getText();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      lens_overlay_text_pb.Text.serializeBinaryToWriter
    );
  }
  f = message.getDeepGleamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      lens_overlay_deep_gleam_data_pb.DeepGleamData.serializeBinaryToWriter
    );
  }
  f = message.getClusterInfo();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      lens_overlay_cluster_info_pb.LensOverlayClusterInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated OverlayObject overlay_objects = 2;
 * @return {!Array<!proto.lens.OverlayObject>}
 */
proto.lens.LensOverlayObjectsResponse.prototype.getOverlayObjectsList = function() {
  return /** @type{!Array<!proto.lens.OverlayObject>} */ (
    jspb.Message.getRepeatedWrapperField(this, lens_overlay_overlay_object_pb.OverlayObject, 2));
};


/**
 * @param {!Array<!proto.lens.OverlayObject>} value
 * @return {!proto.lens.LensOverlayObjectsResponse} returns this
*/
proto.lens.LensOverlayObjectsResponse.prototype.setOverlayObjectsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.lens.OverlayObject=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.OverlayObject}
 */
proto.lens.LensOverlayObjectsResponse.prototype.addOverlayObjects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.lens.OverlayObject, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.LensOverlayObjectsResponse} returns this
 */
proto.lens.LensOverlayObjectsResponse.prototype.clearOverlayObjectsList = function() {
  return this.setOverlayObjectsList([]);
};


/**
 * optional Text text = 3;
 * @return {?proto.lens.Text}
 */
proto.lens.LensOverlayObjectsResponse.prototype.getText = function() {
  return /** @type{?proto.lens.Text} */ (
    jspb.Message.getWrapperField(this, lens_overlay_text_pb.Text, 3));
};


/**
 * @param {?proto.lens.Text|undefined} value
 * @return {!proto.lens.LensOverlayObjectsResponse} returns this
*/
proto.lens.LensOverlayObjectsResponse.prototype.setText = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayObjectsResponse} returns this
 */
proto.lens.LensOverlayObjectsResponse.prototype.clearText = function() {
  return this.setText(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayObjectsResponse.prototype.hasText = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated DeepGleamData deep_gleams = 4;
 * @return {!Array<!proto.lens.DeepGleamData>}
 */
proto.lens.LensOverlayObjectsResponse.prototype.getDeepGleamsList = function() {
  return /** @type{!Array<!proto.lens.DeepGleamData>} */ (
    jspb.Message.getRepeatedWrapperField(this, lens_overlay_deep_gleam_data_pb.DeepGleamData, 4));
};


/**
 * @param {!Array<!proto.lens.DeepGleamData>} value
 * @return {!proto.lens.LensOverlayObjectsResponse} returns this
*/
proto.lens.LensOverlayObjectsResponse.prototype.setDeepGleamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.lens.DeepGleamData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.DeepGleamData}
 */
proto.lens.LensOverlayObjectsResponse.prototype.addDeepGleams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.lens.DeepGleamData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.LensOverlayObjectsResponse} returns this
 */
proto.lens.LensOverlayObjectsResponse.prototype.clearDeepGleamsList = function() {
  return this.setDeepGleamsList([]);
};


/**
 * optional LensOverlayClusterInfo cluster_info = 7;
 * @return {?proto.lens.LensOverlayClusterInfo}
 */
proto.lens.LensOverlayObjectsResponse.prototype.getClusterInfo = function() {
  return /** @type{?proto.lens.LensOverlayClusterInfo} */ (
    jspb.Message.getWrapperField(this, lens_overlay_cluster_info_pb.LensOverlayClusterInfo, 7));
};


/**
 * @param {?proto.lens.LensOverlayClusterInfo|undefined} value
 * @return {!proto.lens.LensOverlayObjectsResponse} returns this
*/
proto.lens.LensOverlayObjectsResponse.prototype.setClusterInfo = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayObjectsResponse} returns this
 */
proto.lens.LensOverlayObjectsResponse.prototype.clearClusterInfo = function() {
  return this.setClusterInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayObjectsResponse.prototype.hasClusterInfo = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayInteractionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayInteractionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayInteractionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
requestContext: (f = msg.getRequestContext()) && proto.lens.LensOverlayRequestContext.toObject(includeInstance, f),
interactionRequestMetadata: (f = msg.getInteractionRequestMetadata()) && lens_overlay_interaction_request_metadata_pb.LensOverlayInteractionRequestMetadata.toObject(includeInstance, f),
imageCrop: (f = msg.getImageCrop()) && lens_overlay_image_crop_pb.ImageCrop.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayInteractionRequest}
 */
proto.lens.LensOverlayInteractionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayInteractionRequest;
  return proto.lens.LensOverlayInteractionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayInteractionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayInteractionRequest}
 */
proto.lens.LensOverlayInteractionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.LensOverlayRequestContext;
      reader.readMessage(value,proto.lens.LensOverlayRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    case 2:
      var value = new lens_overlay_interaction_request_metadata_pb.LensOverlayInteractionRequestMetadata;
      reader.readMessage(value,lens_overlay_interaction_request_metadata_pb.LensOverlayInteractionRequestMetadata.deserializeBinaryFromReader);
      msg.setInteractionRequestMetadata(value);
      break;
    case 3:
      var value = new lens_overlay_image_crop_pb.ImageCrop;
      reader.readMessage(value,lens_overlay_image_crop_pb.ImageCrop.deserializeBinaryFromReader);
      msg.setImageCrop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayInteractionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayInteractionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayInteractionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.LensOverlayRequestContext.serializeBinaryToWriter
    );
  }
  f = message.getInteractionRequestMetadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      lens_overlay_interaction_request_metadata_pb.LensOverlayInteractionRequestMetadata.serializeBinaryToWriter
    );
  }
  f = message.getImageCrop();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      lens_overlay_image_crop_pb.ImageCrop.serializeBinaryToWriter
    );
  }
};


/**
 * optional LensOverlayRequestContext request_context = 1;
 * @return {?proto.lens.LensOverlayRequestContext}
 */
proto.lens.LensOverlayInteractionRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.lens.LensOverlayRequestContext} */ (
    jspb.Message.getWrapperField(this, proto.lens.LensOverlayRequestContext, 1));
};


/**
 * @param {?proto.lens.LensOverlayRequestContext|undefined} value
 * @return {!proto.lens.LensOverlayInteractionRequest} returns this
*/
proto.lens.LensOverlayInteractionRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionRequest} returns this
 */
proto.lens.LensOverlayInteractionRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LensOverlayInteractionRequestMetadata interaction_request_metadata = 2;
 * @return {?proto.lens.LensOverlayInteractionRequestMetadata}
 */
proto.lens.LensOverlayInteractionRequest.prototype.getInteractionRequestMetadata = function() {
  return /** @type{?proto.lens.LensOverlayInteractionRequestMetadata} */ (
    jspb.Message.getWrapperField(this, lens_overlay_interaction_request_metadata_pb.LensOverlayInteractionRequestMetadata, 2));
};


/**
 * @param {?proto.lens.LensOverlayInteractionRequestMetadata|undefined} value
 * @return {!proto.lens.LensOverlayInteractionRequest} returns this
*/
proto.lens.LensOverlayInteractionRequest.prototype.setInteractionRequestMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionRequest} returns this
 */
proto.lens.LensOverlayInteractionRequest.prototype.clearInteractionRequestMetadata = function() {
  return this.setInteractionRequestMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionRequest.prototype.hasInteractionRequestMetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ImageCrop image_crop = 3;
 * @return {?proto.lens.ImageCrop}
 */
proto.lens.LensOverlayInteractionRequest.prototype.getImageCrop = function() {
  return /** @type{?proto.lens.ImageCrop} */ (
    jspb.Message.getWrapperField(this, lens_overlay_image_crop_pb.ImageCrop, 3));
};


/**
 * @param {?proto.lens.ImageCrop|undefined} value
 * @return {!proto.lens.LensOverlayInteractionRequest} returns this
*/
proto.lens.LensOverlayInteractionRequest.prototype.setImageCrop = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionRequest} returns this
 */
proto.lens.LensOverlayInteractionRequest.prototype.clearImageCrop = function() {
  return this.setImageCrop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionRequest.prototype.hasImageCrop = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayInteractionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayInteractionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayInteractionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
encodedResponse: jspb.Message.getFieldWithDefault(msg, 3, ""),
text: (f = msg.getText()) && lens_overlay_text_pb.Text.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayInteractionResponse}
 */
proto.lens.LensOverlayInteractionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayInteractionResponse;
  return proto.lens.LensOverlayInteractionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayInteractionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayInteractionResponse}
 */
proto.lens.LensOverlayInteractionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncodedResponse(value);
      break;
    case 5:
      var value = new lens_overlay_text_pb.Text;
      reader.readMessage(value,lens_overlay_text_pb.Text.deserializeBinaryFromReader);
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayInteractionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayInteractionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayInteractionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncodedResponse();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getText();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      lens_overlay_text_pb.Text.serializeBinaryToWriter
    );
  }
};


/**
 * optional string encoded_response = 3;
 * @return {string}
 */
proto.lens.LensOverlayInteractionResponse.prototype.getEncodedResponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.LensOverlayInteractionResponse} returns this
 */
proto.lens.LensOverlayInteractionResponse.prototype.setEncodedResponse = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Text text = 5;
 * @return {?proto.lens.Text}
 */
proto.lens.LensOverlayInteractionResponse.prototype.getText = function() {
  return /** @type{?proto.lens.Text} */ (
    jspb.Message.getWrapperField(this, lens_overlay_text_pb.Text, 5));
};


/**
 * @param {?proto.lens.Text|undefined} value
 * @return {!proto.lens.LensOverlayInteractionResponse} returns this
*/
proto.lens.LensOverlayInteractionResponse.prototype.setText = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionResponse} returns this
 */
proto.lens.LensOverlayInteractionResponse.prototype.clearText = function() {
  return this.setText(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionResponse.prototype.hasText = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.Payload.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.Payload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.Payload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Payload.toObject = function(includeInstance, msg) {
  var f, obj = {
requestType: jspb.Message.getFieldWithDefault(msg, 6, 0),
imageData: (f = msg.getImageData()) && lens_overlay_image_data_pb.ImageData.toObject(includeInstance, f),
contentData: msg.getContentData_asB64(),
contentType: jspb.Message.getFieldWithDefault(msg, 4, ""),
pageUrl: jspb.Message.getFieldWithDefault(msg, 5, ""),
partialPdfDocument: (f = msg.getPartialPdfDocument()) && lens_overlay_document_pb.LensOverlayDocument.toObject(includeInstance, f),
compressionType: jspb.Message.getFieldWithDefault(msg, 8, 0),
storedChunkOptions: (f = msg.getStoredChunkOptions()) && proto.lens.StoredChunkOptions.toObject(includeInstance, f),
content: (f = msg.getContent()) && proto.lens.Content.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.Payload}
 */
proto.lens.Payload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.Payload;
  return proto.lens.Payload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.Payload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.Payload}
 */
proto.lens.Payload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 6:
      var value = /** @type {!proto.lens.RequestType} */ (reader.readEnum());
      msg.setRequestType(value);
      break;
    case 2:
      var value = new lens_overlay_image_data_pb.ImageData;
      reader.readMessage(value,lens_overlay_image_data_pb.ImageData.deserializeBinaryFromReader);
      msg.setImageData(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContentData(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageUrl(value);
      break;
    case 7:
      var value = new lens_overlay_document_pb.LensOverlayDocument;
      reader.readMessage(value,lens_overlay_document_pb.LensOverlayDocument.deserializeBinaryFromReader);
      msg.setPartialPdfDocument(value);
      break;
    case 8:
      var value = /** @type {!proto.lens.CompressionType} */ (reader.readEnum());
      msg.setCompressionType(value);
      break;
    case 9:
      var value = new proto.lens.StoredChunkOptions;
      reader.readMessage(value,proto.lens.StoredChunkOptions.deserializeBinaryFromReader);
      msg.setStoredChunkOptions(value);
      break;
    case 10:
      var value = new proto.lens.Content;
      reader.readMessage(value,proto.lens.Content.deserializeBinaryFromReader);
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.Payload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.Payload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.Payload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Payload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getImageData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      lens_overlay_image_data_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getContentData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getContentType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPageUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPartialPdfDocument();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      lens_overlay_document_pb.LensOverlayDocument.serializeBinaryToWriter
    );
  }
  f = message.getCompressionType();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getStoredChunkOptions();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.lens.StoredChunkOptions.serializeBinaryToWriter
    );
  }
  f = message.getContent();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.lens.Content.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestType request_type = 6;
 * @return {!proto.lens.RequestType}
 */
proto.lens.Payload.prototype.getRequestType = function() {
  return /** @type {!proto.lens.RequestType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.lens.RequestType} value
 * @return {!proto.lens.Payload} returns this
 */
proto.lens.Payload.prototype.setRequestType = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional ImageData image_data = 2;
 * @return {?proto.lens.ImageData}
 */
proto.lens.Payload.prototype.getImageData = function() {
  return /** @type{?proto.lens.ImageData} */ (
    jspb.Message.getWrapperField(this, lens_overlay_image_data_pb.ImageData, 2));
};


/**
 * @param {?proto.lens.ImageData|undefined} value
 * @return {!proto.lens.Payload} returns this
*/
proto.lens.Payload.prototype.setImageData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.Payload} returns this
 */
proto.lens.Payload.prototype.clearImageData = function() {
  return this.setImageData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.Payload.prototype.hasImageData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes content_data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.lens.Payload.prototype.getContentData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes content_data = 3;
 * This is a type-conversion wrapper around `getContentData()`
 * @return {string}
 */
proto.lens.Payload.prototype.getContentData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContentData()));
};


/**
 * optional bytes content_data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContentData()`
 * @return {!Uint8Array}
 */
proto.lens.Payload.prototype.getContentData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContentData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lens.Payload} returns this
 */
proto.lens.Payload.prototype.setContentData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string content_type = 4;
 * @return {string}
 */
proto.lens.Payload.prototype.getContentType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.Payload} returns this
 */
proto.lens.Payload.prototype.setContentType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string page_url = 5;
 * @return {string}
 */
proto.lens.Payload.prototype.getPageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.Payload} returns this
 */
proto.lens.Payload.prototype.setPageUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional LensOverlayDocument partial_pdf_document = 7;
 * @return {?proto.lens.LensOverlayDocument}
 */
proto.lens.Payload.prototype.getPartialPdfDocument = function() {
  return /** @type{?proto.lens.LensOverlayDocument} */ (
    jspb.Message.getWrapperField(this, lens_overlay_document_pb.LensOverlayDocument, 7));
};


/**
 * @param {?proto.lens.LensOverlayDocument|undefined} value
 * @return {!proto.lens.Payload} returns this
*/
proto.lens.Payload.prototype.setPartialPdfDocument = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.Payload} returns this
 */
proto.lens.Payload.prototype.clearPartialPdfDocument = function() {
  return this.setPartialPdfDocument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.Payload.prototype.hasPartialPdfDocument = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional CompressionType compression_type = 8;
 * @return {!proto.lens.CompressionType}
 */
proto.lens.Payload.prototype.getCompressionType = function() {
  return /** @type {!proto.lens.CompressionType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.lens.CompressionType} value
 * @return {!proto.lens.Payload} returns this
 */
proto.lens.Payload.prototype.setCompressionType = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional StoredChunkOptions stored_chunk_options = 9;
 * @return {?proto.lens.StoredChunkOptions}
 */
proto.lens.Payload.prototype.getStoredChunkOptions = function() {
  return /** @type{?proto.lens.StoredChunkOptions} */ (
    jspb.Message.getWrapperField(this, proto.lens.StoredChunkOptions, 9));
};


/**
 * @param {?proto.lens.StoredChunkOptions|undefined} value
 * @return {!proto.lens.Payload} returns this
*/
proto.lens.Payload.prototype.setStoredChunkOptions = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.Payload} returns this
 */
proto.lens.Payload.prototype.clearStoredChunkOptions = function() {
  return this.setStoredChunkOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.Payload.prototype.hasStoredChunkOptions = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Content content = 10;
 * @return {?proto.lens.Content}
 */
proto.lens.Payload.prototype.getContent = function() {
  return /** @type{?proto.lens.Content} */ (
    jspb.Message.getWrapperField(this, proto.lens.Content, 10));
};


/**
 * @param {?proto.lens.Content|undefined} value
 * @return {!proto.lens.Payload} returns this
*/
proto.lens.Payload.prototype.setContent = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.Payload} returns this
 */
proto.lens.Payload.prototype.clearContent = function() {
  return this.setContent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.Payload.prototype.hasContent = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.StoredChunkOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.StoredChunkOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.StoredChunkOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.StoredChunkOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
readStoredChunks: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
totalStoredChunks: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.StoredChunkOptions}
 */
proto.lens.StoredChunkOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.StoredChunkOptions;
  return proto.lens.StoredChunkOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.StoredChunkOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.StoredChunkOptions}
 */
proto.lens.StoredChunkOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadStoredChunks(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalStoredChunks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.StoredChunkOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.StoredChunkOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.StoredChunkOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.StoredChunkOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReadStoredChunks();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTotalStoredChunks();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bool read_stored_chunks = 1;
 * @return {boolean}
 */
proto.lens.StoredChunkOptions.prototype.getReadStoredChunks = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lens.StoredChunkOptions} returns this
 */
proto.lens.StoredChunkOptions.prototype.setReadStoredChunks = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int64 total_stored_chunks = 2;
 * @return {number}
 */
proto.lens.StoredChunkOptions.prototype.getTotalStoredChunks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.StoredChunkOptions} returns this
 */
proto.lens.StoredChunkOptions.prototype.setTotalStoredChunks = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.Content.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.Content.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.Content.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.Content} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Content.toObject = function(includeInstance, msg) {
  var f, obj = {
webpageUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
webpageTitle: jspb.Message.getFieldWithDefault(msg, 4, ""),
contentDataList: jspb.Message.toObjectList(msg.getContentDataList(),
    proto.lens.ContentData.toObject, includeInstance),
requestType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.Content}
 */
proto.lens.Content.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.Content;
  return proto.lens.Content.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.Content} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.Content}
 */
proto.lens.Content.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebpageUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebpageTitle(value);
      break;
    case 2:
      var value = new proto.lens.ContentData;
      reader.readMessage(value,proto.lens.ContentData.deserializeBinaryFromReader);
      msg.addContentData(value);
      break;
    case 3:
      var value = /** @type {!proto.lens.RequestType} */ (reader.readEnum());
      msg.setRequestType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.Content.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.Content.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.Content} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Content.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWebpageUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWebpageTitle();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getContentDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.lens.ContentData.serializeBinaryToWriter
    );
  }
  f = message.getRequestType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string webpage_url = 1;
 * @return {string}
 */
proto.lens.Content.prototype.getWebpageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.Content} returns this
 */
proto.lens.Content.prototype.setWebpageUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string webpage_title = 4;
 * @return {string}
 */
proto.lens.Content.prototype.getWebpageTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.Content} returns this
 */
proto.lens.Content.prototype.setWebpageTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated ContentData content_data = 2;
 * @return {!Array<!proto.lens.ContentData>}
 */
proto.lens.Content.prototype.getContentDataList = function() {
  return /** @type{!Array<!proto.lens.ContentData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lens.ContentData, 2));
};


/**
 * @param {!Array<!proto.lens.ContentData>} value
 * @return {!proto.lens.Content} returns this
*/
proto.lens.Content.prototype.setContentDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.lens.ContentData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.ContentData}
 */
proto.lens.Content.prototype.addContentData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.lens.ContentData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.Content} returns this
 */
proto.lens.Content.prototype.clearContentDataList = function() {
  return this.setContentDataList([]);
};


/**
 * optional RequestType request_type = 3;
 * @return {!proto.lens.RequestType}
 */
proto.lens.Content.prototype.getRequestType = function() {
  return /** @type {!proto.lens.RequestType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.lens.RequestType} value
 * @return {!proto.lens.Content} returns this
 */
proto.lens.Content.prototype.setRequestType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.ContentData.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.ContentData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.ContentData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ContentData.toObject = function(includeInstance, msg) {
  var f, obj = {
contentType: jspb.Message.getFieldWithDefault(msg, 1, 0),
data: msg.getData_asB64(),
compressionType: jspb.Message.getFieldWithDefault(msg, 3, 0),
storedChunkOptions: (f = msg.getStoredChunkOptions()) && proto.lens.StoredChunkOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.ContentData}
 */
proto.lens.ContentData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.ContentData;
  return proto.lens.ContentData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.ContentData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.ContentData}
 */
proto.lens.ContentData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lens.ContentData.ContentType} */ (reader.readEnum());
      msg.setContentType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {!proto.lens.CompressionType} */ (reader.readEnum());
      msg.setCompressionType(value);
      break;
    case 4:
      var value = new proto.lens.StoredChunkOptions;
      reader.readMessage(value,proto.lens.StoredChunkOptions.deserializeBinaryFromReader);
      msg.setStoredChunkOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.ContentData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.ContentData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.ContentData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ContentData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContentType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCompressionType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getStoredChunkOptions();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.lens.StoredChunkOptions.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.lens.ContentData.ContentType = {
  CONTENT_TYPE_UNSPECIFIED: 0,
  CONTENT_TYPE_PDF: 1,
  CONTENT_TYPE_INNER_TEXT: 2,
  CONTENT_TYPE_INNER_HTML: 3,
  CONTENT_TYPE_ANNOTATED_PAGE_CONTENT: 4,
  CONTENT_TYPE_EARLY_PARTIAL_PDF: 5
};

/**
 * optional ContentType content_type = 1;
 * @return {!proto.lens.ContentData.ContentType}
 */
proto.lens.ContentData.prototype.getContentType = function() {
  return /** @type {!proto.lens.ContentData.ContentType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lens.ContentData.ContentType} value
 * @return {!proto.lens.ContentData} returns this
 */
proto.lens.ContentData.prototype.setContentType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.lens.ContentData.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.lens.ContentData.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.lens.ContentData.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lens.ContentData} returns this
 */
proto.lens.ContentData.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional CompressionType compression_type = 3;
 * @return {!proto.lens.CompressionType}
 */
proto.lens.ContentData.prototype.getCompressionType = function() {
  return /** @type {!proto.lens.CompressionType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.lens.CompressionType} value
 * @return {!proto.lens.ContentData} returns this
 */
proto.lens.ContentData.prototype.setCompressionType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional StoredChunkOptions stored_chunk_options = 4;
 * @return {?proto.lens.StoredChunkOptions}
 */
proto.lens.ContentData.prototype.getStoredChunkOptions = function() {
  return /** @type{?proto.lens.StoredChunkOptions} */ (
    jspb.Message.getWrapperField(this, proto.lens.StoredChunkOptions, 4));
};


/**
 * @param {?proto.lens.StoredChunkOptions|undefined} value
 * @return {!proto.lens.ContentData} returns this
*/
proto.lens.ContentData.prototype.setStoredChunkOptions = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.ContentData} returns this
 */
proto.lens.ContentData.prototype.clearStoredChunkOptions = function() {
  return this.setStoredChunkOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.ContentData.prototype.hasStoredChunkOptions = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.lens.CompressionType = {
  UNCOMPRESSED: 0,
  ZSTD: 1
};

goog.object.extend(exports, proto.lens);
// source: lens_overlay_stickiness_signals.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_math_solver_query_pb = require('./lens_overlay_math_solver_query_pb.cjs');
goog.object.extend(proto, lens_overlay_math_solver_query_pb);
var lens_overlay_message_set_pb = require('./lens_overlay_message_set_pb.cjs');
goog.object.extend(proto, lens_overlay_message_set_pb);
goog.exportSymbol('proto.lens.EducationInputExtension', null, global);
goog.exportSymbol('proto.lens.StickinessSignals', null, global);
goog.exportSymbol('proto.lens.StickinessSignals.Namespace', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.StickinessSignals = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.StickinessSignals, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.StickinessSignals.displayName = 'proto.lens.StickinessSignals';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.EducationInputExtension = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.EducationInputExtension, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.EducationInputExtension.displayName = 'proto.lens.EducationInputExtension';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.StickinessSignals.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.StickinessSignals.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.StickinessSignals} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.StickinessSignals.toObject = function(includeInstance, msg) {
  var f, obj = {
idNamespace: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
interpretation: (f = msg.getInterpretation()) && lens_overlay_message_set_pb.MessageSet.toObject(includeInstance, f),
educationInputExtension: (f = msg.getEducationInputExtension()) && proto.lens.EducationInputExtension.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.StickinessSignals}
 */
proto.lens.StickinessSignals.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.StickinessSignals;
  return proto.lens.StickinessSignals.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.StickinessSignals} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.StickinessSignals}
 */
proto.lens.StickinessSignals.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lens.StickinessSignals.Namespace} */ (reader.readEnum());
      msg.setIdNamespace(value);
      break;
    case 28:
      var value = new lens_overlay_message_set_pb.MessageSet;
      reader.readMessage(value,lens_overlay_message_set_pb.MessageSet.deserializeBinaryFromReader);
      msg.setInterpretation(value);
      break;
    case 121:
      var value = new proto.lens.EducationInputExtension;
      reader.readMessage(value,proto.lens.EducationInputExtension.deserializeBinaryFromReader);
      msg.setEducationInputExtension(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.StickinessSignals.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.StickinessSignals.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.StickinessSignals} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.StickinessSignals.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.lens.StickinessSignals.Namespace} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getInterpretation();
  if (f != null) {
    writer.writeMessage(
      28,
      f,
      lens_overlay_message_set_pb.MessageSet.serializeBinaryToWriter
    );
  }
  f = message.getEducationInputExtension();
  if (f != null) {
    writer.writeMessage(
      121,
      f,
      proto.lens.EducationInputExtension.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.lens.StickinessSignals.Namespace = {
  UNKNOWN: 0,
  TRANSLATE_LITE: 56,
  EDUCATION_INPUT: 79
};

/**
 * optional Namespace id_namespace = 1;
 * @return {!proto.lens.StickinessSignals.Namespace}
 */
proto.lens.StickinessSignals.prototype.getIdNamespace = function() {
  return /** @type {!proto.lens.StickinessSignals.Namespace} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lens.StickinessSignals.Namespace} value
 * @return {!proto.lens.StickinessSignals} returns this
 */
proto.lens.StickinessSignals.prototype.setIdNamespace = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.lens.StickinessSignals} returns this
 */
proto.lens.StickinessSignals.prototype.clearIdNamespace = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.StickinessSignals.prototype.hasIdNamespace = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MessageSet interpretation = 28;
 * @return {?proto.lens.MessageSet}
 */
proto.lens.StickinessSignals.prototype.getInterpretation = function() {
  return /** @type{?proto.lens.MessageSet} */ (
    jspb.Message.getWrapperField(this, lens_overlay_message_set_pb.MessageSet, 28));
};


/**
 * @param {?proto.lens.MessageSet|undefined} value
 * @return {!proto.lens.StickinessSignals} returns this
*/
proto.lens.StickinessSignals.prototype.setInterpretation = function(value) {
  return jspb.Message.setWrapperField(this, 28, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.StickinessSignals} returns this
 */
proto.lens.StickinessSignals.prototype.clearInterpretation = function() {
  return this.setInterpretation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.StickinessSignals.prototype.hasInterpretation = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional EducationInputExtension education_input_extension = 121;
 * @return {?proto.lens.EducationInputExtension}
 */
proto.lens.StickinessSignals.prototype.getEducationInputExtension = function() {
  return /** @type{?proto.lens.EducationInputExtension} */ (
    jspb.Message.getWrapperField(this, proto.lens.EducationInputExtension, 121));
};


/**
 * @param {?proto.lens.EducationInputExtension|undefined} value
 * @return {!proto.lens.StickinessSignals} returns this
*/
proto.lens.StickinessSignals.prototype.setEducationInputExtension = function(value) {
  return jspb.Message.setWrapperField(this, 121, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.StickinessSignals} returns this
 */
proto.lens.StickinessSignals.prototype.clearEducationInputExtension = function() {
  return this.setEducationInputExtension(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.StickinessSignals.prototype.hasEducationInputExtension = function() {
  return jspb.Message.getField(this, 121) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.EducationInputExtension.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.EducationInputExtension.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.EducationInputExtension} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.EducationInputExtension.toObject = function(includeInstance, msg) {
  var f, obj = {
mathSolverQuery: (f = msg.getMathSolverQuery()) && lens_overlay_math_solver_query_pb.MathSolverQuery.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.EducationInputExtension}
 */
proto.lens.EducationInputExtension.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.EducationInputExtension;
  return proto.lens.EducationInputExtension.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.EducationInputExtension} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.EducationInputExtension}
 */
proto.lens.EducationInputExtension.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new lens_overlay_math_solver_query_pb.MathSolverQuery;
      reader.readMessage(value,lens_overlay_math_solver_query_pb.MathSolverQuery.deserializeBinaryFromReader);
      msg.setMathSolverQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.EducationInputExtension.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.EducationInputExtension.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.EducationInputExtension} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.EducationInputExtension.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMathSolverQuery();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      lens_overlay_math_solver_query_pb.MathSolverQuery.serializeBinaryToWriter
    );
  }
};


/**
 * optional MathSolverQuery math_solver_query = 1;
 * @return {?proto.lens.MathSolverQuery}
 */
proto.lens.EducationInputExtension.prototype.getMathSolverQuery = function() {
  return /** @type{?proto.lens.MathSolverQuery} */ (
    jspb.Message.getWrapperField(this, lens_overlay_math_solver_query_pb.MathSolverQuery, 1));
};


/**
 * @param {?proto.lens.MathSolverQuery|undefined} value
 * @return {!proto.lens.EducationInputExtension} returns this
*/
proto.lens.EducationInputExtension.prototype.setMathSolverQuery = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.EducationInputExtension} returns this
 */
proto.lens.EducationInputExtension.prototype.clearMathSolverQuery = function() {
  return this.setMathSolverQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.EducationInputExtension.prototype.hasMathSolverQuery = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_surface.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.lens.Surface', null, global);
/**
 * @enum {number}
 */
proto.lens.Surface = {
  SURFACE_UNSPECIFIED: 0,
  SURFACE_CHROMIUM: 4,
  SURFACE_LENS_OVERLAY: 42
};

goog.object.extend(exports, proto.lens);
// source: lens_overlay_text.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_geometry_pb = require('./lens_overlay_geometry_pb.cjs');
goog.object.extend(proto, lens_overlay_geometry_pb);
goog.exportSymbol('proto.lens.Alignment', null, global);
goog.exportSymbol('proto.lens.Text', null, global);
goog.exportSymbol('proto.lens.TextEntityIdentifier', null, global);
goog.exportSymbol('proto.lens.TextLayout', null, global);
goog.exportSymbol('proto.lens.TextLayout.Line', null, global);
goog.exportSymbol('proto.lens.TextLayout.Paragraph', null, global);
goog.exportSymbol('proto.lens.TextLayout.Word', null, global);
goog.exportSymbol('proto.lens.TextLayout.Word.FormulaMetadata', null, global);
goog.exportSymbol('proto.lens.TextLayout.Word.Type', null, global);
goog.exportSymbol('proto.lens.WritingDirection', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.Text = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.Text, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.Text.displayName = 'proto.lens.Text';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TextLayout = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.TextLayout.repeatedFields_, null);
};
goog.inherits(proto.lens.TextLayout, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TextLayout.displayName = 'proto.lens.TextLayout';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TextLayout.Word = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.TextLayout.Word, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TextLayout.Word.displayName = 'proto.lens.TextLayout.Word';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TextLayout.Word.FormulaMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.TextLayout.Word.FormulaMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TextLayout.Word.FormulaMetadata.displayName = 'proto.lens.TextLayout.Word.FormulaMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TextLayout.Line = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.TextLayout.Line.repeatedFields_, null);
};
goog.inherits(proto.lens.TextLayout.Line, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TextLayout.Line.displayName = 'proto.lens.TextLayout.Line';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TextLayout.Paragraph = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.TextLayout.Paragraph.repeatedFields_, null);
};
goog.inherits(proto.lens.TextLayout.Paragraph, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TextLayout.Paragraph.displayName = 'proto.lens.TextLayout.Paragraph';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TextEntityIdentifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.TextEntityIdentifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TextEntityIdentifier.displayName = 'proto.lens.TextEntityIdentifier';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.Text.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.Text.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.Text} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Text.toObject = function(includeInstance, msg) {
  var f, obj = {
textLayout: (f = msg.getTextLayout()) && proto.lens.TextLayout.toObject(includeInstance, f),
contentLanguage: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.Text}
 */
proto.lens.Text.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.Text;
  return proto.lens.Text.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.Text} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.Text}
 */
proto.lens.Text.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.TextLayout;
      reader.readMessage(value,proto.lens.TextLayout.deserializeBinaryFromReader);
      msg.setTextLayout(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentLanguage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.Text.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.Text.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.Text} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Text.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTextLayout();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.TextLayout.serializeBinaryToWriter
    );
  }
  f = message.getContentLanguage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional TextLayout text_layout = 1;
 * @return {?proto.lens.TextLayout}
 */
proto.lens.Text.prototype.getTextLayout = function() {
  return /** @type{?proto.lens.TextLayout} */ (
    jspb.Message.getWrapperField(this, proto.lens.TextLayout, 1));
};


/**
 * @param {?proto.lens.TextLayout|undefined} value
 * @return {!proto.lens.Text} returns this
*/
proto.lens.Text.prototype.setTextLayout = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.Text} returns this
 */
proto.lens.Text.prototype.clearTextLayout = function() {
  return this.setTextLayout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.Text.prototype.hasTextLayout = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string content_language = 2;
 * @return {string}
 */
proto.lens.Text.prototype.getContentLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.Text} returns this
 */
proto.lens.Text.prototype.setContentLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.TextLayout.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TextLayout.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TextLayout.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TextLayout} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextLayout.toObject = function(includeInstance, msg) {
  var f, obj = {
paragraphsList: jspb.Message.toObjectList(msg.getParagraphsList(),
    proto.lens.TextLayout.Paragraph.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TextLayout}
 */
proto.lens.TextLayout.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TextLayout;
  return proto.lens.TextLayout.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TextLayout} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TextLayout}
 */
proto.lens.TextLayout.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.TextLayout.Paragraph;
      reader.readMessage(value,proto.lens.TextLayout.Paragraph.deserializeBinaryFromReader);
      msg.addParagraphs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TextLayout.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TextLayout.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TextLayout} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextLayout.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParagraphsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.lens.TextLayout.Paragraph.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TextLayout.Word.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TextLayout.Word.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TextLayout.Word} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextLayout.Word.toObject = function(includeInstance, msg) {
  var f, obj = {
id: (f = msg.getId()) && proto.lens.TextEntityIdentifier.toObject(includeInstance, f),
plainText: jspb.Message.getFieldWithDefault(msg, 2, ""),
textSeparator: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
geometry: (f = msg.getGeometry()) && lens_overlay_geometry_pb.Geometry.toObject(includeInstance, f),
type: jspb.Message.getFieldWithDefault(msg, 5, 0),
formulaMetadata: (f = msg.getFormulaMetadata()) && proto.lens.TextLayout.Word.FormulaMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TextLayout.Word}
 */
proto.lens.TextLayout.Word.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TextLayout.Word;
  return proto.lens.TextLayout.Word.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TextLayout.Word} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TextLayout.Word}
 */
proto.lens.TextLayout.Word.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.TextEntityIdentifier;
      reader.readMessage(value,proto.lens.TextEntityIdentifier.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlainText(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextSeparator(value);
      break;
    case 4:
      var value = new lens_overlay_geometry_pb.Geometry;
      reader.readMessage(value,lens_overlay_geometry_pb.Geometry.deserializeBinaryFromReader);
      msg.setGeometry(value);
      break;
    case 5:
      var value = /** @type {!proto.lens.TextLayout.Word.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 6:
      var value = new proto.lens.TextLayout.Word.FormulaMetadata;
      reader.readMessage(value,proto.lens.TextLayout.Word.FormulaMetadata.deserializeBinaryFromReader);
      msg.setFormulaMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TextLayout.Word.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TextLayout.Word.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TextLayout.Word} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextLayout.Word.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.TextEntityIdentifier.serializeBinaryToWriter
    );
  }
  f = message.getPlainText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGeometry();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      lens_overlay_geometry_pb.Geometry.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getFormulaMetadata();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.lens.TextLayout.Word.FormulaMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.lens.TextLayout.Word.Type = {
  TEXT: 0,
  FORMULA: 1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TextLayout.Word.FormulaMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TextLayout.Word.FormulaMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TextLayout.Word.FormulaMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextLayout.Word.FormulaMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
latex: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TextLayout.Word.FormulaMetadata}
 */
proto.lens.TextLayout.Word.FormulaMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TextLayout.Word.FormulaMetadata;
  return proto.lens.TextLayout.Word.FormulaMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TextLayout.Word.FormulaMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TextLayout.Word.FormulaMetadata}
 */
proto.lens.TextLayout.Word.FormulaMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLatex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TextLayout.Word.FormulaMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TextLayout.Word.FormulaMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TextLayout.Word.FormulaMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextLayout.Word.FormulaMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatex();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string latex = 1;
 * @return {string}
 */
proto.lens.TextLayout.Word.FormulaMetadata.prototype.getLatex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.TextLayout.Word.FormulaMetadata} returns this
 */
proto.lens.TextLayout.Word.FormulaMetadata.prototype.setLatex = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TextEntityIdentifier id = 1;
 * @return {?proto.lens.TextEntityIdentifier}
 */
proto.lens.TextLayout.Word.prototype.getId = function() {
  return /** @type{?proto.lens.TextEntityIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.lens.TextEntityIdentifier, 1));
};


/**
 * @param {?proto.lens.TextEntityIdentifier|undefined} value
 * @return {!proto.lens.TextLayout.Word} returns this
*/
proto.lens.TextLayout.Word.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.TextLayout.Word} returns this
 */
proto.lens.TextLayout.Word.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.TextLayout.Word.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string plain_text = 2;
 * @return {string}
 */
proto.lens.TextLayout.Word.prototype.getPlainText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.TextLayout.Word} returns this
 */
proto.lens.TextLayout.Word.prototype.setPlainText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string text_separator = 3;
 * @return {string}
 */
proto.lens.TextLayout.Word.prototype.getTextSeparator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.TextLayout.Word} returns this
 */
proto.lens.TextLayout.Word.prototype.setTextSeparator = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.lens.TextLayout.Word} returns this
 */
proto.lens.TextLayout.Word.prototype.clearTextSeparator = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.TextLayout.Word.prototype.hasTextSeparator = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Geometry geometry = 4;
 * @return {?proto.lens.Geometry}
 */
proto.lens.TextLayout.Word.prototype.getGeometry = function() {
  return /** @type{?proto.lens.Geometry} */ (
    jspb.Message.getWrapperField(this, lens_overlay_geometry_pb.Geometry, 4));
};


/**
 * @param {?proto.lens.Geometry|undefined} value
 * @return {!proto.lens.TextLayout.Word} returns this
*/
proto.lens.TextLayout.Word.prototype.setGeometry = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.TextLayout.Word} returns this
 */
proto.lens.TextLayout.Word.prototype.clearGeometry = function() {
  return this.setGeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.TextLayout.Word.prototype.hasGeometry = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Type type = 5;
 * @return {!proto.lens.TextLayout.Word.Type}
 */
proto.lens.TextLayout.Word.prototype.getType = function() {
  return /** @type {!proto.lens.TextLayout.Word.Type} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.lens.TextLayout.Word.Type} value
 * @return {!proto.lens.TextLayout.Word} returns this
 */
proto.lens.TextLayout.Word.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional FormulaMetadata formula_metadata = 6;
 * @return {?proto.lens.TextLayout.Word.FormulaMetadata}
 */
proto.lens.TextLayout.Word.prototype.getFormulaMetadata = function() {
  return /** @type{?proto.lens.TextLayout.Word.FormulaMetadata} */ (
    jspb.Message.getWrapperField(this, proto.lens.TextLayout.Word.FormulaMetadata, 6));
};


/**
 * @param {?proto.lens.TextLayout.Word.FormulaMetadata|undefined} value
 * @return {!proto.lens.TextLayout.Word} returns this
*/
proto.lens.TextLayout.Word.prototype.setFormulaMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.TextLayout.Word} returns this
 */
proto.lens.TextLayout.Word.prototype.clearFormulaMetadata = function() {
  return this.setFormulaMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.TextLayout.Word.prototype.hasFormulaMetadata = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.TextLayout.Line.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TextLayout.Line.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TextLayout.Line.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TextLayout.Line} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextLayout.Line.toObject = function(includeInstance, msg) {
  var f, obj = {
wordsList: jspb.Message.toObjectList(msg.getWordsList(),
    proto.lens.TextLayout.Word.toObject, includeInstance),
geometry: (f = msg.getGeometry()) && lens_overlay_geometry_pb.Geometry.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TextLayout.Line}
 */
proto.lens.TextLayout.Line.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TextLayout.Line;
  return proto.lens.TextLayout.Line.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TextLayout.Line} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TextLayout.Line}
 */
proto.lens.TextLayout.Line.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.TextLayout.Word;
      reader.readMessage(value,proto.lens.TextLayout.Word.deserializeBinaryFromReader);
      msg.addWords(value);
      break;
    case 2:
      var value = new lens_overlay_geometry_pb.Geometry;
      reader.readMessage(value,lens_overlay_geometry_pb.Geometry.deserializeBinaryFromReader);
      msg.setGeometry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TextLayout.Line.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TextLayout.Line.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TextLayout.Line} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextLayout.Line.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.lens.TextLayout.Word.serializeBinaryToWriter
    );
  }
  f = message.getGeometry();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      lens_overlay_geometry_pb.Geometry.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Word words = 1;
 * @return {!Array<!proto.lens.TextLayout.Word>}
 */
proto.lens.TextLayout.Line.prototype.getWordsList = function() {
  return /** @type{!Array<!proto.lens.TextLayout.Word>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lens.TextLayout.Word, 1));
};


/**
 * @param {!Array<!proto.lens.TextLayout.Word>} value
 * @return {!proto.lens.TextLayout.Line} returns this
*/
proto.lens.TextLayout.Line.prototype.setWordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.lens.TextLayout.Word=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.TextLayout.Word}
 */
proto.lens.TextLayout.Line.prototype.addWords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.lens.TextLayout.Word, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.TextLayout.Line} returns this
 */
proto.lens.TextLayout.Line.prototype.clearWordsList = function() {
  return this.setWordsList([]);
};


/**
 * optional Geometry geometry = 2;
 * @return {?proto.lens.Geometry}
 */
proto.lens.TextLayout.Line.prototype.getGeometry = function() {
  return /** @type{?proto.lens.Geometry} */ (
    jspb.Message.getWrapperField(this, lens_overlay_geometry_pb.Geometry, 2));
};


/**
 * @param {?proto.lens.Geometry|undefined} value
 * @return {!proto.lens.TextLayout.Line} returns this
*/
proto.lens.TextLayout.Line.prototype.setGeometry = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.TextLayout.Line} returns this
 */
proto.lens.TextLayout.Line.prototype.clearGeometry = function() {
  return this.setGeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.TextLayout.Line.prototype.hasGeometry = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.TextLayout.Paragraph.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TextLayout.Paragraph.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TextLayout.Paragraph.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TextLayout.Paragraph} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextLayout.Paragraph.toObject = function(includeInstance, msg) {
  var f, obj = {
id: (f = msg.getId()) && proto.lens.TextEntityIdentifier.toObject(includeInstance, f),
linesList: jspb.Message.toObjectList(msg.getLinesList(),
    proto.lens.TextLayout.Line.toObject, includeInstance),
geometry: (f = msg.getGeometry()) && lens_overlay_geometry_pb.Geometry.toObject(includeInstance, f),
writingDirection: jspb.Message.getFieldWithDefault(msg, 4, 0),
contentLanguage: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TextLayout.Paragraph}
 */
proto.lens.TextLayout.Paragraph.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TextLayout.Paragraph;
  return proto.lens.TextLayout.Paragraph.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TextLayout.Paragraph} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TextLayout.Paragraph}
 */
proto.lens.TextLayout.Paragraph.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.TextEntityIdentifier;
      reader.readMessage(value,proto.lens.TextEntityIdentifier.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.lens.TextLayout.Line;
      reader.readMessage(value,proto.lens.TextLayout.Line.deserializeBinaryFromReader);
      msg.addLines(value);
      break;
    case 3:
      var value = new lens_overlay_geometry_pb.Geometry;
      reader.readMessage(value,lens_overlay_geometry_pb.Geometry.deserializeBinaryFromReader);
      msg.setGeometry(value);
      break;
    case 4:
      var value = /** @type {!proto.lens.WritingDirection} */ (reader.readEnum());
      msg.setWritingDirection(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentLanguage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TextLayout.Paragraph.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TextLayout.Paragraph.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TextLayout.Paragraph} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextLayout.Paragraph.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.TextEntityIdentifier.serializeBinaryToWriter
    );
  }
  f = message.getLinesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.lens.TextLayout.Line.serializeBinaryToWriter
    );
  }
  f = message.getGeometry();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      lens_overlay_geometry_pb.Geometry.serializeBinaryToWriter
    );
  }
  f = message.getWritingDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getContentLanguage();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional TextEntityIdentifier id = 1;
 * @return {?proto.lens.TextEntityIdentifier}
 */
proto.lens.TextLayout.Paragraph.prototype.getId = function() {
  return /** @type{?proto.lens.TextEntityIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.lens.TextEntityIdentifier, 1));
};


/**
 * @param {?proto.lens.TextEntityIdentifier|undefined} value
 * @return {!proto.lens.TextLayout.Paragraph} returns this
*/
proto.lens.TextLayout.Paragraph.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.TextLayout.Paragraph} returns this
 */
proto.lens.TextLayout.Paragraph.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.TextLayout.Paragraph.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Line lines = 2;
 * @return {!Array<!proto.lens.TextLayout.Line>}
 */
proto.lens.TextLayout.Paragraph.prototype.getLinesList = function() {
  return /** @type{!Array<!proto.lens.TextLayout.Line>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lens.TextLayout.Line, 2));
};


/**
 * @param {!Array<!proto.lens.TextLayout.Line>} value
 * @return {!proto.lens.TextLayout.Paragraph} returns this
*/
proto.lens.TextLayout.Paragraph.prototype.setLinesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.lens.TextLayout.Line=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.TextLayout.Line}
 */
proto.lens.TextLayout.Paragraph.prototype.addLines = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.lens.TextLayout.Line, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.TextLayout.Paragraph} returns this
 */
proto.lens.TextLayout.Paragraph.prototype.clearLinesList = function() {
  return this.setLinesList([]);
};


/**
 * optional Geometry geometry = 3;
 * @return {?proto.lens.Geometry}
 */
proto.lens.TextLayout.Paragraph.prototype.getGeometry = function() {
  return /** @type{?proto.lens.Geometry} */ (
    jspb.Message.getWrapperField(this, lens_overlay_geometry_pb.Geometry, 3));
};


/**
 * @param {?proto.lens.Geometry|undefined} value
 * @return {!proto.lens.TextLayout.Paragraph} returns this
*/
proto.lens.TextLayout.Paragraph.prototype.setGeometry = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.TextLayout.Paragraph} returns this
 */
proto.lens.TextLayout.Paragraph.prototype.clearGeometry = function() {
  return this.setGeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.TextLayout.Paragraph.prototype.hasGeometry = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional WritingDirection writing_direction = 4;
 * @return {!proto.lens.WritingDirection}
 */
proto.lens.TextLayout.Paragraph.prototype.getWritingDirection = function() {
  return /** @type {!proto.lens.WritingDirection} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.lens.WritingDirection} value
 * @return {!proto.lens.TextLayout.Paragraph} returns this
 */
proto.lens.TextLayout.Paragraph.prototype.setWritingDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string content_language = 5;
 * @return {string}
 */
proto.lens.TextLayout.Paragraph.prototype.getContentLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.TextLayout.Paragraph} returns this
 */
proto.lens.TextLayout.Paragraph.prototype.setContentLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated Paragraph paragraphs = 1;
 * @return {!Array<!proto.lens.TextLayout.Paragraph>}
 */
proto.lens.TextLayout.prototype.getParagraphsList = function() {
  return /** @type{!Array<!proto.lens.TextLayout.Paragraph>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lens.TextLayout.Paragraph, 1));
};


/**
 * @param {!Array<!proto.lens.TextLayout.Paragraph>} value
 * @return {!proto.lens.TextLayout} returns this
*/
proto.lens.TextLayout.prototype.setParagraphsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.lens.TextLayout.Paragraph=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.TextLayout.Paragraph}
 */
proto.lens.TextLayout.prototype.addParagraphs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.lens.TextLayout.Paragraph, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.TextLayout} returns this
 */
proto.lens.TextLayout.prototype.clearParagraphsList = function() {
  return this.setParagraphsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TextEntityIdentifier.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TextEntityIdentifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TextEntityIdentifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextEntityIdentifier.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TextEntityIdentifier}
 */
proto.lens.TextEntityIdentifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TextEntityIdentifier;
  return proto.lens.TextEntityIdentifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TextEntityIdentifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TextEntityIdentifier}
 */
proto.lens.TextEntityIdentifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TextEntityIdentifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TextEntityIdentifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TextEntityIdentifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextEntityIdentifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.lens.TextEntityIdentifier.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.TextEntityIdentifier} returns this
 */
proto.lens.TextEntityIdentifier.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.lens.WritingDirection = {
  DEFAULT_WRITING_DIRECTION_LEFT_TO_RIGHT: 0,
  WRITING_DIRECTION_RIGHT_TO_LEFT: 1,
  WRITING_DIRECTION_TOP_TO_BOTTOM: 2
};

/**
 * @enum {number}
 */
proto.lens.Alignment = {
  DEFAULT_LEFT_ALIGNED: 0,
  RIGHT_ALIGNED: 1,
  CENTER_ALIGNED: 2
};

goog.object.extend(exports, proto.lens);
// source: lens_overlay_text_query.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.lens.TextQuery', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TextQuery = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.TextQuery, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TextQuery.displayName = 'proto.lens.TextQuery';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TextQuery.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TextQuery.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TextQuery} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextQuery.toObject = function(includeInstance, msg) {
  var f, obj = {
query: jspb.Message.getFieldWithDefault(msg, 1, ""),
isPrimary: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TextQuery}
 */
proto.lens.TextQuery.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TextQuery;
  return proto.lens.TextQuery.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TextQuery} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TextQuery}
 */
proto.lens.TextQuery.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsPrimary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TextQuery.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TextQuery.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TextQuery} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextQuery.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getQuery();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIsPrimary();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional string query = 1;
 * @return {string}
 */
proto.lens.TextQuery.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.TextQuery} returns this
 */
proto.lens.TextQuery.prototype.setQuery = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional bool is_primary = 2;
 * @return {boolean}
 */
proto.lens.TextQuery.prototype.getIsPrimary = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lens.TextQuery} returns this
 */
proto.lens.TextQuery.prototype.setIsPrimary = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_translate_stickiness_signals.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.lens.TranslateStickinessSignals', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TranslateStickinessSignals = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.TranslateStickinessSignals, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TranslateStickinessSignals.displayName = 'proto.lens.TranslateStickinessSignals';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TranslateStickinessSignals.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TranslateStickinessSignals.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TranslateStickinessSignals} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslateStickinessSignals.toObject = function(includeInstance, msg) {
  var f, obj = {
translateSuppressEchoForSticky: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TranslateStickinessSignals}
 */
proto.lens.TranslateStickinessSignals.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TranslateStickinessSignals;
  return proto.lens.TranslateStickinessSignals.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TranslateStickinessSignals} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TranslateStickinessSignals}
 */
proto.lens.TranslateStickinessSignals.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setTranslateSuppressEchoForSticky(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TranslateStickinessSignals.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TranslateStickinessSignals.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TranslateStickinessSignals} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslateStickinessSignals.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTranslateSuppressEchoForSticky();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool translate_suppress_echo_for_sticky = 1;
 * @return {boolean}
 */
proto.lens.TranslateStickinessSignals.prototype.getTranslateSuppressEchoForSticky = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lens.TranslateStickinessSignals} returns this
 */
proto.lens.TranslateStickinessSignals.prototype.setTranslateSuppressEchoForSticky = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_video_context_input_params.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.lens.LensOverlayVideoContextInputParams', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayVideoContextInputParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayVideoContextInputParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayVideoContextInputParams.displayName = 'proto.lens.LensOverlayVideoContextInputParams';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayVideoContextInputParams.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayVideoContextInputParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayVideoContextInputParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayVideoContextInputParams.toObject = function(includeInstance, msg) {
  var f, obj = {
url: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayVideoContextInputParams}
 */
proto.lens.LensOverlayVideoContextInputParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayVideoContextInputParams;
  return proto.lens.LensOverlayVideoContextInputParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayVideoContextInputParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayVideoContextInputParams}
 */
proto.lens.LensOverlayVideoContextInputParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayVideoContextInputParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayVideoContextInputParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayVideoContextInputParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayVideoContextInputParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string url = 1;
 * @return {string}
 */
proto.lens.LensOverlayVideoContextInputParams.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.LensOverlayVideoContextInputParams} returns this
 */
proto.lens.LensOverlayVideoContextInputParams.prototype.setUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_video_params.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_video_context_input_params_pb = require('./lens_overlay_video_context_input_params_pb.cjs');
goog.object.extend(proto, lens_overlay_video_context_input_params_pb);
goog.exportSymbol('proto.lens.LensOverlayVideoParams', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayVideoParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayVideoParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayVideoParams.displayName = 'proto.lens.LensOverlayVideoParams';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayVideoParams.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayVideoParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayVideoParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayVideoParams.toObject = function(includeInstance, msg) {
  var f, obj = {
videoContextInputParams: (f = msg.getVideoContextInputParams()) && lens_overlay_video_context_input_params_pb.LensOverlayVideoContextInputParams.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayVideoParams}
 */
proto.lens.LensOverlayVideoParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayVideoParams;
  return proto.lens.LensOverlayVideoParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayVideoParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayVideoParams}
 */
proto.lens.LensOverlayVideoParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new lens_overlay_video_context_input_params_pb.LensOverlayVideoContextInputParams;
      reader.readMessage(value,lens_overlay_video_context_input_params_pb.LensOverlayVideoContextInputParams.deserializeBinaryFromReader);
      msg.setVideoContextInputParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayVideoParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayVideoParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayVideoParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayVideoParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVideoContextInputParams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      lens_overlay_video_context_input_params_pb.LensOverlayVideoContextInputParams.serializeBinaryToWriter
    );
  }
};


/**
 * optional LensOverlayVideoContextInputParams video_context_input_params = 1;
 * @return {?proto.lens.LensOverlayVideoContextInputParams}
 */
proto.lens.LensOverlayVideoParams.prototype.getVideoContextInputParams = function() {
  return /** @type{?proto.lens.LensOverlayVideoContextInputParams} */ (
    jspb.Message.getWrapperField(this, lens_overlay_video_context_input_params_pb.LensOverlayVideoContextInputParams, 1));
};


/**
 * @param {?proto.lens.LensOverlayVideoContextInputParams|undefined} value
 * @return {!proto.lens.LensOverlayVideoParams} returns this
*/
proto.lens.LensOverlayVideoParams.prototype.setVideoContextInputParams = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayVideoParams} returns this
 */
proto.lens.LensOverlayVideoParams.prototype.clearVideoContextInputParams = function() {
  return this.setVideoContextInputParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayVideoParams.prototype.hasVideoContextInputParams = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_visual_search_interaction_data.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_geometry_pb = require('./lens_overlay_geometry_pb.cjs');
goog.object.extend(proto, lens_overlay_geometry_pb);
var lens_overlay_interaction_request_metadata_pb = require('./lens_overlay_interaction_request_metadata_pb.cjs');
goog.object.extend(proto, lens_overlay_interaction_request_metadata_pb);
var lens_overlay_visual_search_interaction_log_data_pb = require('./lens_overlay_visual_search_interaction_log_data_pb.cjs');
goog.object.extend(proto, lens_overlay_visual_search_interaction_log_data_pb);
goog.exportSymbol('proto.lens.LensOverlayVisualSearchInteractionData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayVisualSearchInteractionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayVisualSearchInteractionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayVisualSearchInteractionData.displayName = 'proto.lens.LensOverlayVisualSearchInteractionData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayVisualSearchInteractionData.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayVisualSearchInteractionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayVisualSearchInteractionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayVisualSearchInteractionData.toObject = function(includeInstance, msg) {
  var f, obj = {
interactionType: jspb.Message.getFieldWithDefault(msg, 1, 0),
zoomedCrop: (f = msg.getZoomedCrop()) && lens_overlay_geometry_pb.ZoomedCrop.toObject(includeInstance, f),
objectId: jspb.Message.getFieldWithDefault(msg, 3, ""),
logData: (f = msg.getLogData()) && lens_overlay_visual_search_interaction_log_data_pb.LensOverlayVisualSearchInteractionLogData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayVisualSearchInteractionData}
 */
proto.lens.LensOverlayVisualSearchInteractionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayVisualSearchInteractionData;
  return proto.lens.LensOverlayVisualSearchInteractionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayVisualSearchInteractionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayVisualSearchInteractionData}
 */
proto.lens.LensOverlayVisualSearchInteractionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lens.LensOverlayInteractionRequestMetadata.Type} */ (reader.readEnum());
      msg.setInteractionType(value);
      break;
    case 7:
      var value = new lens_overlay_geometry_pb.ZoomedCrop;
      reader.readMessage(value,lens_overlay_geometry_pb.ZoomedCrop.deserializeBinaryFromReader);
      msg.setZoomedCrop(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setObjectId(value);
      break;
    case 5:
      var value = new lens_overlay_visual_search_interaction_log_data_pb.LensOverlayVisualSearchInteractionLogData;
      reader.readMessage(value,lens_overlay_visual_search_interaction_log_data_pb.LensOverlayVisualSearchInteractionLogData.deserializeBinaryFromReader);
      msg.setLogData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayVisualSearchInteractionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayVisualSearchInteractionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayVisualSearchInteractionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayVisualSearchInteractionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInteractionType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getZoomedCrop();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      lens_overlay_geometry_pb.ZoomedCrop.serializeBinaryToWriter
    );
  }
  f = message.getObjectId();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLogData();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      lens_overlay_visual_search_interaction_log_data_pb.LensOverlayVisualSearchInteractionLogData.serializeBinaryToWriter
    );
  }
};


/**
 * optional LensOverlayInteractionRequestMetadata.Type interaction_type = 1;
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.Type}
 */
proto.lens.LensOverlayVisualSearchInteractionData.prototype.getInteractionType = function() {
  return /** @type {!proto.lens.LensOverlayInteractionRequestMetadata.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.Type} value
 * @return {!proto.lens.LensOverlayVisualSearchInteractionData} returns this
 */
proto.lens.LensOverlayVisualSearchInteractionData.prototype.setInteractionType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ZoomedCrop zoomed_crop = 7;
 * @return {?proto.lens.ZoomedCrop}
 */
proto.lens.LensOverlayVisualSearchInteractionData.prototype.getZoomedCrop = function() {
  return /** @type{?proto.lens.ZoomedCrop} */ (
    jspb.Message.getWrapperField(this, lens_overlay_geometry_pb.ZoomedCrop, 7));
};


/**
 * @param {?proto.lens.ZoomedCrop|undefined} value
 * @return {!proto.lens.LensOverlayVisualSearchInteractionData} returns this
*/
proto.lens.LensOverlayVisualSearchInteractionData.prototype.setZoomedCrop = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayVisualSearchInteractionData} returns this
 */
proto.lens.LensOverlayVisualSearchInteractionData.prototype.clearZoomedCrop = function() {
  return this.setZoomedCrop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayVisualSearchInteractionData.prototype.hasZoomedCrop = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string object_id = 3;
 * @return {string}
 */
proto.lens.LensOverlayVisualSearchInteractionData.prototype.getObjectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.LensOverlayVisualSearchInteractionData} returns this
 */
proto.lens.LensOverlayVisualSearchInteractionData.prototype.setObjectId = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional LensOverlayVisualSearchInteractionLogData log_data = 5;
 * @return {?proto.lens.LensOverlayVisualSearchInteractionLogData}
 */
proto.lens.LensOverlayVisualSearchInteractionData.prototype.getLogData = function() {
  return /** @type{?proto.lens.LensOverlayVisualSearchInteractionLogData} */ (
    jspb.Message.getWrapperField(this, lens_overlay_visual_search_interaction_log_data_pb.LensOverlayVisualSearchInteractionLogData, 5));
};


/**
 * @param {?proto.lens.LensOverlayVisualSearchInteractionLogData|undefined} value
 * @return {!proto.lens.LensOverlayVisualSearchInteractionData} returns this
*/
proto.lens.LensOverlayVisualSearchInteractionData.prototype.setLogData = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayVisualSearchInteractionData} returns this
 */
proto.lens.LensOverlayVisualSearchInteractionData.prototype.clearLogData = function() {
  return this.setLogData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayVisualSearchInteractionData.prototype.hasLogData = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto.lens);
// source: lens_overlay_visual_search_interaction_log_data.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_client_platform_pb = require('./lens_overlay_client_platform_pb.cjs');
goog.object.extend(proto, lens_overlay_client_platform_pb);
var lens_overlay_filters_pb = require('./lens_overlay_filters_pb.cjs');
goog.object.extend(proto, lens_overlay_filters_pb);
var lens_overlay_selection_type_pb = require('./lens_overlay_selection_type_pb.cjs');
goog.object.extend(proto, lens_overlay_selection_type_pb);
goog.exportSymbol('proto.lens.FilterData', null, global);
goog.exportSymbol('proto.lens.LensOverlayVisualSearchInteractionLogData', null, global);
goog.exportSymbol('proto.lens.UserSelectionData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayVisualSearchInteractionLogData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayVisualSearchInteractionLogData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayVisualSearchInteractionLogData.displayName = 'proto.lens.LensOverlayVisualSearchInteractionLogData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.FilterData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.FilterData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.FilterData.displayName = 'proto.lens.FilterData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.UserSelectionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.UserSelectionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.UserSelectionData.displayName = 'proto.lens.UserSelectionData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayVisualSearchInteractionLogData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayVisualSearchInteractionLogData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.toObject = function(includeInstance, msg) {
  var f, obj = {
filterData: (f = msg.getFilterData()) && proto.lens.FilterData.toObject(includeInstance, f),
userSelectionData: (f = msg.getUserSelectionData()) && proto.lens.UserSelectionData.toObject(includeInstance, f),
isParentQuery: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
clientPlatform: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayVisualSearchInteractionLogData}
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayVisualSearchInteractionLogData;
  return proto.lens.LensOverlayVisualSearchInteractionLogData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayVisualSearchInteractionLogData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayVisualSearchInteractionLogData}
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.FilterData;
      reader.readMessage(value,proto.lens.FilterData.deserializeBinaryFromReader);
      msg.setFilterData(value);
      break;
    case 2:
      var value = new proto.lens.UserSelectionData;
      reader.readMessage(value,proto.lens.UserSelectionData.deserializeBinaryFromReader);
      msg.setUserSelectionData(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsParentQuery(value);
      break;
    case 4:
      var value = /** @type {!proto.lens.ClientPlatform} */ (reader.readEnum());
      msg.setClientPlatform(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayVisualSearchInteractionLogData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayVisualSearchInteractionLogData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilterData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.FilterData.serializeBinaryToWriter
    );
  }
  f = message.getUserSelectionData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lens.UserSelectionData.serializeBinaryToWriter
    );
  }
  f = message.getIsParentQuery();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getClientPlatform();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional FilterData filter_data = 1;
 * @return {?proto.lens.FilterData}
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.getFilterData = function() {
  return /** @type{?proto.lens.FilterData} */ (
    jspb.Message.getWrapperField(this, proto.lens.FilterData, 1));
};


/**
 * @param {?proto.lens.FilterData|undefined} value
 * @return {!proto.lens.LensOverlayVisualSearchInteractionLogData} returns this
*/
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.setFilterData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayVisualSearchInteractionLogData} returns this
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.clearFilterData = function() {
  return this.setFilterData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.hasFilterData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UserSelectionData user_selection_data = 2;
 * @return {?proto.lens.UserSelectionData}
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.getUserSelectionData = function() {
  return /** @type{?proto.lens.UserSelectionData} */ (
    jspb.Message.getWrapperField(this, proto.lens.UserSelectionData, 2));
};


/**
 * @param {?proto.lens.UserSelectionData|undefined} value
 * @return {!proto.lens.LensOverlayVisualSearchInteractionLogData} returns this
*/
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.setUserSelectionData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayVisualSearchInteractionLogData} returns this
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.clearUserSelectionData = function() {
  return this.setUserSelectionData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.hasUserSelectionData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool is_parent_query = 3;
 * @return {boolean}
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.getIsParentQuery = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lens.LensOverlayVisualSearchInteractionLogData} returns this
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.setIsParentQuery = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional ClientPlatform client_platform = 4;
 * @return {!proto.lens.ClientPlatform}
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.getClientPlatform = function() {
  return /** @type {!proto.lens.ClientPlatform} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.lens.ClientPlatform} value
 * @return {!proto.lens.LensOverlayVisualSearchInteractionLogData} returns this
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.setClientPlatform = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.FilterData.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.FilterData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.FilterData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.FilterData.toObject = function(includeInstance, msg) {
  var f, obj = {
filterType: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.FilterData}
 */
proto.lens.FilterData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.FilterData;
  return proto.lens.FilterData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.FilterData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.FilterData}
 */
proto.lens.FilterData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lens.LensOverlayFilterType} */ (reader.readEnum());
      msg.setFilterType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.FilterData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.FilterData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.FilterData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.FilterData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilterType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional LensOverlayFilterType filter_type = 1;
 * @return {!proto.lens.LensOverlayFilterType}
 */
proto.lens.FilterData.prototype.getFilterType = function() {
  return /** @type {!proto.lens.LensOverlayFilterType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lens.LensOverlayFilterType} value
 * @return {!proto.lens.FilterData} returns this
 */
proto.lens.FilterData.prototype.setFilterType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.UserSelectionData.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.UserSelectionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.UserSelectionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.UserSelectionData.toObject = function(includeInstance, msg) {
  var f, obj = {
selectionType: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.UserSelectionData}
 */
proto.lens.UserSelectionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.UserSelectionData;
  return proto.lens.UserSelectionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.UserSelectionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.UserSelectionData}
 */
proto.lens.UserSelectionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lens.LensOverlaySelectionType} */ (reader.readEnum());
      msg.setSelectionType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.UserSelectionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.UserSelectionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.UserSelectionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.UserSelectionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelectionType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional LensOverlaySelectionType selection_type = 1;
 * @return {!proto.lens.LensOverlaySelectionType}
 */
proto.lens.UserSelectionData.prototype.getSelectionType = function() {
  return /** @type {!proto.lens.LensOverlaySelectionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lens.LensOverlaySelectionType} value
 * @return {!proto.lens.UserSelectionData} returns this
 */
proto.lens.UserSelectionData.prototype.setSelectionType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


goog.object.extend(exports, proto.lens);
