// source: lens_overlay_deep_gleam_data.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_text_pb = require('./lens_overlay_text_pb.cjs');
goog.object.extend(proto, lens_overlay_text_pb);
goog.exportSymbol('proto.lens.DeepGleamData', null, global);
goog.exportSymbol('proto.lens.DeepGleamData.RenderingOneofCase', null, global);
goog.exportSymbol('proto.lens.TranslationData', null, global);
goog.exportSymbol('proto.lens.TranslationData.BackgroundImageData', null, global);
goog.exportSymbol('proto.lens.TranslationData.BackgroundImageData.FileFormat', null, global);
goog.exportSymbol('proto.lens.TranslationData.Line', null, global);
goog.exportSymbol('proto.lens.TranslationData.Line.Word', null, global);
goog.exportSymbol('proto.lens.TranslationData.Status', null, global);
goog.exportSymbol('proto.lens.TranslationData.Status.Code', null, global);
goog.exportSymbol('proto.lens.TranslationData.TextStyle', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.DeepGleamData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.DeepGleamData.repeatedFields_, proto.lens.DeepGleamData.oneofGroups_);
};
goog.inherits(proto.lens.DeepGleamData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.DeepGleamData.displayName = 'proto.lens.DeepGleamData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TranslationData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.TranslationData.repeatedFields_, null);
};
goog.inherits(proto.lens.TranslationData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TranslationData.displayName = 'proto.lens.TranslationData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TranslationData.Status = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.TranslationData.Status, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TranslationData.Status.displayName = 'proto.lens.TranslationData.Status';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TranslationData.TextStyle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.TranslationData.TextStyle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TranslationData.TextStyle.displayName = 'proto.lens.TranslationData.TextStyle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TranslationData.BackgroundImageData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.TranslationData.BackgroundImageData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TranslationData.BackgroundImageData.displayName = 'proto.lens.TranslationData.BackgroundImageData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TranslationData.Line = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.TranslationData.Line.repeatedFields_, null);
};
goog.inherits(proto.lens.TranslationData.Line, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TranslationData.Line.displayName = 'proto.lens.TranslationData.Line';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TranslationData.Line.Word = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.TranslationData.Line.Word, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TranslationData.Line.Word.displayName = 'proto.lens.TranslationData.Line.Word';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.DeepGleamData.repeatedFields_ = [11];

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.lens.DeepGleamData.oneofGroups_ = [[10]];

/**
 * @enum {number}
 */
proto.lens.DeepGleamData.RenderingOneofCase = {
  RENDERING_ONEOF_NOT_SET: 0,
  TRANSLATION: 10
};

/**
 * @return {proto.lens.DeepGleamData.RenderingOneofCase}
 */
proto.lens.DeepGleamData.prototype.getRenderingOneofCase = function() {
  return /** @type {proto.lens.DeepGleamData.RenderingOneofCase} */(jspb.Message.computeOneofCase(this, proto.lens.DeepGleamData.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.DeepGleamData.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.DeepGleamData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.DeepGleamData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.DeepGleamData.toObject = function(includeInstance, msg) {
  var f, obj = {
translation: (f = msg.getTranslation()) && proto.lens.TranslationData.toObject(includeInstance, f),
visualObjectIdList: (f = jspb.Message.getRepeatedField(msg, 11)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.DeepGleamData}
 */
proto.lens.DeepGleamData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.DeepGleamData;
  return proto.lens.DeepGleamData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.DeepGleamData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.DeepGleamData}
 */
proto.lens.DeepGleamData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 10:
      var value = new proto.lens.TranslationData;
      reader.readMessage(value,proto.lens.TranslationData.deserializeBinaryFromReader);
      msg.setTranslation(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.addVisualObjectId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.DeepGleamData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.DeepGleamData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.DeepGleamData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.DeepGleamData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTranslation();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.lens.TranslationData.serializeBinaryToWriter
    );
  }
  f = message.getVisualObjectIdList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      11,
      f
    );
  }
};


/**
 * optional TranslationData translation = 10;
 * @return {?proto.lens.TranslationData}
 */
proto.lens.DeepGleamData.prototype.getTranslation = function() {
  return /** @type{?proto.lens.TranslationData} */ (
    jspb.Message.getWrapperField(this, proto.lens.TranslationData, 10));
};


/**
 * @param {?proto.lens.TranslationData|undefined} value
 * @return {!proto.lens.DeepGleamData} returns this
*/
proto.lens.DeepGleamData.prototype.setTranslation = function(value) {
  return jspb.Message.setOneofWrapperField(this, 10, proto.lens.DeepGleamData.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.DeepGleamData} returns this
 */
proto.lens.DeepGleamData.prototype.clearTranslation = function() {
  return this.setTranslation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.DeepGleamData.prototype.hasTranslation = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * repeated string visual_object_id = 11;
 * @return {!Array<string>}
 */
proto.lens.DeepGleamData.prototype.getVisualObjectIdList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 11));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.lens.DeepGleamData} returns this
 */
proto.lens.DeepGleamData.prototype.setVisualObjectIdList = function(value) {
  return jspb.Message.setField(this, 11, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.lens.DeepGleamData} returns this
 */
proto.lens.DeepGleamData.prototype.addVisualObjectId = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 11, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.DeepGleamData} returns this
 */
proto.lens.DeepGleamData.prototype.clearVisualObjectIdList = function() {
  return this.setVisualObjectIdList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.TranslationData.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TranslationData.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TranslationData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TranslationData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.toObject = function(includeInstance, msg) {
  var f, obj = {
status: (f = msg.getStatus()) && proto.lens.TranslationData.Status.toObject(includeInstance, f),
targetLanguage: jspb.Message.getFieldWithDefault(msg, 2, ""),
sourceLanguage: jspb.Message.getFieldWithDefault(msg, 3, ""),
translation: jspb.Message.getFieldWithDefault(msg, 4, ""),
lineList: jspb.Message.toObjectList(msg.getLineList(),
    proto.lens.TranslationData.Line.toObject, includeInstance),
writingDirection: jspb.Message.getFieldWithDefault(msg, 7, 0),
alignment: jspb.Message.getFieldWithDefault(msg, 8, 0),
justified: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TranslationData}
 */
proto.lens.TranslationData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TranslationData;
  return proto.lens.TranslationData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TranslationData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TranslationData}
 */
proto.lens.TranslationData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.TranslationData.Status;
      reader.readMessage(value,proto.lens.TranslationData.Status.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetLanguage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceLanguage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTranslation(value);
      break;
    case 5:
      var value = new proto.lens.TranslationData.Line;
      reader.readMessage(value,proto.lens.TranslationData.Line.deserializeBinaryFromReader);
      msg.addLine(value);
      break;
    case 7:
      var value = /** @type {!proto.lens.WritingDirection} */ (reader.readEnum());
      msg.setWritingDirection(value);
      break;
    case 8:
      var value = /** @type {!proto.lens.Alignment} */ (reader.readEnum());
      msg.setAlignment(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setJustified(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TranslationData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TranslationData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TranslationData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.TranslationData.Status.serializeBinaryToWriter
    );
  }
  f = message.getTargetLanguage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSourceLanguage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTranslation();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLineList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.lens.TranslationData.Line.serializeBinaryToWriter
    );
  }
  f = message.getWritingDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = message.getAlignment();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getJustified();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TranslationData.Status.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TranslationData.Status.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TranslationData.Status} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.Status.toObject = function(includeInstance, msg) {
  var f, obj = {
code: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TranslationData.Status}
 */
proto.lens.TranslationData.Status.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TranslationData.Status;
  return proto.lens.TranslationData.Status.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TranslationData.Status} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TranslationData.Status}
 */
proto.lens.TranslationData.Status.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lens.TranslationData.Status.Code} */ (reader.readEnum());
      msg.setCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TranslationData.Status.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TranslationData.Status.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TranslationData.Status} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.Status.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.lens.TranslationData.Status.Code = {
  UNKNOWN: 0,
  SUCCESS: 1,
  SERVER_ERROR: 2,
  UNSUPPORTED_LANGUAGE_PAIR: 3,
  SAME_LANGUAGE: 4,
  UNKNOWN_SOURCE_LANGUAGE: 5,
  INVALID_REQUEST: 6,
  DEADLINE_EXCEEDED: 7,
  EMPTY_TRANSLATION: 8,
  NO_OP_TRANSLATION: 9
};

/**
 * optional Code code = 1;
 * @return {!proto.lens.TranslationData.Status.Code}
 */
proto.lens.TranslationData.Status.prototype.getCode = function() {
  return /** @type {!proto.lens.TranslationData.Status.Code} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lens.TranslationData.Status.Code} value
 * @return {!proto.lens.TranslationData.Status} returns this
 */
proto.lens.TranslationData.Status.prototype.setCode = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TranslationData.TextStyle.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TranslationData.TextStyle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TranslationData.TextStyle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.TextStyle.toObject = function(includeInstance, msg) {
  var f, obj = {
textColor: jspb.Message.getFieldWithDefault(msg, 1, 0),
backgroundPrimaryColor: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TranslationData.TextStyle}
 */
proto.lens.TranslationData.TextStyle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TranslationData.TextStyle;
  return proto.lens.TranslationData.TextStyle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TranslationData.TextStyle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TranslationData.TextStyle}
 */
proto.lens.TranslationData.TextStyle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTextColor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBackgroundPrimaryColor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TranslationData.TextStyle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TranslationData.TextStyle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TranslationData.TextStyle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.TextStyle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTextColor();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getBackgroundPrimaryColor();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 text_color = 1;
 * @return {number}
 */
proto.lens.TranslationData.TextStyle.prototype.getTextColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.TranslationData.TextStyle} returns this
 */
proto.lens.TranslationData.TextStyle.prototype.setTextColor = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 background_primary_color = 2;
 * @return {number}
 */
proto.lens.TranslationData.TextStyle.prototype.getBackgroundPrimaryColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.TranslationData.TextStyle} returns this
 */
proto.lens.TranslationData.TextStyle.prototype.setBackgroundPrimaryColor = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TranslationData.BackgroundImageData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TranslationData.BackgroundImageData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.BackgroundImageData.toObject = function(includeInstance, msg) {
  var f, obj = {
backgroundImage: msg.getBackgroundImage_asB64(),
imageWidth: jspb.Message.getFieldWithDefault(msg, 2, 0),
imageHeight: jspb.Message.getFieldWithDefault(msg, 3, 0),
verticalPadding: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
horizontalPadding: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
fileFormat: jspb.Message.getFieldWithDefault(msg, 6, 0),
textMask: msg.getTextMask_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TranslationData.BackgroundImageData}
 */
proto.lens.TranslationData.BackgroundImageData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TranslationData.BackgroundImageData;
  return proto.lens.TranslationData.BackgroundImageData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TranslationData.BackgroundImageData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TranslationData.BackgroundImageData}
 */
proto.lens.TranslationData.BackgroundImageData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBackgroundImage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setImageWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setImageHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVerticalPadding(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHorizontalPadding(value);
      break;
    case 6:
      var value = /** @type {!proto.lens.TranslationData.BackgroundImageData.FileFormat} */ (reader.readEnum());
      msg.setFileFormat(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTextMask(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TranslationData.BackgroundImageData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TranslationData.BackgroundImageData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.BackgroundImageData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBackgroundImage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getImageWidth();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getImageHeight();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getVerticalPadding();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getHorizontalPadding();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getFileFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getTextMask_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.lens.TranslationData.BackgroundImageData.FileFormat = {
  UNKNOWN: 0,
  RAW_BYTES_RGBA: 1,
  PNG_RGBA: 2,
  WEBP_RGBA: 3,
  JPEG_RGB_PNG_MASK: 4
};

/**
 * optional bytes background_image = 1;
 * @return {!(string|Uint8Array)}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.getBackgroundImage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes background_image = 1;
 * This is a type-conversion wrapper around `getBackgroundImage()`
 * @return {string}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.getBackgroundImage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBackgroundImage()));
};


/**
 * optional bytes background_image = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBackgroundImage()`
 * @return {!Uint8Array}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.getBackgroundImage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBackgroundImage()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lens.TranslationData.BackgroundImageData} returns this
 */
proto.lens.TranslationData.BackgroundImageData.prototype.setBackgroundImage = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int32 image_width = 2;
 * @return {number}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.getImageWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.TranslationData.BackgroundImageData} returns this
 */
proto.lens.TranslationData.BackgroundImageData.prototype.setImageWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 image_height = 3;
 * @return {number}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.getImageHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.TranslationData.BackgroundImageData} returns this
 */
proto.lens.TranslationData.BackgroundImageData.prototype.setImageHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional float vertical_padding = 4;
 * @return {number}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.getVerticalPadding = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.lens.TranslationData.BackgroundImageData} returns this
 */
proto.lens.TranslationData.BackgroundImageData.prototype.setVerticalPadding = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float horizontal_padding = 5;
 * @return {number}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.getHorizontalPadding = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.lens.TranslationData.BackgroundImageData} returns this
 */
proto.lens.TranslationData.BackgroundImageData.prototype.setHorizontalPadding = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional FileFormat file_format = 6;
 * @return {!proto.lens.TranslationData.BackgroundImageData.FileFormat}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.getFileFormat = function() {
  return /** @type {!proto.lens.TranslationData.BackgroundImageData.FileFormat} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.lens.TranslationData.BackgroundImageData.FileFormat} value
 * @return {!proto.lens.TranslationData.BackgroundImageData} returns this
 */
proto.lens.TranslationData.BackgroundImageData.prototype.setFileFormat = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional bytes text_mask = 7;
 * @return {!(string|Uint8Array)}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.getTextMask = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes text_mask = 7;
 * This is a type-conversion wrapper around `getTextMask()`
 * @return {string}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.getTextMask_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTextMask()));
};


/**
 * optional bytes text_mask = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTextMask()`
 * @return {!Uint8Array}
 */
proto.lens.TranslationData.BackgroundImageData.prototype.getTextMask_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTextMask()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lens.TranslationData.BackgroundImageData} returns this
 */
proto.lens.TranslationData.BackgroundImageData.prototype.setTextMask = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.TranslationData.Line.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TranslationData.Line.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TranslationData.Line.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TranslationData.Line} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.Line.toObject = function(includeInstance, msg) {
  var f, obj = {
start: jspb.Message.getFieldWithDefault(msg, 1, 0),
end: jspb.Message.getFieldWithDefault(msg, 2, 0),
style: (f = msg.getStyle()) && proto.lens.TranslationData.TextStyle.toObject(includeInstance, f),
wordList: jspb.Message.toObjectList(msg.getWordList(),
    proto.lens.TranslationData.Line.Word.toObject, includeInstance),
backgroundImageData: (f = msg.getBackgroundImageData()) && proto.lens.TranslationData.BackgroundImageData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TranslationData.Line}
 */
proto.lens.TranslationData.Line.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TranslationData.Line;
  return proto.lens.TranslationData.Line.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TranslationData.Line} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TranslationData.Line}
 */
proto.lens.TranslationData.Line.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStart(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEnd(value);
      break;
    case 3:
      var value = new proto.lens.TranslationData.TextStyle;
      reader.readMessage(value,proto.lens.TranslationData.TextStyle.deserializeBinaryFromReader);
      msg.setStyle(value);
      break;
    case 5:
      var value = new proto.lens.TranslationData.Line.Word;
      reader.readMessage(value,proto.lens.TranslationData.Line.Word.deserializeBinaryFromReader);
      msg.addWord(value);
      break;
    case 9:
      var value = new proto.lens.TranslationData.BackgroundImageData;
      reader.readMessage(value,proto.lens.TranslationData.BackgroundImageData.deserializeBinaryFromReader);
      msg.setBackgroundImageData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TranslationData.Line.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TranslationData.Line.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TranslationData.Line} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.Line.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEnd();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getStyle();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lens.TranslationData.TextStyle.serializeBinaryToWriter
    );
  }
  f = message.getWordList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.lens.TranslationData.Line.Word.serializeBinaryToWriter
    );
  }
  f = message.getBackgroundImageData();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.lens.TranslationData.BackgroundImageData.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TranslationData.Line.Word.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TranslationData.Line.Word.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TranslationData.Line.Word} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.Line.Word.toObject = function(includeInstance, msg) {
  var f, obj = {
start: jspb.Message.getFieldWithDefault(msg, 1, 0),
end: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TranslationData.Line.Word}
 */
proto.lens.TranslationData.Line.Word.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TranslationData.Line.Word;
  return proto.lens.TranslationData.Line.Word.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TranslationData.Line.Word} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TranslationData.Line.Word}
 */
proto.lens.TranslationData.Line.Word.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStart(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TranslationData.Line.Word.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TranslationData.Line.Word.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TranslationData.Line.Word} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TranslationData.Line.Word.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStart();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getEnd();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 start = 1;
 * @return {number}
 */
proto.lens.TranslationData.Line.Word.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.TranslationData.Line.Word} returns this
 */
proto.lens.TranslationData.Line.Word.prototype.setStart = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 end = 2;
 * @return {number}
 */
proto.lens.TranslationData.Line.Word.prototype.getEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.TranslationData.Line.Word} returns this
 */
proto.lens.TranslationData.Line.Word.prototype.setEnd = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 start = 1;
 * @return {number}
 */
proto.lens.TranslationData.Line.prototype.getStart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.TranslationData.Line} returns this
 */
proto.lens.TranslationData.Line.prototype.setStart = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 end = 2;
 * @return {number}
 */
proto.lens.TranslationData.Line.prototype.getEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.TranslationData.Line} returns this
 */
proto.lens.TranslationData.Line.prototype.setEnd = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional TextStyle style = 3;
 * @return {?proto.lens.TranslationData.TextStyle}
 */
proto.lens.TranslationData.Line.prototype.getStyle = function() {
  return /** @type{?proto.lens.TranslationData.TextStyle} */ (
    jspb.Message.getWrapperField(this, proto.lens.TranslationData.TextStyle, 3));
};


/**
 * @param {?proto.lens.TranslationData.TextStyle|undefined} value
 * @return {!proto.lens.TranslationData.Line} returns this
*/
proto.lens.TranslationData.Line.prototype.setStyle = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.TranslationData.Line} returns this
 */
proto.lens.TranslationData.Line.prototype.clearStyle = function() {
  return this.setStyle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.TranslationData.Line.prototype.hasStyle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated Word word = 5;
 * @return {!Array<!proto.lens.TranslationData.Line.Word>}
 */
proto.lens.TranslationData.Line.prototype.getWordList = function() {
  return /** @type{!Array<!proto.lens.TranslationData.Line.Word>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lens.TranslationData.Line.Word, 5));
};


/**
 * @param {!Array<!proto.lens.TranslationData.Line.Word>} value
 * @return {!proto.lens.TranslationData.Line} returns this
*/
proto.lens.TranslationData.Line.prototype.setWordList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.lens.TranslationData.Line.Word=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.TranslationData.Line.Word}
 */
proto.lens.TranslationData.Line.prototype.addWord = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.lens.TranslationData.Line.Word, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.TranslationData.Line} returns this
 */
proto.lens.TranslationData.Line.prototype.clearWordList = function() {
  return this.setWordList([]);
};


/**
 * optional BackgroundImageData background_image_data = 9;
 * @return {?proto.lens.TranslationData.BackgroundImageData}
 */
proto.lens.TranslationData.Line.prototype.getBackgroundImageData = function() {
  return /** @type{?proto.lens.TranslationData.BackgroundImageData} */ (
    jspb.Message.getWrapperField(this, proto.lens.TranslationData.BackgroundImageData, 9));
};


/**
 * @param {?proto.lens.TranslationData.BackgroundImageData|undefined} value
 * @return {!proto.lens.TranslationData.Line} returns this
*/
proto.lens.TranslationData.Line.prototype.setBackgroundImageData = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.TranslationData.Line} returns this
 */
proto.lens.TranslationData.Line.prototype.clearBackgroundImageData = function() {
  return this.setBackgroundImageData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.TranslationData.Line.prototype.hasBackgroundImageData = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Status status = 1;
 * @return {?proto.lens.TranslationData.Status}
 */
proto.lens.TranslationData.prototype.getStatus = function() {
  return /** @type{?proto.lens.TranslationData.Status} */ (
    jspb.Message.getWrapperField(this, proto.lens.TranslationData.Status, 1));
};


/**
 * @param {?proto.lens.TranslationData.Status|undefined} value
 * @return {!proto.lens.TranslationData} returns this
*/
proto.lens.TranslationData.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.TranslationData} returns this
 */
proto.lens.TranslationData.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.TranslationData.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string target_language = 2;
 * @return {string}
 */
proto.lens.TranslationData.prototype.getTargetLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.TranslationData} returns this
 */
proto.lens.TranslationData.prototype.setTargetLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string source_language = 3;
 * @return {string}
 */
proto.lens.TranslationData.prototype.getSourceLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.TranslationData} returns this
 */
proto.lens.TranslationData.prototype.setSourceLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string translation = 4;
 * @return {string}
 */
proto.lens.TranslationData.prototype.getTranslation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.TranslationData} returns this
 */
proto.lens.TranslationData.prototype.setTranslation = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated Line line = 5;
 * @return {!Array<!proto.lens.TranslationData.Line>}
 */
proto.lens.TranslationData.prototype.getLineList = function() {
  return /** @type{!Array<!proto.lens.TranslationData.Line>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lens.TranslationData.Line, 5));
};


/**
 * @param {!Array<!proto.lens.TranslationData.Line>} value
 * @return {!proto.lens.TranslationData} returns this
*/
proto.lens.TranslationData.prototype.setLineList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.lens.TranslationData.Line=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.TranslationData.Line}
 */
proto.lens.TranslationData.prototype.addLine = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.lens.TranslationData.Line, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.TranslationData} returns this
 */
proto.lens.TranslationData.prototype.clearLineList = function() {
  return this.setLineList([]);
};


/**
 * optional WritingDirection writing_direction = 7;
 * @return {!proto.lens.WritingDirection}
 */
proto.lens.TranslationData.prototype.getWritingDirection = function() {
  return /** @type {!proto.lens.WritingDirection} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {!proto.lens.WritingDirection} value
 * @return {!proto.lens.TranslationData} returns this
 */
proto.lens.TranslationData.prototype.setWritingDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 7, value);
};


/**
 * optional Alignment alignment = 8;
 * @return {!proto.lens.Alignment}
 */
proto.lens.TranslationData.prototype.getAlignment = function() {
  return /** @type {!proto.lens.Alignment} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.lens.Alignment} value
 * @return {!proto.lens.TranslationData} returns this
 */
proto.lens.TranslationData.prototype.setAlignment = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional bool justified = 9;
 * @return {boolean}
 */
proto.lens.TranslationData.prototype.getJustified = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lens.TranslationData} returns this
 */
proto.lens.TranslationData.prototype.setJustified = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


goog.object.extend(exports, proto.lens);
