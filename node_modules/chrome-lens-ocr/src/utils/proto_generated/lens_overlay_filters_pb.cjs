// source: lens_overlay_filters.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.lens.AppliedFilter', null, global);
goog.exportSymbol('proto.lens.AppliedFilter.FilterPayloadCase', null, global);
goog.exportSymbol('proto.lens.AppliedFilter.Translate', null, global);
goog.exportSymbol('proto.lens.AppliedFilters', null, global);
goog.exportSymbol('proto.lens.LensOverlayFilterType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.AppliedFilter = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.lens.AppliedFilter.oneofGroups_);
};
goog.inherits(proto.lens.AppliedFilter, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.AppliedFilter.displayName = 'proto.lens.AppliedFilter';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.AppliedFilter.Translate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.AppliedFilter.Translate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.AppliedFilter.Translate.displayName = 'proto.lens.AppliedFilter.Translate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.AppliedFilters = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.AppliedFilters.repeatedFields_, null);
};
goog.inherits(proto.lens.AppliedFilters, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.AppliedFilters.displayName = 'proto.lens.AppliedFilters';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.lens.AppliedFilter.oneofGroups_ = [[3]];

/**
 * @enum {number}
 */
proto.lens.AppliedFilter.FilterPayloadCase = {
  FILTER_PAYLOAD_NOT_SET: 0,
  TRANSLATE: 3
};

/**
 * @return {proto.lens.AppliedFilter.FilterPayloadCase}
 */
proto.lens.AppliedFilter.prototype.getFilterPayloadCase = function() {
  return /** @type {proto.lens.AppliedFilter.FilterPayloadCase} */(jspb.Message.computeOneofCase(this, proto.lens.AppliedFilter.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.AppliedFilter.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.AppliedFilter.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.AppliedFilter} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.AppliedFilter.toObject = function(includeInstance, msg) {
  var f, obj = {
filterType: jspb.Message.getFieldWithDefault(msg, 1, 0),
translate: (f = msg.getTranslate()) && proto.lens.AppliedFilter.Translate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.AppliedFilter}
 */
proto.lens.AppliedFilter.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.AppliedFilter;
  return proto.lens.AppliedFilter.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.AppliedFilter} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.AppliedFilter}
 */
proto.lens.AppliedFilter.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lens.LensOverlayFilterType} */ (reader.readEnum());
      msg.setFilterType(value);
      break;
    case 3:
      var value = new proto.lens.AppliedFilter.Translate;
      reader.readMessage(value,proto.lens.AppliedFilter.Translate.deserializeBinaryFromReader);
      msg.setTranslate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.AppliedFilter.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.AppliedFilter.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.AppliedFilter} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.AppliedFilter.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilterType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTranslate();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lens.AppliedFilter.Translate.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.AppliedFilter.Translate.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.AppliedFilter.Translate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.AppliedFilter.Translate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.AppliedFilter.Translate.toObject = function(includeInstance, msg) {
  var f, obj = {
targetLanguage: jspb.Message.getFieldWithDefault(msg, 1, ""),
sourceLanguage: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.AppliedFilter.Translate}
 */
proto.lens.AppliedFilter.Translate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.AppliedFilter.Translate;
  return proto.lens.AppliedFilter.Translate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.AppliedFilter.Translate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.AppliedFilter.Translate}
 */
proto.lens.AppliedFilter.Translate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTargetLanguage(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceLanguage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.AppliedFilter.Translate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.AppliedFilter.Translate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.AppliedFilter.Translate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.AppliedFilter.Translate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetLanguage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSourceLanguage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string target_language = 1;
 * @return {string}
 */
proto.lens.AppliedFilter.Translate.prototype.getTargetLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.AppliedFilter.Translate} returns this
 */
proto.lens.AppliedFilter.Translate.prototype.setTargetLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string source_language = 2;
 * @return {string}
 */
proto.lens.AppliedFilter.Translate.prototype.getSourceLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.AppliedFilter.Translate} returns this
 */
proto.lens.AppliedFilter.Translate.prototype.setSourceLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional LensOverlayFilterType filter_type = 1;
 * @return {!proto.lens.LensOverlayFilterType}
 */
proto.lens.AppliedFilter.prototype.getFilterType = function() {
  return /** @type {!proto.lens.LensOverlayFilterType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lens.LensOverlayFilterType} value
 * @return {!proto.lens.AppliedFilter} returns this
 */
proto.lens.AppliedFilter.prototype.setFilterType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Translate translate = 3;
 * @return {?proto.lens.AppliedFilter.Translate}
 */
proto.lens.AppliedFilter.prototype.getTranslate = function() {
  return /** @type{?proto.lens.AppliedFilter.Translate} */ (
    jspb.Message.getWrapperField(this, proto.lens.AppliedFilter.Translate, 3));
};


/**
 * @param {?proto.lens.AppliedFilter.Translate|undefined} value
 * @return {!proto.lens.AppliedFilter} returns this
*/
proto.lens.AppliedFilter.prototype.setTranslate = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.lens.AppliedFilter.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.AppliedFilter} returns this
 */
proto.lens.AppliedFilter.prototype.clearTranslate = function() {
  return this.setTranslate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.AppliedFilter.prototype.hasTranslate = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.AppliedFilters.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.AppliedFilters.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.AppliedFilters.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.AppliedFilters} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.AppliedFilters.toObject = function(includeInstance, msg) {
  var f, obj = {
filterList: jspb.Message.toObjectList(msg.getFilterList(),
    proto.lens.AppliedFilter.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.AppliedFilters}
 */
proto.lens.AppliedFilters.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.AppliedFilters;
  return proto.lens.AppliedFilters.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.AppliedFilters} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.AppliedFilters}
 */
proto.lens.AppliedFilters.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.AppliedFilter;
      reader.readMessage(value,proto.lens.AppliedFilter.deserializeBinaryFromReader);
      msg.addFilter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.AppliedFilters.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.AppliedFilters.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.AppliedFilters} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.AppliedFilters.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilterList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.lens.AppliedFilter.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AppliedFilter filter = 1;
 * @return {!Array<!proto.lens.AppliedFilter>}
 */
proto.lens.AppliedFilters.prototype.getFilterList = function() {
  return /** @type{!Array<!proto.lens.AppliedFilter>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lens.AppliedFilter, 1));
};


/**
 * @param {!Array<!proto.lens.AppliedFilter>} value
 * @return {!proto.lens.AppliedFilters} returns this
*/
proto.lens.AppliedFilters.prototype.setFilterList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.lens.AppliedFilter=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.AppliedFilter}
 */
proto.lens.AppliedFilters.prototype.addFilter = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.lens.AppliedFilter, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.AppliedFilters} returns this
 */
proto.lens.AppliedFilters.prototype.clearFilterList = function() {
  return this.setFilterList([]);
};


/**
 * @enum {number}
 */
proto.lens.LensOverlayFilterType = {
  UNKNOWN_FILTER_TYPE: 0,
  TRANSLATE: 2,
  AUTO_FILTER: 7
};

goog.object.extend(exports, proto.lens);
