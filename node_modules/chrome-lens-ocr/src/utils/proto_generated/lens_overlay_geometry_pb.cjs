// source: lens_overlay_geometry.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_polygon_pb = require('./lens_overlay_polygon_pb.cjs');
goog.object.extend(proto, lens_overlay_polygon_pb);
goog.exportSymbol('proto.lens.CenterRotatedBox', null, global);
goog.exportSymbol('proto.lens.Geometry', null, global);
goog.exportSymbol('proto.lens.ZoomedCrop', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.CenterRotatedBox = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.CenterRotatedBox, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.CenterRotatedBox.displayName = 'proto.lens.CenterRotatedBox';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.Geometry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.Geometry.repeatedFields_, null);
};
goog.inherits(proto.lens.Geometry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.Geometry.displayName = 'proto.lens.Geometry';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.ZoomedCrop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.ZoomedCrop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.ZoomedCrop.displayName = 'proto.lens.ZoomedCrop';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.CenterRotatedBox.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.CenterRotatedBox.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.CenterRotatedBox} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.CenterRotatedBox.toObject = function(includeInstance, msg) {
  var f, obj = {
centerX: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
centerY: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
width: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
height: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
rotationZ: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
coordinateType: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.CenterRotatedBox}
 */
proto.lens.CenterRotatedBox.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.CenterRotatedBox;
  return proto.lens.CenterRotatedBox.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.CenterRotatedBox} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.CenterRotatedBox}
 */
proto.lens.CenterRotatedBox.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCenterX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCenterY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setWidth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeight(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRotationZ(value);
      break;
    case 6:
      var value = /** @type {!proto.lens.CoordinateType} */ (reader.readEnum());
      msg.setCoordinateType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.CenterRotatedBox.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.CenterRotatedBox.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.CenterRotatedBox} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.CenterRotatedBox.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCenterX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getCenterY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getWidth();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getRotationZ();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getCoordinateType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * optional float center_x = 1;
 * @return {number}
 */
proto.lens.CenterRotatedBox.prototype.getCenterX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.lens.CenterRotatedBox} returns this
 */
proto.lens.CenterRotatedBox.prototype.setCenterX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float center_y = 2;
 * @return {number}
 */
proto.lens.CenterRotatedBox.prototype.getCenterY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.lens.CenterRotatedBox} returns this
 */
proto.lens.CenterRotatedBox.prototype.setCenterY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float width = 3;
 * @return {number}
 */
proto.lens.CenterRotatedBox.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.lens.CenterRotatedBox} returns this
 */
proto.lens.CenterRotatedBox.prototype.setWidth = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float height = 4;
 * @return {number}
 */
proto.lens.CenterRotatedBox.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.lens.CenterRotatedBox} returns this
 */
proto.lens.CenterRotatedBox.prototype.setHeight = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float rotation_z = 5;
 * @return {number}
 */
proto.lens.CenterRotatedBox.prototype.getRotationZ = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.lens.CenterRotatedBox} returns this
 */
proto.lens.CenterRotatedBox.prototype.setRotationZ = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional CoordinateType coordinate_type = 6;
 * @return {!proto.lens.CoordinateType}
 */
proto.lens.CenterRotatedBox.prototype.getCoordinateType = function() {
  return /** @type {!proto.lens.CoordinateType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.lens.CoordinateType} value
 * @return {!proto.lens.CenterRotatedBox} returns this
 */
proto.lens.CenterRotatedBox.prototype.setCoordinateType = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.Geometry.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.Geometry.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.Geometry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.Geometry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Geometry.toObject = function(includeInstance, msg) {
  var f, obj = {
boundingBox: (f = msg.getBoundingBox()) && proto.lens.CenterRotatedBox.toObject(includeInstance, f),
segmentationPolygonList: jspb.Message.toObjectList(msg.getSegmentationPolygonList(),
    lens_overlay_polygon_pb.Polygon.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.Geometry}
 */
proto.lens.Geometry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.Geometry;
  return proto.lens.Geometry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.Geometry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.Geometry}
 */
proto.lens.Geometry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.CenterRotatedBox;
      reader.readMessage(value,proto.lens.CenterRotatedBox.deserializeBinaryFromReader);
      msg.setBoundingBox(value);
      break;
    case 5:
      var value = new lens_overlay_polygon_pb.Polygon;
      reader.readMessage(value,lens_overlay_polygon_pb.Polygon.deserializeBinaryFromReader);
      msg.addSegmentationPolygon(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.Geometry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.Geometry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.Geometry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Geometry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBoundingBox();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.CenterRotatedBox.serializeBinaryToWriter
    );
  }
  f = message.getSegmentationPolygonList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      lens_overlay_polygon_pb.Polygon.serializeBinaryToWriter
    );
  }
};


/**
 * optional CenterRotatedBox bounding_box = 1;
 * @return {?proto.lens.CenterRotatedBox}
 */
proto.lens.Geometry.prototype.getBoundingBox = function() {
  return /** @type{?proto.lens.CenterRotatedBox} */ (
    jspb.Message.getWrapperField(this, proto.lens.CenterRotatedBox, 1));
};


/**
 * @param {?proto.lens.CenterRotatedBox|undefined} value
 * @return {!proto.lens.Geometry} returns this
*/
proto.lens.Geometry.prototype.setBoundingBox = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.Geometry} returns this
 */
proto.lens.Geometry.prototype.clearBoundingBox = function() {
  return this.setBoundingBox(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.Geometry.prototype.hasBoundingBox = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Polygon segmentation_polygon = 5;
 * @return {!Array<!proto.lens.Polygon>}
 */
proto.lens.Geometry.prototype.getSegmentationPolygonList = function() {
  return /** @type{!Array<!proto.lens.Polygon>} */ (
    jspb.Message.getRepeatedWrapperField(this, lens_overlay_polygon_pb.Polygon, 5));
};


/**
 * @param {!Array<!proto.lens.Polygon>} value
 * @return {!proto.lens.Geometry} returns this
*/
proto.lens.Geometry.prototype.setSegmentationPolygonList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.lens.Polygon=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.Polygon}
 */
proto.lens.Geometry.prototype.addSegmentationPolygon = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.lens.Polygon, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.Geometry} returns this
 */
proto.lens.Geometry.prototype.clearSegmentationPolygonList = function() {
  return this.setSegmentationPolygonList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.ZoomedCrop.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.ZoomedCrop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.ZoomedCrop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ZoomedCrop.toObject = function(includeInstance, msg) {
  var f, obj = {
crop: (f = msg.getCrop()) && proto.lens.CenterRotatedBox.toObject(includeInstance, f),
parentWidth: jspb.Message.getFieldWithDefault(msg, 2, 0),
parentHeight: jspb.Message.getFieldWithDefault(msg, 3, 0),
zoom: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.ZoomedCrop}
 */
proto.lens.ZoomedCrop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.ZoomedCrop;
  return proto.lens.ZoomedCrop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.ZoomedCrop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.ZoomedCrop}
 */
proto.lens.ZoomedCrop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.CenterRotatedBox;
      reader.readMessage(value,proto.lens.CenterRotatedBox.deserializeBinaryFromReader);
      msg.setCrop(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParentWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setParentHeight(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.ZoomedCrop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.ZoomedCrop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.ZoomedCrop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ZoomedCrop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCrop();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.CenterRotatedBox.serializeBinaryToWriter
    );
  }
  f = message.getParentWidth();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getParentHeight();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getZoom();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional CenterRotatedBox crop = 1;
 * @return {?proto.lens.CenterRotatedBox}
 */
proto.lens.ZoomedCrop.prototype.getCrop = function() {
  return /** @type{?proto.lens.CenterRotatedBox} */ (
    jspb.Message.getWrapperField(this, proto.lens.CenterRotatedBox, 1));
};


/**
 * @param {?proto.lens.CenterRotatedBox|undefined} value
 * @return {!proto.lens.ZoomedCrop} returns this
*/
proto.lens.ZoomedCrop.prototype.setCrop = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.ZoomedCrop} returns this
 */
proto.lens.ZoomedCrop.prototype.clearCrop = function() {
  return this.setCrop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.ZoomedCrop.prototype.hasCrop = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 parent_width = 2;
 * @return {number}
 */
proto.lens.ZoomedCrop.prototype.getParentWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.ZoomedCrop} returns this
 */
proto.lens.ZoomedCrop.prototype.setParentWidth = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 parent_height = 3;
 * @return {number}
 */
proto.lens.ZoomedCrop.prototype.getParentHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.ZoomedCrop} returns this
 */
proto.lens.ZoomedCrop.prototype.setParentHeight = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional float zoom = 4;
 * @return {number}
 */
proto.lens.ZoomedCrop.prototype.getZoom = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.lens.ZoomedCrop} returns this
 */
proto.lens.ZoomedCrop.prototype.setZoom = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


goog.object.extend(exports, proto.lens);
