// source: lens_overlay_interaction_request_metadata.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_geometry_pb = require('./lens_overlay_geometry_pb.cjs');
goog.object.extend(proto, lens_overlay_geometry_pb);
var lens_overlay_text_query_pb = require('./lens_overlay_text_query_pb.cjs');
goog.object.extend(proto, lens_overlay_text_query_pb);
goog.exportSymbol('proto.lens.LensOverlayInteractionRequestMetadata', null, global);
goog.exportSymbol('proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata', null, global);
goog.exportSymbol('proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata', null, global);
goog.exportSymbol('proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object', null, global);
goog.exportSymbol('proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point', null, global);
goog.exportSymbol('proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region', null, global);
goog.exportSymbol('proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.SelectionCase', null, global);
goog.exportSymbol('proto.lens.LensOverlayInteractionRequestMetadata.Type', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayInteractionRequestMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayInteractionRequestMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayInteractionRequestMetadata.displayName = 'proto.lens.LensOverlayInteractionRequestMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.oneofGroups_);
};
goog.inherits(proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.displayName = 'proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.displayName = 'proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.displayName = 'proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.displayName = 'proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.displayName = 'proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayInteractionRequestMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayInteractionRequestMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
type: jspb.Message.getFieldWithDefault(msg, 1, 0),
selectionMetadata: (f = msg.getSelectionMetadata()) && proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.toObject(includeInstance, f),
queryMetadata: (f = msg.getQueryMetadata()) && proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata}
 */
proto.lens.LensOverlayInteractionRequestMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayInteractionRequestMetadata;
  return proto.lens.LensOverlayInteractionRequestMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata}
 */
proto.lens.LensOverlayInteractionRequestMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lens.LensOverlayInteractionRequestMetadata.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata;
      reader.readMessage(value,proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.deserializeBinaryFromReader);
      msg.setSelectionMetadata(value);
      break;
    case 4:
      var value = new proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata;
      reader.readMessage(value,proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.deserializeBinaryFromReader);
      msg.setQueryMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayInteractionRequestMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayInteractionRequestMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getSelectionMetadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.serializeBinaryToWriter
    );
  }
  f = message.getQueryMetadata();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.lens.LensOverlayInteractionRequestMetadata.Type = {
  UNKNOWN: 0,
  TAP: 1,
  REGION: 2,
  TEXT_SELECTION: 3,
  REGION_SEARCH: 4,
  OBJECT_FULFILLMENT: 5,
  CONTEXTUAL_SEARCH_QUERY: 9,
  PDF_QUERY: 10,
  WEBPAGE_QUERY: 11
};


/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.SelectionCase = {
  SELECTION_NOT_SET: 0,
  POINT: 1,
  REGION: 2,
  OBJECT: 3
};

/**
 * @return {proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.SelectionCase}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.getSelectionCase = function() {
  return /** @type {proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.SelectionCase} */(jspb.Message.computeOneofCase(this, proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
point: (f = msg.getPoint()) && proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.toObject(includeInstance, f),
region: (f = msg.getRegion()) && proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.toObject(includeInstance, f),
object: (f = msg.getObject()) && proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata;
  return proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point;
      reader.readMessage(value,proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.deserializeBinaryFromReader);
      msg.setPoint(value);
      break;
    case 2:
      var value = new proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region;
      reader.readMessage(value,proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.deserializeBinaryFromReader);
      msg.setRegion(value);
      break;
    case 3:
      var value = new proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object;
      reader.readMessage(value,proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.deserializeBinaryFromReader);
      msg.setObject(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPoint();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.serializeBinaryToWriter
    );
  }
  f = message.getRegion();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.serializeBinaryToWriter
    );
  }
  f = message.getObject();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.toObject = function(includeInstance, msg) {
  var f, obj = {
x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point;
  return proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.toObject = function(includeInstance, msg) {
  var f, obj = {
region: (f = msg.getRegion()) && lens_overlay_geometry_pb.CenterRotatedBox.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region;
  return proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new lens_overlay_geometry_pb.CenterRotatedBox;
      reader.readMessage(value,lens_overlay_geometry_pb.CenterRotatedBox.deserializeBinaryFromReader);
      msg.setRegion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegion();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      lens_overlay_geometry_pb.CenterRotatedBox.serializeBinaryToWriter
    );
  }
};


/**
 * optional CenterRotatedBox region = 1;
 * @return {?proto.lens.CenterRotatedBox}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.prototype.getRegion = function() {
  return /** @type{?proto.lens.CenterRotatedBox} */ (
    jspb.Message.getWrapperField(this, lens_overlay_geometry_pb.CenterRotatedBox, 1));
};


/**
 * @param {?proto.lens.CenterRotatedBox|undefined} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region} returns this
*/
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.prototype.setRegion = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.prototype.clearRegion = function() {
  return this.setRegion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region.prototype.hasRegion = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.toObject = function(includeInstance, msg) {
  var f, obj = {
objectId: jspb.Message.getFieldWithDefault(msg, 1, ""),
geometry: (f = msg.getGeometry()) && lens_overlay_geometry_pb.Geometry.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object;
  return proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setObjectId(value);
      break;
    case 2:
      var value = new lens_overlay_geometry_pb.Geometry;
      reader.readMessage(value,lens_overlay_geometry_pb.Geometry.deserializeBinaryFromReader);
      msg.setGeometry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGeometry();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      lens_overlay_geometry_pb.Geometry.serializeBinaryToWriter
    );
  }
};


/**
 * optional string object_id = 1;
 * @return {string}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.prototype.getObjectId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.prototype.setObjectId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Geometry geometry = 2;
 * @return {?proto.lens.Geometry}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.prototype.getGeometry = function() {
  return /** @type{?proto.lens.Geometry} */ (
    jspb.Message.getWrapperField(this, lens_overlay_geometry_pb.Geometry, 2));
};


/**
 * @param {?proto.lens.Geometry|undefined} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object} returns this
*/
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.prototype.setGeometry = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.prototype.clearGeometry = function() {
  return this.setGeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object.prototype.hasGeometry = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Point point = 1;
 * @return {?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.getPoint = function() {
  return /** @type{?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point} */ (
    jspb.Message.getWrapperField(this, proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point, 1));
};


/**
 * @param {?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Point|undefined} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata} returns this
*/
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.setPoint = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.clearPoint = function() {
  return this.setPoint(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.hasPoint = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Region region = 2;
 * @return {?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.getRegion = function() {
  return /** @type{?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region} */ (
    jspb.Message.getWrapperField(this, proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region, 2));
};


/**
 * @param {?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Region|undefined} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata} returns this
*/
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.setRegion = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.clearRegion = function() {
  return this.setRegion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.hasRegion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Object object = 3;
 * @return {?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.getObject = function() {
  return /** @type{?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object} */ (
    jspb.Message.getWrapperField(this, proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object, 3));
};


/**
 * @param {?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.Object|undefined} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata} returns this
*/
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.setObject = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.clearObject = function() {
  return this.setObject(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata.prototype.hasObject = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
textQuery: (f = msg.getTextQuery()) && lens_overlay_text_query_pb.TextQuery.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata}
 */
proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata;
  return proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata}
 */
proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new lens_overlay_text_query_pb.TextQuery;
      reader.readMessage(value,lens_overlay_text_query_pb.TextQuery.deserializeBinaryFromReader);
      msg.setTextQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTextQuery();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      lens_overlay_text_query_pb.TextQuery.serializeBinaryToWriter
    );
  }
};


/**
 * optional TextQuery text_query = 2;
 * @return {?proto.lens.TextQuery}
 */
proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.prototype.getTextQuery = function() {
  return /** @type{?proto.lens.TextQuery} */ (
    jspb.Message.getWrapperField(this, lens_overlay_text_query_pb.TextQuery, 2));
};


/**
 * @param {?proto.lens.TextQuery|undefined} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata} returns this
*/
proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.prototype.setTextQuery = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.prototype.clearTextQuery = function() {
  return this.setTextQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata.prototype.hasTextQuery = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Type type = 1;
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata.Type}
 */
proto.lens.LensOverlayInteractionRequestMetadata.prototype.getType = function() {
  return /** @type {!proto.lens.LensOverlayInteractionRequestMetadata.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lens.LensOverlayInteractionRequestMetadata.Type} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional SelectionMetadata selection_metadata = 2;
 * @return {?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata}
 */
proto.lens.LensOverlayInteractionRequestMetadata.prototype.getSelectionMetadata = function() {
  return /** @type{?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata} */ (
    jspb.Message.getWrapperField(this, proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata, 2));
};


/**
 * @param {?proto.lens.LensOverlayInteractionRequestMetadata.SelectionMetadata|undefined} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata} returns this
*/
proto.lens.LensOverlayInteractionRequestMetadata.prototype.setSelectionMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.prototype.clearSelectionMetadata = function() {
  return this.setSelectionMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionRequestMetadata.prototype.hasSelectionMetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional QueryMetadata query_metadata = 4;
 * @return {?proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata}
 */
proto.lens.LensOverlayInteractionRequestMetadata.prototype.getQueryMetadata = function() {
  return /** @type{?proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata} */ (
    jspb.Message.getWrapperField(this, proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata, 4));
};


/**
 * @param {?proto.lens.LensOverlayInteractionRequestMetadata.QueryMetadata|undefined} value
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata} returns this
*/
proto.lens.LensOverlayInteractionRequestMetadata.prototype.setQueryMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionRequestMetadata} returns this
 */
proto.lens.LensOverlayInteractionRequestMetadata.prototype.clearQueryMetadata = function() {
  return this.setQueryMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionRequestMetadata.prototype.hasQueryMetadata = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto.lens);
