// source: lens_overlay_knowledge_intent_query.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_translate_stickiness_signals_pb = require('./lens_overlay_translate_stickiness_signals_pb.cjs');
goog.object.extend(proto, lens_overlay_translate_stickiness_signals_pb);
goog.exportSymbol('proto.lens.Argument', null, global);
goog.exportSymbol('proto.lens.ArgumentValue', null, global);
goog.exportSymbol('proto.lens.ArgumentValue.ValueCase', null, global);
goog.exportSymbol('proto.lens.FunctionCall', null, global);
goog.exportSymbol('proto.lens.FunctionCallSignals', null, global);
goog.exportSymbol('proto.lens.SimpleValue', null, global);
goog.exportSymbol('proto.lens.SimpleValue.ValueCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.FunctionCall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.FunctionCall.repeatedFields_, null);
};
goog.inherits(proto.lens.FunctionCall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.FunctionCall.displayName = 'proto.lens.FunctionCall';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.FunctionCallSignals = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 500, null, null);
};
goog.inherits(proto.lens.FunctionCallSignals, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.FunctionCallSignals.displayName = 'proto.lens.FunctionCallSignals';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.Argument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.Argument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.Argument.displayName = 'proto.lens.Argument';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.ArgumentValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.lens.ArgumentValue.oneofGroups_);
};
goog.inherits(proto.lens.ArgumentValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.ArgumentValue.displayName = 'proto.lens.ArgumentValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.SimpleValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.lens.SimpleValue.oneofGroups_);
};
goog.inherits(proto.lens.SimpleValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.SimpleValue.displayName = 'proto.lens.SimpleValue';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.FunctionCall.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.FunctionCall.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.FunctionCall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.FunctionCall} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.FunctionCall.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
argumentList: jspb.Message.toObjectList(msg.getArgumentList(),
    proto.lens.Argument.toObject, includeInstance),
signals: (f = msg.getSignals()) && proto.lens.FunctionCallSignals.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.FunctionCall}
 */
proto.lens.FunctionCall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.FunctionCall;
  return proto.lens.FunctionCall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.FunctionCall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.FunctionCall}
 */
proto.lens.FunctionCall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.lens.Argument;
      reader.readMessage(value,proto.lens.Argument.deserializeBinaryFromReader);
      msg.addArgument(value);
      break;
    case 4:
      var value = new proto.lens.FunctionCallSignals;
      reader.readMessage(value,proto.lens.FunctionCallSignals.deserializeBinaryFromReader);
      msg.setSignals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.FunctionCall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.FunctionCall.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.FunctionCall} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.FunctionCall.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getArgumentList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.lens.Argument.serializeBinaryToWriter
    );
  }
  f = message.getSignals();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.lens.FunctionCallSignals.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.lens.FunctionCall.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.FunctionCall} returns this
 */
proto.lens.FunctionCall.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Argument argument = 2;
 * @return {!Array<!proto.lens.Argument>}
 */
proto.lens.FunctionCall.prototype.getArgumentList = function() {
  return /** @type{!Array<!proto.lens.Argument>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lens.Argument, 2));
};


/**
 * @param {!Array<!proto.lens.Argument>} value
 * @return {!proto.lens.FunctionCall} returns this
*/
proto.lens.FunctionCall.prototype.setArgumentList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.lens.Argument=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.Argument}
 */
proto.lens.FunctionCall.prototype.addArgument = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.lens.Argument, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.FunctionCall} returns this
 */
proto.lens.FunctionCall.prototype.clearArgumentList = function() {
  return this.setArgumentList([]);
};


/**
 * optional FunctionCallSignals signals = 4;
 * @return {?proto.lens.FunctionCallSignals}
 */
proto.lens.FunctionCall.prototype.getSignals = function() {
  return /** @type{?proto.lens.FunctionCallSignals} */ (
    jspb.Message.getWrapperField(this, proto.lens.FunctionCallSignals, 4));
};


/**
 * @param {?proto.lens.FunctionCallSignals|undefined} value
 * @return {!proto.lens.FunctionCall} returns this
*/
proto.lens.FunctionCall.prototype.setSignals = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.FunctionCall} returns this
 */
proto.lens.FunctionCall.prototype.clearSignals = function() {
  return this.setSignals(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.FunctionCall.prototype.hasSignals = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.FunctionCallSignals.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.FunctionCallSignals.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.FunctionCallSignals} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.FunctionCallSignals.toObject = function(includeInstance, msg) {
  var f, obj = {
translateStickinessSignals: (f = msg.getTranslateStickinessSignals()) && lens_overlay_translate_stickiness_signals_pb.TranslateStickinessSignals.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.FunctionCallSignals}
 */
proto.lens.FunctionCallSignals.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.FunctionCallSignals;
  return proto.lens.FunctionCallSignals.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.FunctionCallSignals} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.FunctionCallSignals}
 */
proto.lens.FunctionCallSignals.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 311378150:
      var value = new lens_overlay_translate_stickiness_signals_pb.TranslateStickinessSignals;
      reader.readMessage(value,lens_overlay_translate_stickiness_signals_pb.TranslateStickinessSignals.deserializeBinaryFromReader);
      msg.setTranslateStickinessSignals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.FunctionCallSignals.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.FunctionCallSignals.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.FunctionCallSignals} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.FunctionCallSignals.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTranslateStickinessSignals();
  if (f != null) {
    writer.writeMessage(
      311378150,
      f,
      lens_overlay_translate_stickiness_signals_pb.TranslateStickinessSignals.serializeBinaryToWriter
    );
  }
};


/**
 * optional TranslateStickinessSignals translate_stickiness_signals = 311378150;
 * @return {?proto.lens.TranslateStickinessSignals}
 */
proto.lens.FunctionCallSignals.prototype.getTranslateStickinessSignals = function() {
  return /** @type{?proto.lens.TranslateStickinessSignals} */ (
    jspb.Message.getWrapperField(this, lens_overlay_translate_stickiness_signals_pb.TranslateStickinessSignals, 311378150));
};


/**
 * @param {?proto.lens.TranslateStickinessSignals|undefined} value
 * @return {!proto.lens.FunctionCallSignals} returns this
*/
proto.lens.FunctionCallSignals.prototype.setTranslateStickinessSignals = function(value) {
  return jspb.Message.setWrapperField(this, 311378150, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.FunctionCallSignals} returns this
 */
proto.lens.FunctionCallSignals.prototype.clearTranslateStickinessSignals = function() {
  return this.setTranslateStickinessSignals(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.FunctionCallSignals.prototype.hasTranslateStickinessSignals = function() {
  return jspb.Message.getField(this, 311378150) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.Argument.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.Argument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.Argument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Argument.toObject = function(includeInstance, msg) {
  var f, obj = {
name: jspb.Message.getFieldWithDefault(msg, 1, ""),
value: (f = msg.getValue()) && proto.lens.ArgumentValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.Argument}
 */
proto.lens.Argument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.Argument;
  return proto.lens.Argument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.Argument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.Argument}
 */
proto.lens.Argument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.lens.ArgumentValue;
      reader.readMessage(value,proto.lens.ArgumentValue.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.Argument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.Argument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.Argument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Argument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lens.ArgumentValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.lens.Argument.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.Argument} returns this
 */
proto.lens.Argument.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ArgumentValue value = 2;
 * @return {?proto.lens.ArgumentValue}
 */
proto.lens.Argument.prototype.getValue = function() {
  return /** @type{?proto.lens.ArgumentValue} */ (
    jspb.Message.getWrapperField(this, proto.lens.ArgumentValue, 2));
};


/**
 * @param {?proto.lens.ArgumentValue|undefined} value
 * @return {!proto.lens.Argument} returns this
*/
proto.lens.Argument.prototype.setValue = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.Argument} returns this
 */
proto.lens.Argument.prototype.clearValue = function() {
  return this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.Argument.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.lens.ArgumentValue.oneofGroups_ = [[3]];

/**
 * @enum {number}
 */
proto.lens.ArgumentValue.ValueCase = {
  VALUE_NOT_SET: 0,
  SIMPLE_VALUE: 3
};

/**
 * @return {proto.lens.ArgumentValue.ValueCase}
 */
proto.lens.ArgumentValue.prototype.getValueCase = function() {
  return /** @type {proto.lens.ArgumentValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.lens.ArgumentValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.ArgumentValue.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.ArgumentValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.ArgumentValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ArgumentValue.toObject = function(includeInstance, msg) {
  var f, obj = {
simpleValue: (f = msg.getSimpleValue()) && proto.lens.SimpleValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.ArgumentValue}
 */
proto.lens.ArgumentValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.ArgumentValue;
  return proto.lens.ArgumentValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.ArgumentValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.ArgumentValue}
 */
proto.lens.ArgumentValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.lens.SimpleValue;
      reader.readMessage(value,proto.lens.SimpleValue.deserializeBinaryFromReader);
      msg.setSimpleValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.ArgumentValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.ArgumentValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.ArgumentValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ArgumentValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSimpleValue();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lens.SimpleValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional SimpleValue simple_value = 3;
 * @return {?proto.lens.SimpleValue}
 */
proto.lens.ArgumentValue.prototype.getSimpleValue = function() {
  return /** @type{?proto.lens.SimpleValue} */ (
    jspb.Message.getWrapperField(this, proto.lens.SimpleValue, 3));
};


/**
 * @param {?proto.lens.SimpleValue|undefined} value
 * @return {!proto.lens.ArgumentValue} returns this
*/
proto.lens.ArgumentValue.prototype.setSimpleValue = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.lens.ArgumentValue.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.ArgumentValue} returns this
 */
proto.lens.ArgumentValue.prototype.clearSimpleValue = function() {
  return this.setSimpleValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.ArgumentValue.prototype.hasSimpleValue = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.lens.SimpleValue.oneofGroups_ = [[1]];

/**
 * @enum {number}
 */
proto.lens.SimpleValue.ValueCase = {
  VALUE_NOT_SET: 0,
  STRING_VALUE: 1
};

/**
 * @return {proto.lens.SimpleValue.ValueCase}
 */
proto.lens.SimpleValue.prototype.getValueCase = function() {
  return /** @type {proto.lens.SimpleValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.lens.SimpleValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.SimpleValue.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.SimpleValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.SimpleValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.SimpleValue.toObject = function(includeInstance, msg) {
  var f, obj = {
stringValue: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.SimpleValue}
 */
proto.lens.SimpleValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.SimpleValue;
  return proto.lens.SimpleValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.SimpleValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.SimpleValue}
 */
proto.lens.SimpleValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStringValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.SimpleValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.SimpleValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.SimpleValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.SimpleValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string string_value = 1;
 * @return {string}
 */
proto.lens.SimpleValue.prototype.getStringValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.SimpleValue} returns this
 */
proto.lens.SimpleValue.prototype.setStringValue = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.lens.SimpleValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.lens.SimpleValue} returns this
 */
proto.lens.SimpleValue.prototype.clearStringValue = function() {
  return jspb.Message.setOneofField(this, 1, proto.lens.SimpleValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.SimpleValue.prototype.hasStringValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.lens);
