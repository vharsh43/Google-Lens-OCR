// source: lens_overlay_overlay_object.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_geometry_pb = require('./lens_overlay_geometry_pb.cjs');
goog.object.extend(proto, lens_overlay_geometry_pb);
goog.exportSymbol('proto.lens.OverlayObject', null, global);
goog.exportSymbol('proto.lens.OverlayObject.InteractionProperties', null, global);
goog.exportSymbol('proto.lens.OverlayObject.RenderingMetadata', null, global);
goog.exportSymbol('proto.lens.OverlayObject.RenderingMetadata.RenderType', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.OverlayObject = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.OverlayObject, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.OverlayObject.displayName = 'proto.lens.OverlayObject';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.OverlayObject.RenderingMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.OverlayObject.RenderingMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.OverlayObject.RenderingMetadata.displayName = 'proto.lens.OverlayObject.RenderingMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.OverlayObject.InteractionProperties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.OverlayObject.InteractionProperties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.OverlayObject.InteractionProperties.displayName = 'proto.lens.OverlayObject.InteractionProperties';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.OverlayObject.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.OverlayObject.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.OverlayObject} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.OverlayObject.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
geometry: (f = msg.getGeometry()) && lens_overlay_geometry_pb.Geometry.toObject(includeInstance, f),
renderingMetadata: (f = msg.getRenderingMetadata()) && proto.lens.OverlayObject.RenderingMetadata.toObject(includeInstance, f),
interactionProperties: (f = msg.getInteractionProperties()) && proto.lens.OverlayObject.InteractionProperties.toObject(includeInstance, f),
isFulfilled: jspb.Message.getBooleanFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.OverlayObject}
 */
proto.lens.OverlayObject.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.OverlayObject;
  return proto.lens.OverlayObject.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.OverlayObject} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.OverlayObject}
 */
proto.lens.OverlayObject.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = new lens_overlay_geometry_pb.Geometry;
      reader.readMessage(value,lens_overlay_geometry_pb.Geometry.deserializeBinaryFromReader);
      msg.setGeometry(value);
      break;
    case 8:
      var value = new proto.lens.OverlayObject.RenderingMetadata;
      reader.readMessage(value,proto.lens.OverlayObject.RenderingMetadata.deserializeBinaryFromReader);
      msg.setRenderingMetadata(value);
      break;
    case 4:
      var value = new proto.lens.OverlayObject.InteractionProperties;
      reader.readMessage(value,proto.lens.OverlayObject.InteractionProperties.deserializeBinaryFromReader);
      msg.setInteractionProperties(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsFulfilled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.OverlayObject.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.OverlayObject.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.OverlayObject} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.OverlayObject.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGeometry();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      lens_overlay_geometry_pb.Geometry.serializeBinaryToWriter
    );
  }
  f = message.getRenderingMetadata();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.lens.OverlayObject.RenderingMetadata.serializeBinaryToWriter
    );
  }
  f = message.getInteractionProperties();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.lens.OverlayObject.InteractionProperties.serializeBinaryToWriter
    );
  }
  f = message.getIsFulfilled();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.OverlayObject.RenderingMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.OverlayObject.RenderingMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.OverlayObject.RenderingMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.OverlayObject.RenderingMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
renderType: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.OverlayObject.RenderingMetadata}
 */
proto.lens.OverlayObject.RenderingMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.OverlayObject.RenderingMetadata;
  return proto.lens.OverlayObject.RenderingMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.OverlayObject.RenderingMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.OverlayObject.RenderingMetadata}
 */
proto.lens.OverlayObject.RenderingMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lens.OverlayObject.RenderingMetadata.RenderType} */ (reader.readEnum());
      msg.setRenderType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.OverlayObject.RenderingMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.OverlayObject.RenderingMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.OverlayObject.RenderingMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.OverlayObject.RenderingMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRenderType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.lens.OverlayObject.RenderingMetadata.RenderType = {
  DEFAULT: 0,
  GLEAM: 1
};

/**
 * optional RenderType render_type = 1;
 * @return {!proto.lens.OverlayObject.RenderingMetadata.RenderType}
 */
proto.lens.OverlayObject.RenderingMetadata.prototype.getRenderType = function() {
  return /** @type {!proto.lens.OverlayObject.RenderingMetadata.RenderType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lens.OverlayObject.RenderingMetadata.RenderType} value
 * @return {!proto.lens.OverlayObject.RenderingMetadata} returns this
 */
proto.lens.OverlayObject.RenderingMetadata.prototype.setRenderType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.OverlayObject.InteractionProperties.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.OverlayObject.InteractionProperties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.OverlayObject.InteractionProperties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.OverlayObject.InteractionProperties.toObject = function(includeInstance, msg) {
  var f, obj = {
selectOnTap: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.OverlayObject.InteractionProperties}
 */
proto.lens.OverlayObject.InteractionProperties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.OverlayObject.InteractionProperties;
  return proto.lens.OverlayObject.InteractionProperties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.OverlayObject.InteractionProperties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.OverlayObject.InteractionProperties}
 */
proto.lens.OverlayObject.InteractionProperties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSelectOnTap(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.OverlayObject.InteractionProperties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.OverlayObject.InteractionProperties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.OverlayObject.InteractionProperties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.OverlayObject.InteractionProperties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelectOnTap();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool select_on_tap = 1;
 * @return {boolean}
 */
proto.lens.OverlayObject.InteractionProperties.prototype.getSelectOnTap = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lens.OverlayObject.InteractionProperties} returns this
 */
proto.lens.OverlayObject.InteractionProperties.prototype.setSelectOnTap = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.lens.OverlayObject.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.OverlayObject} returns this
 */
proto.lens.OverlayObject.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Geometry geometry = 2;
 * @return {?proto.lens.Geometry}
 */
proto.lens.OverlayObject.prototype.getGeometry = function() {
  return /** @type{?proto.lens.Geometry} */ (
    jspb.Message.getWrapperField(this, lens_overlay_geometry_pb.Geometry, 2));
};


/**
 * @param {?proto.lens.Geometry|undefined} value
 * @return {!proto.lens.OverlayObject} returns this
*/
proto.lens.OverlayObject.prototype.setGeometry = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.OverlayObject} returns this
 */
proto.lens.OverlayObject.prototype.clearGeometry = function() {
  return this.setGeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.OverlayObject.prototype.hasGeometry = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RenderingMetadata rendering_metadata = 8;
 * @return {?proto.lens.OverlayObject.RenderingMetadata}
 */
proto.lens.OverlayObject.prototype.getRenderingMetadata = function() {
  return /** @type{?proto.lens.OverlayObject.RenderingMetadata} */ (
    jspb.Message.getWrapperField(this, proto.lens.OverlayObject.RenderingMetadata, 8));
};


/**
 * @param {?proto.lens.OverlayObject.RenderingMetadata|undefined} value
 * @return {!proto.lens.OverlayObject} returns this
*/
proto.lens.OverlayObject.prototype.setRenderingMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.OverlayObject} returns this
 */
proto.lens.OverlayObject.prototype.clearRenderingMetadata = function() {
  return this.setRenderingMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.OverlayObject.prototype.hasRenderingMetadata = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional InteractionProperties interaction_properties = 4;
 * @return {?proto.lens.OverlayObject.InteractionProperties}
 */
proto.lens.OverlayObject.prototype.getInteractionProperties = function() {
  return /** @type{?proto.lens.OverlayObject.InteractionProperties} */ (
    jspb.Message.getWrapperField(this, proto.lens.OverlayObject.InteractionProperties, 4));
};


/**
 * @param {?proto.lens.OverlayObject.InteractionProperties|undefined} value
 * @return {!proto.lens.OverlayObject} returns this
*/
proto.lens.OverlayObject.prototype.setInteractionProperties = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.OverlayObject} returns this
 */
proto.lens.OverlayObject.prototype.clearInteractionProperties = function() {
  return this.setInteractionProperties(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.OverlayObject.prototype.hasInteractionProperties = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bool is_fulfilled = 9;
 * @return {boolean}
 */
proto.lens.OverlayObject.prototype.getIsFulfilled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 9, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lens.OverlayObject} returns this
 */
proto.lens.OverlayObject.prototype.setIsFulfilled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 9, value);
};


goog.object.extend(exports, proto.lens);
