// source: lens_overlay_phase_latencies_metadata.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.lens.LensOverlayPhaseLatenciesMetadata', null, global);
goog.exportSymbol('proto.lens.LensOverlayPhaseLatenciesMetadata.ImageType', null, global);
goog.exportSymbol('proto.lens.LensOverlayPhaseLatenciesMetadata.Phase', null, global);
goog.exportSymbol('proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData', null, global);
goog.exportSymbol('proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData', null, global);
goog.exportSymbol('proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.PhaseDataCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayPhaseLatenciesMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.LensOverlayPhaseLatenciesMetadata.repeatedFields_, null);
};
goog.inherits(proto.lens.LensOverlayPhaseLatenciesMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayPhaseLatenciesMetadata.displayName = 'proto.lens.LensOverlayPhaseLatenciesMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.oneofGroups_);
};
goog.inherits(proto.lens.LensOverlayPhaseLatenciesMetadata.Phase, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.displayName = 'proto.lens.LensOverlayPhaseLatenciesMetadata.Phase';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.displayName = 'proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.displayName = 'proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayPhaseLatenciesMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
phaseList: jspb.Message.toObjectList(msg.getPhaseList(),
    proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayPhaseLatenciesMetadata;
  return proto.lens.LensOverlayPhaseLatenciesMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.LensOverlayPhaseLatenciesMetadata.Phase;
      reader.readMessage(value,proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.deserializeBinaryFromReader);
      msg.addPhase(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayPhaseLatenciesMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPhaseList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.ImageType = {
  UNKNOWN: 0,
  JPEG: 1,
  PNG: 2,
  WEBP: 3
};


/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.oneofGroups_ = [[3,4]];

/**
 * @enum {number}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.PhaseDataCase = {
  PHASE_DATA_NOT_SET: 0,
  IMAGE_DOWNSCALE_DATA: 3,
  IMAGE_ENCODE_DATA: 4
};

/**
 * @return {proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.PhaseDataCase}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.prototype.getPhaseDataCase = function() {
  return /** @type {proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.PhaseDataCase} */(jspb.Message.computeOneofCase(this, proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.toObject = function(includeInstance, msg) {
  var f, obj = {
imageDownscaleData: (f = msg.getImageDownscaleData()) && proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.toObject(includeInstance, f),
imageEncodeData: (f = msg.getImageEncodeData()) && proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayPhaseLatenciesMetadata.Phase;
  return proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData;
      reader.readMessage(value,proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.deserializeBinaryFromReader);
      msg.setImageDownscaleData(value);
      break;
    case 4:
      var value = new proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData;
      reader.readMessage(value,proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.deserializeBinaryFromReader);
      msg.setImageEncodeData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getImageDownscaleData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.serializeBinaryToWriter
    );
  }
  f = message.getImageEncodeData();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.toObject = function(includeInstance, msg) {
  var f, obj = {
originalImageSize: jspb.Message.getFieldWithDefault(msg, 1, 0),
downscaledImageSize: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData;
  return proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOriginalImageSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDownscaledImageSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOriginalImageSize();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getDownscaledImageSize();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 original_image_size = 1;
 * @return {number}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.prototype.getOriginalImageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData} returns this
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.prototype.setOriginalImageSize = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 downscaled_image_size = 2;
 * @return {number}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.prototype.getDownscaledImageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData} returns this
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData.prototype.setDownscaledImageSize = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.toObject = function(includeInstance, msg) {
  var f, obj = {
originalImageType: jspb.Message.getFieldWithDefault(msg, 1, 0),
encodedImageSizeBytes: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData;
  return proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lens.LensOverlayPhaseLatenciesMetadata.ImageType} */ (reader.readEnum());
      msg.setOriginalImageType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEncodedImageSizeBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOriginalImageType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEncodedImageSizeBytes();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional ImageType original_image_type = 1;
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.ImageType}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.prototype.getOriginalImageType = function() {
  return /** @type {!proto.lens.LensOverlayPhaseLatenciesMetadata.ImageType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata.ImageType} value
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData} returns this
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.prototype.setOriginalImageType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int64 encoded_image_size_bytes = 2;
 * @return {number}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.prototype.getEncodedImageSizeBytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData} returns this
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData.prototype.setEncodedImageSizeBytes = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional ImageDownscaleData image_downscale_data = 3;
 * @return {?proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.prototype.getImageDownscaleData = function() {
  return /** @type{?proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData} */ (
    jspb.Message.getWrapperField(this, proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData, 3));
};


/**
 * @param {?proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageDownscaleData|undefined} value
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase} returns this
*/
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.prototype.setImageDownscaleData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase} returns this
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.prototype.clearImageDownscaleData = function() {
  return this.setImageDownscaleData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.prototype.hasImageDownscaleData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ImageEncodeData image_encode_data = 4;
 * @return {?proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.prototype.getImageEncodeData = function() {
  return /** @type{?proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData} */ (
    jspb.Message.getWrapperField(this, proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData, 4));
};


/**
 * @param {?proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.ImageEncodeData|undefined} value
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase} returns this
*/
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.prototype.setImageEncodeData = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase} returns this
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.prototype.clearImageEncodeData = function() {
  return this.setImageEncodeData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.Phase.prototype.hasImageEncodeData = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated Phase phase = 1;
 * @return {!Array<!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase>}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.prototype.getPhaseList = function() {
  return /** @type{!Array<!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lens.LensOverlayPhaseLatenciesMetadata.Phase, 1));
};


/**
 * @param {!Array<!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase>} value
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata} returns this
*/
proto.lens.LensOverlayPhaseLatenciesMetadata.prototype.setPhaseList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata.Phase}
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.prototype.addPhase = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.lens.LensOverlayPhaseLatenciesMetadata.Phase, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.LensOverlayPhaseLatenciesMetadata} returns this
 */
proto.lens.LensOverlayPhaseLatenciesMetadata.prototype.clearPhaseList = function() {
  return this.setPhaseList([]);
};


goog.object.extend(exports, proto.lens);
