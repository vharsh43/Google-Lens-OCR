// source: lens_overlay_server.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_client_logs_pb = require('./lens_overlay_client_logs_pb.cjs');
goog.object.extend(proto, lens_overlay_client_logs_pb);
var lens_overlay_routing_info_pb = require('./lens_overlay_routing_info_pb.cjs');
goog.object.extend(proto, lens_overlay_routing_info_pb);
var lens_overlay_service_deps_pb = require('./lens_overlay_service_deps_pb.cjs');
goog.object.extend(proto, lens_overlay_service_deps_pb);
goog.exportSymbol('proto.lens.LensOverlayServerClusterInfoRequest', null, global);
goog.exportSymbol('proto.lens.LensOverlayServerClusterInfoResponse', null, global);
goog.exportSymbol('proto.lens.LensOverlayServerError', null, global);
goog.exportSymbol('proto.lens.LensOverlayServerError.ErrorType', null, global);
goog.exportSymbol('proto.lens.LensOverlayServerRequest', null, global);
goog.exportSymbol('proto.lens.LensOverlayServerResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayServerClusterInfoRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayServerClusterInfoRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayServerClusterInfoRequest.displayName = 'proto.lens.LensOverlayServerClusterInfoRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayServerClusterInfoResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayServerClusterInfoResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayServerClusterInfoResponse.displayName = 'proto.lens.LensOverlayServerClusterInfoResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayServerError = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayServerError, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayServerError.displayName = 'proto.lens.LensOverlayServerError';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayServerRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayServerRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayServerRequest.displayName = 'proto.lens.LensOverlayServerRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayServerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayServerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayServerResponse.displayName = 'proto.lens.LensOverlayServerResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayServerClusterInfoRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayServerClusterInfoRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayServerClusterInfoRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayServerClusterInfoRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
enableSearchSessionId: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayServerClusterInfoRequest}
 */
proto.lens.LensOverlayServerClusterInfoRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayServerClusterInfoRequest;
  return proto.lens.LensOverlayServerClusterInfoRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayServerClusterInfoRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayServerClusterInfoRequest}
 */
proto.lens.LensOverlayServerClusterInfoRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableSearchSessionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayServerClusterInfoRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayServerClusterInfoRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayServerClusterInfoRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayServerClusterInfoRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEnableSearchSessionId();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool enable_search_session_id = 1;
 * @return {boolean}
 */
proto.lens.LensOverlayServerClusterInfoRequest.prototype.getEnableSearchSessionId = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lens.LensOverlayServerClusterInfoRequest} returns this
 */
proto.lens.LensOverlayServerClusterInfoRequest.prototype.setEnableSearchSessionId = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayServerClusterInfoResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayServerClusterInfoResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayServerClusterInfoResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayServerClusterInfoResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
serverSessionId: jspb.Message.getFieldWithDefault(msg, 1, ""),
searchSessionId: jspb.Message.getFieldWithDefault(msg, 2, ""),
routingInfo: (f = msg.getRoutingInfo()) && lens_overlay_routing_info_pb.LensOverlayRoutingInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayServerClusterInfoResponse}
 */
proto.lens.LensOverlayServerClusterInfoResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayServerClusterInfoResponse;
  return proto.lens.LensOverlayServerClusterInfoResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayServerClusterInfoResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayServerClusterInfoResponse}
 */
proto.lens.LensOverlayServerClusterInfoResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setServerSessionId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSearchSessionId(value);
      break;
    case 3:
      var value = new lens_overlay_routing_info_pb.LensOverlayRoutingInfo;
      reader.readMessage(value,lens_overlay_routing_info_pb.LensOverlayRoutingInfo.deserializeBinaryFromReader);
      msg.setRoutingInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayServerClusterInfoResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayServerClusterInfoResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayServerClusterInfoResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayServerClusterInfoResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getServerSessionId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSearchSessionId();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRoutingInfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      lens_overlay_routing_info_pb.LensOverlayRoutingInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional string server_session_id = 1;
 * @return {string}
 */
proto.lens.LensOverlayServerClusterInfoResponse.prototype.getServerSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.LensOverlayServerClusterInfoResponse} returns this
 */
proto.lens.LensOverlayServerClusterInfoResponse.prototype.setServerSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string search_session_id = 2;
 * @return {string}
 */
proto.lens.LensOverlayServerClusterInfoResponse.prototype.getSearchSessionId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.LensOverlayServerClusterInfoResponse} returns this
 */
proto.lens.LensOverlayServerClusterInfoResponse.prototype.setSearchSessionId = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional LensOverlayRoutingInfo routing_info = 3;
 * @return {?proto.lens.LensOverlayRoutingInfo}
 */
proto.lens.LensOverlayServerClusterInfoResponse.prototype.getRoutingInfo = function() {
  return /** @type{?proto.lens.LensOverlayRoutingInfo} */ (
    jspb.Message.getWrapperField(this, lens_overlay_routing_info_pb.LensOverlayRoutingInfo, 3));
};


/**
 * @param {?proto.lens.LensOverlayRoutingInfo|undefined} value
 * @return {!proto.lens.LensOverlayServerClusterInfoResponse} returns this
*/
proto.lens.LensOverlayServerClusterInfoResponse.prototype.setRoutingInfo = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayServerClusterInfoResponse} returns this
 */
proto.lens.LensOverlayServerClusterInfoResponse.prototype.clearRoutingInfo = function() {
  return this.setRoutingInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayServerClusterInfoResponse.prototype.hasRoutingInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayServerError.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayServerError.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayServerError} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayServerError.toObject = function(includeInstance, msg) {
  var f, obj = {
errorType: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayServerError}
 */
proto.lens.LensOverlayServerError.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayServerError;
  return proto.lens.LensOverlayServerError.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayServerError} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayServerError}
 */
proto.lens.LensOverlayServerError.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lens.LensOverlayServerError.ErrorType} */ (reader.readEnum());
      msg.setErrorType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayServerError.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayServerError.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayServerError} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayServerError.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.lens.LensOverlayServerError.ErrorType = {
  UNKNOWN_TYPE: 0,
  MISSING_REQUEST: 1
};

/**
 * optional ErrorType error_type = 1;
 * @return {!proto.lens.LensOverlayServerError.ErrorType}
 */
proto.lens.LensOverlayServerError.prototype.getErrorType = function() {
  return /** @type {!proto.lens.LensOverlayServerError.ErrorType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lens.LensOverlayServerError.ErrorType} value
 * @return {!proto.lens.LensOverlayServerError} returns this
 */
proto.lens.LensOverlayServerError.prototype.setErrorType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayServerRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayServerRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayServerRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayServerRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
objectsRequest: (f = msg.getObjectsRequest()) && lens_overlay_service_deps_pb.LensOverlayObjectsRequest.toObject(includeInstance, f),
interactionRequest: (f = msg.getInteractionRequest()) && lens_overlay_service_deps_pb.LensOverlayInteractionRequest.toObject(includeInstance, f),
clientLogs: (f = msg.getClientLogs()) && lens_overlay_client_logs_pb.LensOverlayClientLogs.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayServerRequest}
 */
proto.lens.LensOverlayServerRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayServerRequest;
  return proto.lens.LensOverlayServerRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayServerRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayServerRequest}
 */
proto.lens.LensOverlayServerRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new lens_overlay_service_deps_pb.LensOverlayObjectsRequest;
      reader.readMessage(value,lens_overlay_service_deps_pb.LensOverlayObjectsRequest.deserializeBinaryFromReader);
      msg.setObjectsRequest(value);
      break;
    case 2:
      var value = new lens_overlay_service_deps_pb.LensOverlayInteractionRequest;
      reader.readMessage(value,lens_overlay_service_deps_pb.LensOverlayInteractionRequest.deserializeBinaryFromReader);
      msg.setInteractionRequest(value);
      break;
    case 3:
      var value = new lens_overlay_client_logs_pb.LensOverlayClientLogs;
      reader.readMessage(value,lens_overlay_client_logs_pb.LensOverlayClientLogs.deserializeBinaryFromReader);
      msg.setClientLogs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayServerRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayServerRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayServerRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayServerRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getObjectsRequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      lens_overlay_service_deps_pb.LensOverlayObjectsRequest.serializeBinaryToWriter
    );
  }
  f = message.getInteractionRequest();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      lens_overlay_service_deps_pb.LensOverlayInteractionRequest.serializeBinaryToWriter
    );
  }
  f = message.getClientLogs();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      lens_overlay_client_logs_pb.LensOverlayClientLogs.serializeBinaryToWriter
    );
  }
};


/**
 * optional LensOverlayObjectsRequest objects_request = 1;
 * @return {?proto.lens.LensOverlayObjectsRequest}
 */
proto.lens.LensOverlayServerRequest.prototype.getObjectsRequest = function() {
  return /** @type{?proto.lens.LensOverlayObjectsRequest} */ (
    jspb.Message.getWrapperField(this, lens_overlay_service_deps_pb.LensOverlayObjectsRequest, 1));
};


/**
 * @param {?proto.lens.LensOverlayObjectsRequest|undefined} value
 * @return {!proto.lens.LensOverlayServerRequest} returns this
*/
proto.lens.LensOverlayServerRequest.prototype.setObjectsRequest = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayServerRequest} returns this
 */
proto.lens.LensOverlayServerRequest.prototype.clearObjectsRequest = function() {
  return this.setObjectsRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayServerRequest.prototype.hasObjectsRequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LensOverlayInteractionRequest interaction_request = 2;
 * @return {?proto.lens.LensOverlayInteractionRequest}
 */
proto.lens.LensOverlayServerRequest.prototype.getInteractionRequest = function() {
  return /** @type{?proto.lens.LensOverlayInteractionRequest} */ (
    jspb.Message.getWrapperField(this, lens_overlay_service_deps_pb.LensOverlayInteractionRequest, 2));
};


/**
 * @param {?proto.lens.LensOverlayInteractionRequest|undefined} value
 * @return {!proto.lens.LensOverlayServerRequest} returns this
*/
proto.lens.LensOverlayServerRequest.prototype.setInteractionRequest = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayServerRequest} returns this
 */
proto.lens.LensOverlayServerRequest.prototype.clearInteractionRequest = function() {
  return this.setInteractionRequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayServerRequest.prototype.hasInteractionRequest = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LensOverlayClientLogs client_logs = 3;
 * @return {?proto.lens.LensOverlayClientLogs}
 */
proto.lens.LensOverlayServerRequest.prototype.getClientLogs = function() {
  return /** @type{?proto.lens.LensOverlayClientLogs} */ (
    jspb.Message.getWrapperField(this, lens_overlay_client_logs_pb.LensOverlayClientLogs, 3));
};


/**
 * @param {?proto.lens.LensOverlayClientLogs|undefined} value
 * @return {!proto.lens.LensOverlayServerRequest} returns this
*/
proto.lens.LensOverlayServerRequest.prototype.setClientLogs = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayServerRequest} returns this
 */
proto.lens.LensOverlayServerRequest.prototype.clearClientLogs = function() {
  return this.setClientLogs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayServerRequest.prototype.hasClientLogs = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayServerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayServerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayServerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayServerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
error: (f = msg.getError()) && proto.lens.LensOverlayServerError.toObject(includeInstance, f),
objectsResponse: (f = msg.getObjectsResponse()) && lens_overlay_service_deps_pb.LensOverlayObjectsResponse.toObject(includeInstance, f),
interactionResponse: (f = msg.getInteractionResponse()) && lens_overlay_service_deps_pb.LensOverlayInteractionResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayServerResponse}
 */
proto.lens.LensOverlayServerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayServerResponse;
  return proto.lens.LensOverlayServerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayServerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayServerResponse}
 */
proto.lens.LensOverlayServerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.LensOverlayServerError;
      reader.readMessage(value,proto.lens.LensOverlayServerError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 2:
      var value = new lens_overlay_service_deps_pb.LensOverlayObjectsResponse;
      reader.readMessage(value,lens_overlay_service_deps_pb.LensOverlayObjectsResponse.deserializeBinaryFromReader);
      msg.setObjectsResponse(value);
      break;
    case 3:
      var value = new lens_overlay_service_deps_pb.LensOverlayInteractionResponse;
      reader.readMessage(value,lens_overlay_service_deps_pb.LensOverlayInteractionResponse.deserializeBinaryFromReader);
      msg.setInteractionResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayServerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayServerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayServerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayServerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.LensOverlayServerError.serializeBinaryToWriter
    );
  }
  f = message.getObjectsResponse();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      lens_overlay_service_deps_pb.LensOverlayObjectsResponse.serializeBinaryToWriter
    );
  }
  f = message.getInteractionResponse();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      lens_overlay_service_deps_pb.LensOverlayInteractionResponse.serializeBinaryToWriter
    );
  }
};


/**
 * optional LensOverlayServerError error = 1;
 * @return {?proto.lens.LensOverlayServerError}
 */
proto.lens.LensOverlayServerResponse.prototype.getError = function() {
  return /** @type{?proto.lens.LensOverlayServerError} */ (
    jspb.Message.getWrapperField(this, proto.lens.LensOverlayServerError, 1));
};


/**
 * @param {?proto.lens.LensOverlayServerError|undefined} value
 * @return {!proto.lens.LensOverlayServerResponse} returns this
*/
proto.lens.LensOverlayServerResponse.prototype.setError = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayServerResponse} returns this
 */
proto.lens.LensOverlayServerResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayServerResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LensOverlayObjectsResponse objects_response = 2;
 * @return {?proto.lens.LensOverlayObjectsResponse}
 */
proto.lens.LensOverlayServerResponse.prototype.getObjectsResponse = function() {
  return /** @type{?proto.lens.LensOverlayObjectsResponse} */ (
    jspb.Message.getWrapperField(this, lens_overlay_service_deps_pb.LensOverlayObjectsResponse, 2));
};


/**
 * @param {?proto.lens.LensOverlayObjectsResponse|undefined} value
 * @return {!proto.lens.LensOverlayServerResponse} returns this
*/
proto.lens.LensOverlayServerResponse.prototype.setObjectsResponse = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayServerResponse} returns this
 */
proto.lens.LensOverlayServerResponse.prototype.clearObjectsResponse = function() {
  return this.setObjectsResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayServerResponse.prototype.hasObjectsResponse = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional LensOverlayInteractionResponse interaction_response = 3;
 * @return {?proto.lens.LensOverlayInteractionResponse}
 */
proto.lens.LensOverlayServerResponse.prototype.getInteractionResponse = function() {
  return /** @type{?proto.lens.LensOverlayInteractionResponse} */ (
    jspb.Message.getWrapperField(this, lens_overlay_service_deps_pb.LensOverlayInteractionResponse, 3));
};


/**
 * @param {?proto.lens.LensOverlayInteractionResponse|undefined} value
 * @return {!proto.lens.LensOverlayServerResponse} returns this
*/
proto.lens.LensOverlayServerResponse.prototype.setInteractionResponse = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayServerResponse} returns this
 */
proto.lens.LensOverlayServerResponse.prototype.clearInteractionResponse = function() {
  return this.setInteractionResponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayServerResponse.prototype.hasInteractionResponse = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.lens);
