// source: lens_overlay_service_deps.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_client_context_pb = require('./lens_overlay_client_context_pb.cjs');
goog.object.extend(proto, lens_overlay_client_context_pb);
var lens_overlay_cluster_info_pb = require('./lens_overlay_cluster_info_pb.cjs');
goog.object.extend(proto, lens_overlay_cluster_info_pb);
var lens_overlay_deep_gleam_data_pb = require('./lens_overlay_deep_gleam_data_pb.cjs');
goog.object.extend(proto, lens_overlay_deep_gleam_data_pb);
var lens_overlay_document_pb = require('./lens_overlay_document_pb.cjs');
goog.object.extend(proto, lens_overlay_document_pb);
var lens_overlay_image_crop_pb = require('./lens_overlay_image_crop_pb.cjs');
goog.object.extend(proto, lens_overlay_image_crop_pb);
var lens_overlay_image_data_pb = require('./lens_overlay_image_data_pb.cjs');
goog.object.extend(proto, lens_overlay_image_data_pb);
var lens_overlay_interaction_request_metadata_pb = require('./lens_overlay_interaction_request_metadata_pb.cjs');
goog.object.extend(proto, lens_overlay_interaction_request_metadata_pb);
var lens_overlay_overlay_object_pb = require('./lens_overlay_overlay_object_pb.cjs');
goog.object.extend(proto, lens_overlay_overlay_object_pb);
var lens_overlay_request_id_pb = require('./lens_overlay_request_id_pb.cjs');
goog.object.extend(proto, lens_overlay_request_id_pb);
var lens_overlay_request_type_pb = require('./lens_overlay_request_type_pb.cjs');
goog.object.extend(proto, lens_overlay_request_type_pb);
var lens_overlay_text_pb = require('./lens_overlay_text_pb.cjs');
goog.object.extend(proto, lens_overlay_text_pb);
goog.exportSymbol('proto.lens.ChunkDebugMetadata', null, global);
goog.exportSymbol('proto.lens.ChunkDebugOptions', null, global);
goog.exportSymbol('proto.lens.CompressionType', null, global);
goog.exportSymbol('proto.lens.Content', null, global);
goog.exportSymbol('proto.lens.ContentData', null, global);
goog.exportSymbol('proto.lens.ContentData.ContentType', null, global);
goog.exportSymbol('proto.lens.LensOverlayInteractionRequest', null, global);
goog.exportSymbol('proto.lens.LensOverlayInteractionResponse', null, global);
goog.exportSymbol('proto.lens.LensOverlayObjectsRequest', null, global);
goog.exportSymbol('proto.lens.LensOverlayObjectsResponse', null, global);
goog.exportSymbol('proto.lens.LensOverlayRequestContext', null, global);
goog.exportSymbol('proto.lens.LensOverlayUploadChunkRequest', null, global);
goog.exportSymbol('proto.lens.LensOverlayUploadChunkResponse', null, global);
goog.exportSymbol('proto.lens.Payload', null, global);
goog.exportSymbol('proto.lens.StoredChunkOptions', null, global);
goog.exportSymbol('proto.lens.ViewportRequestContext', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayRequestContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayRequestContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayRequestContext.displayName = 'proto.lens.LensOverlayRequestContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.ViewportRequestContext = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.ViewportRequestContext, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.ViewportRequestContext.displayName = 'proto.lens.ViewportRequestContext';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayObjectsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayObjectsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayObjectsRequest.displayName = 'proto.lens.LensOverlayObjectsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayUploadChunkRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayUploadChunkRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayUploadChunkRequest.displayName = 'proto.lens.LensOverlayUploadChunkRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayUploadChunkResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayUploadChunkResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayUploadChunkResponse.displayName = 'proto.lens.LensOverlayUploadChunkResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.ChunkDebugOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.ChunkDebugOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.ChunkDebugOptions.displayName = 'proto.lens.ChunkDebugOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.ChunkDebugMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.ChunkDebugMetadata.repeatedFields_, null);
};
goog.inherits(proto.lens.ChunkDebugMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.ChunkDebugMetadata.displayName = 'proto.lens.ChunkDebugMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayObjectsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.LensOverlayObjectsResponse.repeatedFields_, null);
};
goog.inherits(proto.lens.LensOverlayObjectsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayObjectsResponse.displayName = 'proto.lens.LensOverlayObjectsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayInteractionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayInteractionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayInteractionRequest.displayName = 'proto.lens.LensOverlayInteractionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayInteractionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayInteractionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayInteractionResponse.displayName = 'proto.lens.LensOverlayInteractionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.Payload = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.Payload, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.Payload.displayName = 'proto.lens.Payload';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.StoredChunkOptions = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.StoredChunkOptions, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.StoredChunkOptions.displayName = 'proto.lens.StoredChunkOptions';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.Content = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.Content.repeatedFields_, null);
};
goog.inherits(proto.lens.Content, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.Content.displayName = 'proto.lens.Content';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.ContentData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.ContentData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.ContentData.displayName = 'proto.lens.ContentData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayRequestContext.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayRequestContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayRequestContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayRequestContext.toObject = function(includeInstance, msg) {
  var f, obj = {
requestId: (f = msg.getRequestId()) && lens_overlay_request_id_pb.LensOverlayRequestId.toObject(includeInstance, f),
clientContext: (f = msg.getClientContext()) && lens_overlay_client_context_pb.LensOverlayClientContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayRequestContext}
 */
proto.lens.LensOverlayRequestContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayRequestContext;
  return proto.lens.LensOverlayRequestContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayRequestContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayRequestContext}
 */
proto.lens.LensOverlayRequestContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new lens_overlay_request_id_pb.LensOverlayRequestId;
      reader.readMessage(value,lens_overlay_request_id_pb.LensOverlayRequestId.deserializeBinaryFromReader);
      msg.setRequestId(value);
      break;
    case 4:
      var value = new lens_overlay_client_context_pb.LensOverlayClientContext;
      reader.readMessage(value,lens_overlay_client_context_pb.LensOverlayClientContext.deserializeBinaryFromReader);
      msg.setClientContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayRequestContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayRequestContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayRequestContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayRequestContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      lens_overlay_request_id_pb.LensOverlayRequestId.serializeBinaryToWriter
    );
  }
  f = message.getClientContext();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      lens_overlay_client_context_pb.LensOverlayClientContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional LensOverlayRequestId request_id = 3;
 * @return {?proto.lens.LensOverlayRequestId}
 */
proto.lens.LensOverlayRequestContext.prototype.getRequestId = function() {
  return /** @type{?proto.lens.LensOverlayRequestId} */ (
    jspb.Message.getWrapperField(this, lens_overlay_request_id_pb.LensOverlayRequestId, 3));
};


/**
 * @param {?proto.lens.LensOverlayRequestId|undefined} value
 * @return {!proto.lens.LensOverlayRequestContext} returns this
*/
proto.lens.LensOverlayRequestContext.prototype.setRequestId = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayRequestContext} returns this
 */
proto.lens.LensOverlayRequestContext.prototype.clearRequestId = function() {
  return this.setRequestId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayRequestContext.prototype.hasRequestId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional LensOverlayClientContext client_context = 4;
 * @return {?proto.lens.LensOverlayClientContext}
 */
proto.lens.LensOverlayRequestContext.prototype.getClientContext = function() {
  return /** @type{?proto.lens.LensOverlayClientContext} */ (
    jspb.Message.getWrapperField(this, lens_overlay_client_context_pb.LensOverlayClientContext, 4));
};


/**
 * @param {?proto.lens.LensOverlayClientContext|undefined} value
 * @return {!proto.lens.LensOverlayRequestContext} returns this
*/
proto.lens.LensOverlayRequestContext.prototype.setClientContext = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayRequestContext} returns this
 */
proto.lens.LensOverlayRequestContext.prototype.clearClientContext = function() {
  return this.setClientContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayRequestContext.prototype.hasClientContext = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.ViewportRequestContext.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.ViewportRequestContext.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.ViewportRequestContext} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ViewportRequestContext.toObject = function(includeInstance, msg) {
  var f, obj = {
pdfPageNumber: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.ViewportRequestContext}
 */
proto.lens.ViewportRequestContext.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.ViewportRequestContext;
  return proto.lens.ViewportRequestContext.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.ViewportRequestContext} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.ViewportRequestContext}
 */
proto.lens.ViewportRequestContext.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPdfPageNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.ViewportRequestContext.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.ViewportRequestContext.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.ViewportRequestContext} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ViewportRequestContext.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPdfPageNumber();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 pdf_page_number = 1;
 * @return {number}
 */
proto.lens.ViewportRequestContext.prototype.getPdfPageNumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.ViewportRequestContext} returns this
 */
proto.lens.ViewportRequestContext.prototype.setPdfPageNumber = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayObjectsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayObjectsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayObjectsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayObjectsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
requestContext: (f = msg.getRequestContext()) && proto.lens.LensOverlayRequestContext.toObject(includeInstance, f),
imageData: (f = msg.getImageData()) && lens_overlay_image_data_pb.ImageData.toObject(includeInstance, f),
payload: (f = msg.getPayload()) && proto.lens.Payload.toObject(includeInstance, f),
viewportRequestContext: (f = msg.getViewportRequestContext()) && proto.lens.ViewportRequestContext.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayObjectsRequest}
 */
proto.lens.LensOverlayObjectsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayObjectsRequest;
  return proto.lens.LensOverlayObjectsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayObjectsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayObjectsRequest}
 */
proto.lens.LensOverlayObjectsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.LensOverlayRequestContext;
      reader.readMessage(value,proto.lens.LensOverlayRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    case 3:
      var value = new lens_overlay_image_data_pb.ImageData;
      reader.readMessage(value,lens_overlay_image_data_pb.ImageData.deserializeBinaryFromReader);
      msg.setImageData(value);
      break;
    case 4:
      var value = new proto.lens.Payload;
      reader.readMessage(value,proto.lens.Payload.deserializeBinaryFromReader);
      msg.setPayload(value);
      break;
    case 5:
      var value = new proto.lens.ViewportRequestContext;
      reader.readMessage(value,proto.lens.ViewportRequestContext.deserializeBinaryFromReader);
      msg.setViewportRequestContext(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayObjectsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayObjectsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayObjectsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayObjectsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.LensOverlayRequestContext.serializeBinaryToWriter
    );
  }
  f = message.getImageData();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      lens_overlay_image_data_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getPayload();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.lens.Payload.serializeBinaryToWriter
    );
  }
  f = message.getViewportRequestContext();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.lens.ViewportRequestContext.serializeBinaryToWriter
    );
  }
};


/**
 * optional LensOverlayRequestContext request_context = 1;
 * @return {?proto.lens.LensOverlayRequestContext}
 */
proto.lens.LensOverlayObjectsRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.lens.LensOverlayRequestContext} */ (
    jspb.Message.getWrapperField(this, proto.lens.LensOverlayRequestContext, 1));
};


/**
 * @param {?proto.lens.LensOverlayRequestContext|undefined} value
 * @return {!proto.lens.LensOverlayObjectsRequest} returns this
*/
proto.lens.LensOverlayObjectsRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayObjectsRequest} returns this
 */
proto.lens.LensOverlayObjectsRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayObjectsRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ImageData image_data = 3;
 * @return {?proto.lens.ImageData}
 */
proto.lens.LensOverlayObjectsRequest.prototype.getImageData = function() {
  return /** @type{?proto.lens.ImageData} */ (
    jspb.Message.getWrapperField(this, lens_overlay_image_data_pb.ImageData, 3));
};


/**
 * @param {?proto.lens.ImageData|undefined} value
 * @return {!proto.lens.LensOverlayObjectsRequest} returns this
*/
proto.lens.LensOverlayObjectsRequest.prototype.setImageData = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayObjectsRequest} returns this
 */
proto.lens.LensOverlayObjectsRequest.prototype.clearImageData = function() {
  return this.setImageData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayObjectsRequest.prototype.hasImageData = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Payload payload = 4;
 * @return {?proto.lens.Payload}
 */
proto.lens.LensOverlayObjectsRequest.prototype.getPayload = function() {
  return /** @type{?proto.lens.Payload} */ (
    jspb.Message.getWrapperField(this, proto.lens.Payload, 4));
};


/**
 * @param {?proto.lens.Payload|undefined} value
 * @return {!proto.lens.LensOverlayObjectsRequest} returns this
*/
proto.lens.LensOverlayObjectsRequest.prototype.setPayload = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayObjectsRequest} returns this
 */
proto.lens.LensOverlayObjectsRequest.prototype.clearPayload = function() {
  return this.setPayload(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayObjectsRequest.prototype.hasPayload = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ViewportRequestContext viewport_request_context = 5;
 * @return {?proto.lens.ViewportRequestContext}
 */
proto.lens.LensOverlayObjectsRequest.prototype.getViewportRequestContext = function() {
  return /** @type{?proto.lens.ViewportRequestContext} */ (
    jspb.Message.getWrapperField(this, proto.lens.ViewportRequestContext, 5));
};


/**
 * @param {?proto.lens.ViewportRequestContext|undefined} value
 * @return {!proto.lens.LensOverlayObjectsRequest} returns this
*/
proto.lens.LensOverlayObjectsRequest.prototype.setViewportRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayObjectsRequest} returns this
 */
proto.lens.LensOverlayObjectsRequest.prototype.clearViewportRequestContext = function() {
  return this.setViewportRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayObjectsRequest.prototype.hasViewportRequestContext = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayUploadChunkRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayUploadChunkRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayUploadChunkRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
requestContext: (f = msg.getRequestContext()) && proto.lens.LensOverlayRequestContext.toObject(includeInstance, f),
debugOptions: (f = msg.getDebugOptions()) && proto.lens.ChunkDebugOptions.toObject(includeInstance, f),
chunkId: jspb.Message.getFieldWithDefault(msg, 3, 0),
chunkBytes: msg.getChunkBytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayUploadChunkRequest}
 */
proto.lens.LensOverlayUploadChunkRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayUploadChunkRequest;
  return proto.lens.LensOverlayUploadChunkRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayUploadChunkRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayUploadChunkRequest}
 */
proto.lens.LensOverlayUploadChunkRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.LensOverlayRequestContext;
      reader.readMessage(value,proto.lens.LensOverlayRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    case 6:
      var value = new proto.lens.ChunkDebugOptions;
      reader.readMessage(value,proto.lens.ChunkDebugOptions.deserializeBinaryFromReader);
      msg.setDebugOptions(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChunkId(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChunkBytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayUploadChunkRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayUploadChunkRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayUploadChunkRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.LensOverlayRequestContext.serializeBinaryToWriter
    );
  }
  f = message.getDebugOptions();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.lens.ChunkDebugOptions.serializeBinaryToWriter
    );
  }
  f = message.getChunkId();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getChunkBytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional LensOverlayRequestContext request_context = 1;
 * @return {?proto.lens.LensOverlayRequestContext}
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.lens.LensOverlayRequestContext} */ (
    jspb.Message.getWrapperField(this, proto.lens.LensOverlayRequestContext, 1));
};


/**
 * @param {?proto.lens.LensOverlayRequestContext|undefined} value
 * @return {!proto.lens.LensOverlayUploadChunkRequest} returns this
*/
proto.lens.LensOverlayUploadChunkRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayUploadChunkRequest} returns this
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ChunkDebugOptions debug_options = 6;
 * @return {?proto.lens.ChunkDebugOptions}
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.getDebugOptions = function() {
  return /** @type{?proto.lens.ChunkDebugOptions} */ (
    jspb.Message.getWrapperField(this, proto.lens.ChunkDebugOptions, 6));
};


/**
 * @param {?proto.lens.ChunkDebugOptions|undefined} value
 * @return {!proto.lens.LensOverlayUploadChunkRequest} returns this
*/
proto.lens.LensOverlayUploadChunkRequest.prototype.setDebugOptions = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayUploadChunkRequest} returns this
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.clearDebugOptions = function() {
  return this.setDebugOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.hasDebugOptions = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int64 chunk_id = 3;
 * @return {number}
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.getChunkId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.LensOverlayUploadChunkRequest} returns this
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.setChunkId = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes chunk_bytes = 4;
 * @return {!(string|Uint8Array)}
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.getChunkBytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes chunk_bytes = 4;
 * This is a type-conversion wrapper around `getChunkBytes()`
 * @return {string}
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.getChunkBytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChunkBytes()));
};


/**
 * optional bytes chunk_bytes = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChunkBytes()`
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.getChunkBytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChunkBytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lens.LensOverlayUploadChunkRequest} returns this
 */
proto.lens.LensOverlayUploadChunkRequest.prototype.setChunkBytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayUploadChunkResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayUploadChunkResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayUploadChunkResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayUploadChunkResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
debugMetadata: (f = msg.getDebugMetadata()) && proto.lens.ChunkDebugMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayUploadChunkResponse}
 */
proto.lens.LensOverlayUploadChunkResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayUploadChunkResponse;
  return proto.lens.LensOverlayUploadChunkResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayUploadChunkResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayUploadChunkResponse}
 */
proto.lens.LensOverlayUploadChunkResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.lens.ChunkDebugMetadata;
      reader.readMessage(value,proto.lens.ChunkDebugMetadata.deserializeBinaryFromReader);
      msg.setDebugMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayUploadChunkResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayUploadChunkResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayUploadChunkResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayUploadChunkResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDebugMetadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lens.ChunkDebugMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * optional ChunkDebugMetadata debug_metadata = 2;
 * @return {?proto.lens.ChunkDebugMetadata}
 */
proto.lens.LensOverlayUploadChunkResponse.prototype.getDebugMetadata = function() {
  return /** @type{?proto.lens.ChunkDebugMetadata} */ (
    jspb.Message.getWrapperField(this, proto.lens.ChunkDebugMetadata, 2));
};


/**
 * @param {?proto.lens.ChunkDebugMetadata|undefined} value
 * @return {!proto.lens.LensOverlayUploadChunkResponse} returns this
*/
proto.lens.LensOverlayUploadChunkResponse.prototype.setDebugMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayUploadChunkResponse} returns this
 */
proto.lens.LensOverlayUploadChunkResponse.prototype.clearDebugMetadata = function() {
  return this.setDebugMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayUploadChunkResponse.prototype.hasDebugMetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.ChunkDebugOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.ChunkDebugOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.ChunkDebugOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ChunkDebugOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
totalChunks: jspb.Message.getFieldWithDefault(msg, 1, 0),
queryChunks: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.ChunkDebugOptions}
 */
proto.lens.ChunkDebugOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.ChunkDebugOptions;
  return proto.lens.ChunkDebugOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.ChunkDebugOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.ChunkDebugOptions}
 */
proto.lens.ChunkDebugOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalChunks(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setQueryChunks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.ChunkDebugOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.ChunkDebugOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.ChunkDebugOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ChunkDebugOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotalChunks();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getQueryChunks();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional int64 total_chunks = 1;
 * @return {number}
 */
proto.lens.ChunkDebugOptions.prototype.getTotalChunks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.ChunkDebugOptions} returns this
 */
proto.lens.ChunkDebugOptions.prototype.setTotalChunks = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool query_chunks = 2;
 * @return {boolean}
 */
proto.lens.ChunkDebugOptions.prototype.getQueryChunks = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lens.ChunkDebugOptions} returns this
 */
proto.lens.ChunkDebugOptions.prototype.setQueryChunks = function(value) {
  return jspb.Message.setProto3BooleanField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.ChunkDebugMetadata.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.ChunkDebugMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.ChunkDebugMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.ChunkDebugMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ChunkDebugMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
remainingChunksList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.ChunkDebugMetadata}
 */
proto.lens.ChunkDebugMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.ChunkDebugMetadata;
  return proto.lens.ChunkDebugMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.ChunkDebugMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.ChunkDebugMetadata}
 */
proto.lens.ChunkDebugMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedInt64() : [reader.readInt64()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRemainingChunks(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.ChunkDebugMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.ChunkDebugMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.ChunkDebugMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ChunkDebugMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRemainingChunksList();
  if (f.length > 0) {
    writer.writePackedInt64(
      1,
      f
    );
  }
};


/**
 * repeated int64 remaining_chunks = 1;
 * @return {!Array<number>}
 */
proto.lens.ChunkDebugMetadata.prototype.getRemainingChunksList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.lens.ChunkDebugMetadata} returns this
 */
proto.lens.ChunkDebugMetadata.prototype.setRemainingChunksList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.lens.ChunkDebugMetadata} returns this
 */
proto.lens.ChunkDebugMetadata.prototype.addRemainingChunks = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.ChunkDebugMetadata} returns this
 */
proto.lens.ChunkDebugMetadata.prototype.clearRemainingChunksList = function() {
  return this.setRemainingChunksList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.LensOverlayObjectsResponse.repeatedFields_ = [2,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayObjectsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayObjectsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayObjectsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayObjectsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
overlayObjectsList: jspb.Message.toObjectList(msg.getOverlayObjectsList(),
    lens_overlay_overlay_object_pb.OverlayObject.toObject, includeInstance),
text: (f = msg.getText()) && lens_overlay_text_pb.Text.toObject(includeInstance, f),
deepGleamsList: jspb.Message.toObjectList(msg.getDeepGleamsList(),
    lens_overlay_deep_gleam_data_pb.DeepGleamData.toObject, includeInstance),
clusterInfo: (f = msg.getClusterInfo()) && lens_overlay_cluster_info_pb.LensOverlayClusterInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayObjectsResponse}
 */
proto.lens.LensOverlayObjectsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayObjectsResponse;
  return proto.lens.LensOverlayObjectsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayObjectsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayObjectsResponse}
 */
proto.lens.LensOverlayObjectsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new lens_overlay_overlay_object_pb.OverlayObject;
      reader.readMessage(value,lens_overlay_overlay_object_pb.OverlayObject.deserializeBinaryFromReader);
      msg.addOverlayObjects(value);
      break;
    case 3:
      var value = new lens_overlay_text_pb.Text;
      reader.readMessage(value,lens_overlay_text_pb.Text.deserializeBinaryFromReader);
      msg.setText(value);
      break;
    case 4:
      var value = new lens_overlay_deep_gleam_data_pb.DeepGleamData;
      reader.readMessage(value,lens_overlay_deep_gleam_data_pb.DeepGleamData.deserializeBinaryFromReader);
      msg.addDeepGleams(value);
      break;
    case 7:
      var value = new lens_overlay_cluster_info_pb.LensOverlayClusterInfo;
      reader.readMessage(value,lens_overlay_cluster_info_pb.LensOverlayClusterInfo.deserializeBinaryFromReader);
      msg.setClusterInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayObjectsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayObjectsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayObjectsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayObjectsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOverlayObjectsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      lens_overlay_overlay_object_pb.OverlayObject.serializeBinaryToWriter
    );
  }
  f = message.getText();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      lens_overlay_text_pb.Text.serializeBinaryToWriter
    );
  }
  f = message.getDeepGleamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      lens_overlay_deep_gleam_data_pb.DeepGleamData.serializeBinaryToWriter
    );
  }
  f = message.getClusterInfo();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      lens_overlay_cluster_info_pb.LensOverlayClusterInfo.serializeBinaryToWriter
    );
  }
};


/**
 * repeated OverlayObject overlay_objects = 2;
 * @return {!Array<!proto.lens.OverlayObject>}
 */
proto.lens.LensOverlayObjectsResponse.prototype.getOverlayObjectsList = function() {
  return /** @type{!Array<!proto.lens.OverlayObject>} */ (
    jspb.Message.getRepeatedWrapperField(this, lens_overlay_overlay_object_pb.OverlayObject, 2));
};


/**
 * @param {!Array<!proto.lens.OverlayObject>} value
 * @return {!proto.lens.LensOverlayObjectsResponse} returns this
*/
proto.lens.LensOverlayObjectsResponse.prototype.setOverlayObjectsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.lens.OverlayObject=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.OverlayObject}
 */
proto.lens.LensOverlayObjectsResponse.prototype.addOverlayObjects = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.lens.OverlayObject, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.LensOverlayObjectsResponse} returns this
 */
proto.lens.LensOverlayObjectsResponse.prototype.clearOverlayObjectsList = function() {
  return this.setOverlayObjectsList([]);
};


/**
 * optional Text text = 3;
 * @return {?proto.lens.Text}
 */
proto.lens.LensOverlayObjectsResponse.prototype.getText = function() {
  return /** @type{?proto.lens.Text} */ (
    jspb.Message.getWrapperField(this, lens_overlay_text_pb.Text, 3));
};


/**
 * @param {?proto.lens.Text|undefined} value
 * @return {!proto.lens.LensOverlayObjectsResponse} returns this
*/
proto.lens.LensOverlayObjectsResponse.prototype.setText = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayObjectsResponse} returns this
 */
proto.lens.LensOverlayObjectsResponse.prototype.clearText = function() {
  return this.setText(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayObjectsResponse.prototype.hasText = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated DeepGleamData deep_gleams = 4;
 * @return {!Array<!proto.lens.DeepGleamData>}
 */
proto.lens.LensOverlayObjectsResponse.prototype.getDeepGleamsList = function() {
  return /** @type{!Array<!proto.lens.DeepGleamData>} */ (
    jspb.Message.getRepeatedWrapperField(this, lens_overlay_deep_gleam_data_pb.DeepGleamData, 4));
};


/**
 * @param {!Array<!proto.lens.DeepGleamData>} value
 * @return {!proto.lens.LensOverlayObjectsResponse} returns this
*/
proto.lens.LensOverlayObjectsResponse.prototype.setDeepGleamsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.lens.DeepGleamData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.DeepGleamData}
 */
proto.lens.LensOverlayObjectsResponse.prototype.addDeepGleams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.lens.DeepGleamData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.LensOverlayObjectsResponse} returns this
 */
proto.lens.LensOverlayObjectsResponse.prototype.clearDeepGleamsList = function() {
  return this.setDeepGleamsList([]);
};


/**
 * optional LensOverlayClusterInfo cluster_info = 7;
 * @return {?proto.lens.LensOverlayClusterInfo}
 */
proto.lens.LensOverlayObjectsResponse.prototype.getClusterInfo = function() {
  return /** @type{?proto.lens.LensOverlayClusterInfo} */ (
    jspb.Message.getWrapperField(this, lens_overlay_cluster_info_pb.LensOverlayClusterInfo, 7));
};


/**
 * @param {?proto.lens.LensOverlayClusterInfo|undefined} value
 * @return {!proto.lens.LensOverlayObjectsResponse} returns this
*/
proto.lens.LensOverlayObjectsResponse.prototype.setClusterInfo = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayObjectsResponse} returns this
 */
proto.lens.LensOverlayObjectsResponse.prototype.clearClusterInfo = function() {
  return this.setClusterInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayObjectsResponse.prototype.hasClusterInfo = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayInteractionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayInteractionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayInteractionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
requestContext: (f = msg.getRequestContext()) && proto.lens.LensOverlayRequestContext.toObject(includeInstance, f),
interactionRequestMetadata: (f = msg.getInteractionRequestMetadata()) && lens_overlay_interaction_request_metadata_pb.LensOverlayInteractionRequestMetadata.toObject(includeInstance, f),
imageCrop: (f = msg.getImageCrop()) && lens_overlay_image_crop_pb.ImageCrop.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayInteractionRequest}
 */
proto.lens.LensOverlayInteractionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayInteractionRequest;
  return proto.lens.LensOverlayInteractionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayInteractionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayInteractionRequest}
 */
proto.lens.LensOverlayInteractionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.LensOverlayRequestContext;
      reader.readMessage(value,proto.lens.LensOverlayRequestContext.deserializeBinaryFromReader);
      msg.setRequestContext(value);
      break;
    case 2:
      var value = new lens_overlay_interaction_request_metadata_pb.LensOverlayInteractionRequestMetadata;
      reader.readMessage(value,lens_overlay_interaction_request_metadata_pb.LensOverlayInteractionRequestMetadata.deserializeBinaryFromReader);
      msg.setInteractionRequestMetadata(value);
      break;
    case 3:
      var value = new lens_overlay_image_crop_pb.ImageCrop;
      reader.readMessage(value,lens_overlay_image_crop_pb.ImageCrop.deserializeBinaryFromReader);
      msg.setImageCrop(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayInteractionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayInteractionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayInteractionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestContext();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.LensOverlayRequestContext.serializeBinaryToWriter
    );
  }
  f = message.getInteractionRequestMetadata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      lens_overlay_interaction_request_metadata_pb.LensOverlayInteractionRequestMetadata.serializeBinaryToWriter
    );
  }
  f = message.getImageCrop();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      lens_overlay_image_crop_pb.ImageCrop.serializeBinaryToWriter
    );
  }
};


/**
 * optional LensOverlayRequestContext request_context = 1;
 * @return {?proto.lens.LensOverlayRequestContext}
 */
proto.lens.LensOverlayInteractionRequest.prototype.getRequestContext = function() {
  return /** @type{?proto.lens.LensOverlayRequestContext} */ (
    jspb.Message.getWrapperField(this, proto.lens.LensOverlayRequestContext, 1));
};


/**
 * @param {?proto.lens.LensOverlayRequestContext|undefined} value
 * @return {!proto.lens.LensOverlayInteractionRequest} returns this
*/
proto.lens.LensOverlayInteractionRequest.prototype.setRequestContext = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionRequest} returns this
 */
proto.lens.LensOverlayInteractionRequest.prototype.clearRequestContext = function() {
  return this.setRequestContext(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionRequest.prototype.hasRequestContext = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional LensOverlayInteractionRequestMetadata interaction_request_metadata = 2;
 * @return {?proto.lens.LensOverlayInteractionRequestMetadata}
 */
proto.lens.LensOverlayInteractionRequest.prototype.getInteractionRequestMetadata = function() {
  return /** @type{?proto.lens.LensOverlayInteractionRequestMetadata} */ (
    jspb.Message.getWrapperField(this, lens_overlay_interaction_request_metadata_pb.LensOverlayInteractionRequestMetadata, 2));
};


/**
 * @param {?proto.lens.LensOverlayInteractionRequestMetadata|undefined} value
 * @return {!proto.lens.LensOverlayInteractionRequest} returns this
*/
proto.lens.LensOverlayInteractionRequest.prototype.setInteractionRequestMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionRequest} returns this
 */
proto.lens.LensOverlayInteractionRequest.prototype.clearInteractionRequestMetadata = function() {
  return this.setInteractionRequestMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionRequest.prototype.hasInteractionRequestMetadata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional ImageCrop image_crop = 3;
 * @return {?proto.lens.ImageCrop}
 */
proto.lens.LensOverlayInteractionRequest.prototype.getImageCrop = function() {
  return /** @type{?proto.lens.ImageCrop} */ (
    jspb.Message.getWrapperField(this, lens_overlay_image_crop_pb.ImageCrop, 3));
};


/**
 * @param {?proto.lens.ImageCrop|undefined} value
 * @return {!proto.lens.LensOverlayInteractionRequest} returns this
*/
proto.lens.LensOverlayInteractionRequest.prototype.setImageCrop = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionRequest} returns this
 */
proto.lens.LensOverlayInteractionRequest.prototype.clearImageCrop = function() {
  return this.setImageCrop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionRequest.prototype.hasImageCrop = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayInteractionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayInteractionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayInteractionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
encodedResponse: jspb.Message.getFieldWithDefault(msg, 3, ""),
text: (f = msg.getText()) && lens_overlay_text_pb.Text.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayInteractionResponse}
 */
proto.lens.LensOverlayInteractionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayInteractionResponse;
  return proto.lens.LensOverlayInteractionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayInteractionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayInteractionResponse}
 */
proto.lens.LensOverlayInteractionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEncodedResponse(value);
      break;
    case 5:
      var value = new lens_overlay_text_pb.Text;
      reader.readMessage(value,lens_overlay_text_pb.Text.deserializeBinaryFromReader);
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayInteractionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayInteractionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayInteractionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayInteractionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEncodedResponse();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getText();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      lens_overlay_text_pb.Text.serializeBinaryToWriter
    );
  }
};


/**
 * optional string encoded_response = 3;
 * @return {string}
 */
proto.lens.LensOverlayInteractionResponse.prototype.getEncodedResponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.LensOverlayInteractionResponse} returns this
 */
proto.lens.LensOverlayInteractionResponse.prototype.setEncodedResponse = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional Text text = 5;
 * @return {?proto.lens.Text}
 */
proto.lens.LensOverlayInteractionResponse.prototype.getText = function() {
  return /** @type{?proto.lens.Text} */ (
    jspb.Message.getWrapperField(this, lens_overlay_text_pb.Text, 5));
};


/**
 * @param {?proto.lens.Text|undefined} value
 * @return {!proto.lens.LensOverlayInteractionResponse} returns this
*/
proto.lens.LensOverlayInteractionResponse.prototype.setText = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayInteractionResponse} returns this
 */
proto.lens.LensOverlayInteractionResponse.prototype.clearText = function() {
  return this.setText(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayInteractionResponse.prototype.hasText = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.Payload.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.Payload.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.Payload} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Payload.toObject = function(includeInstance, msg) {
  var f, obj = {
requestType: jspb.Message.getFieldWithDefault(msg, 6, 0),
imageData: (f = msg.getImageData()) && lens_overlay_image_data_pb.ImageData.toObject(includeInstance, f),
contentData: msg.getContentData_asB64(),
contentType: jspb.Message.getFieldWithDefault(msg, 4, ""),
pageUrl: jspb.Message.getFieldWithDefault(msg, 5, ""),
partialPdfDocument: (f = msg.getPartialPdfDocument()) && lens_overlay_document_pb.LensOverlayDocument.toObject(includeInstance, f),
compressionType: jspb.Message.getFieldWithDefault(msg, 8, 0),
storedChunkOptions: (f = msg.getStoredChunkOptions()) && proto.lens.StoredChunkOptions.toObject(includeInstance, f),
content: (f = msg.getContent()) && proto.lens.Content.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.Payload}
 */
proto.lens.Payload.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.Payload;
  return proto.lens.Payload.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.Payload} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.Payload}
 */
proto.lens.Payload.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 6:
      var value = /** @type {!proto.lens.RequestType} */ (reader.readEnum());
      msg.setRequestType(value);
      break;
    case 2:
      var value = new lens_overlay_image_data_pb.ImageData;
      reader.readMessage(value,lens_overlay_image_data_pb.ImageData.deserializeBinaryFromReader);
      msg.setImageData(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContentData(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPageUrl(value);
      break;
    case 7:
      var value = new lens_overlay_document_pb.LensOverlayDocument;
      reader.readMessage(value,lens_overlay_document_pb.LensOverlayDocument.deserializeBinaryFromReader);
      msg.setPartialPdfDocument(value);
      break;
    case 8:
      var value = /** @type {!proto.lens.CompressionType} */ (reader.readEnum());
      msg.setCompressionType(value);
      break;
    case 9:
      var value = new proto.lens.StoredChunkOptions;
      reader.readMessage(value,proto.lens.StoredChunkOptions.deserializeBinaryFromReader);
      msg.setStoredChunkOptions(value);
      break;
    case 10:
      var value = new proto.lens.Content;
      reader.readMessage(value,proto.lens.Content.deserializeBinaryFromReader);
      msg.setContent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.Payload.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.Payload.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.Payload} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Payload.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRequestType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getImageData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      lens_overlay_image_data_pb.ImageData.serializeBinaryToWriter
    );
  }
  f = message.getContentData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getContentType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPageUrl();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPartialPdfDocument();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      lens_overlay_document_pb.LensOverlayDocument.serializeBinaryToWriter
    );
  }
  f = message.getCompressionType();
  if (f !== 0.0) {
    writer.writeEnum(
      8,
      f
    );
  }
  f = message.getStoredChunkOptions();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.lens.StoredChunkOptions.serializeBinaryToWriter
    );
  }
  f = message.getContent();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.lens.Content.serializeBinaryToWriter
    );
  }
};


/**
 * optional RequestType request_type = 6;
 * @return {!proto.lens.RequestType}
 */
proto.lens.Payload.prototype.getRequestType = function() {
  return /** @type {!proto.lens.RequestType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.lens.RequestType} value
 * @return {!proto.lens.Payload} returns this
 */
proto.lens.Payload.prototype.setRequestType = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional ImageData image_data = 2;
 * @return {?proto.lens.ImageData}
 */
proto.lens.Payload.prototype.getImageData = function() {
  return /** @type{?proto.lens.ImageData} */ (
    jspb.Message.getWrapperField(this, lens_overlay_image_data_pb.ImageData, 2));
};


/**
 * @param {?proto.lens.ImageData|undefined} value
 * @return {!proto.lens.Payload} returns this
*/
proto.lens.Payload.prototype.setImageData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.Payload} returns this
 */
proto.lens.Payload.prototype.clearImageData = function() {
  return this.setImageData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.Payload.prototype.hasImageData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes content_data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.lens.Payload.prototype.getContentData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes content_data = 3;
 * This is a type-conversion wrapper around `getContentData()`
 * @return {string}
 */
proto.lens.Payload.prototype.getContentData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContentData()));
};


/**
 * optional bytes content_data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContentData()`
 * @return {!Uint8Array}
 */
proto.lens.Payload.prototype.getContentData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContentData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lens.Payload} returns this
 */
proto.lens.Payload.prototype.setContentData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string content_type = 4;
 * @return {string}
 */
proto.lens.Payload.prototype.getContentType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.Payload} returns this
 */
proto.lens.Payload.prototype.setContentType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string page_url = 5;
 * @return {string}
 */
proto.lens.Payload.prototype.getPageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.Payload} returns this
 */
proto.lens.Payload.prototype.setPageUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional LensOverlayDocument partial_pdf_document = 7;
 * @return {?proto.lens.LensOverlayDocument}
 */
proto.lens.Payload.prototype.getPartialPdfDocument = function() {
  return /** @type{?proto.lens.LensOverlayDocument} */ (
    jspb.Message.getWrapperField(this, lens_overlay_document_pb.LensOverlayDocument, 7));
};


/**
 * @param {?proto.lens.LensOverlayDocument|undefined} value
 * @return {!proto.lens.Payload} returns this
*/
proto.lens.Payload.prototype.setPartialPdfDocument = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.Payload} returns this
 */
proto.lens.Payload.prototype.clearPartialPdfDocument = function() {
  return this.setPartialPdfDocument(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.Payload.prototype.hasPartialPdfDocument = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional CompressionType compression_type = 8;
 * @return {!proto.lens.CompressionType}
 */
proto.lens.Payload.prototype.getCompressionType = function() {
  return /** @type {!proto.lens.CompressionType} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {!proto.lens.CompressionType} value
 * @return {!proto.lens.Payload} returns this
 */
proto.lens.Payload.prototype.setCompressionType = function(value) {
  return jspb.Message.setProto3EnumField(this, 8, value);
};


/**
 * optional StoredChunkOptions stored_chunk_options = 9;
 * @return {?proto.lens.StoredChunkOptions}
 */
proto.lens.Payload.prototype.getStoredChunkOptions = function() {
  return /** @type{?proto.lens.StoredChunkOptions} */ (
    jspb.Message.getWrapperField(this, proto.lens.StoredChunkOptions, 9));
};


/**
 * @param {?proto.lens.StoredChunkOptions|undefined} value
 * @return {!proto.lens.Payload} returns this
*/
proto.lens.Payload.prototype.setStoredChunkOptions = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.Payload} returns this
 */
proto.lens.Payload.prototype.clearStoredChunkOptions = function() {
  return this.setStoredChunkOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.Payload.prototype.hasStoredChunkOptions = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional Content content = 10;
 * @return {?proto.lens.Content}
 */
proto.lens.Payload.prototype.getContent = function() {
  return /** @type{?proto.lens.Content} */ (
    jspb.Message.getWrapperField(this, proto.lens.Content, 10));
};


/**
 * @param {?proto.lens.Content|undefined} value
 * @return {!proto.lens.Payload} returns this
*/
proto.lens.Payload.prototype.setContent = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.Payload} returns this
 */
proto.lens.Payload.prototype.clearContent = function() {
  return this.setContent(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.Payload.prototype.hasContent = function() {
  return jspb.Message.getField(this, 10) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.StoredChunkOptions.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.StoredChunkOptions.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.StoredChunkOptions} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.StoredChunkOptions.toObject = function(includeInstance, msg) {
  var f, obj = {
readStoredChunks: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
totalStoredChunks: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.StoredChunkOptions}
 */
proto.lens.StoredChunkOptions.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.StoredChunkOptions;
  return proto.lens.StoredChunkOptions.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.StoredChunkOptions} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.StoredChunkOptions}
 */
proto.lens.StoredChunkOptions.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReadStoredChunks(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalStoredChunks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.StoredChunkOptions.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.StoredChunkOptions.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.StoredChunkOptions} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.StoredChunkOptions.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReadStoredChunks();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTotalStoredChunks();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bool read_stored_chunks = 1;
 * @return {boolean}
 */
proto.lens.StoredChunkOptions.prototype.getReadStoredChunks = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lens.StoredChunkOptions} returns this
 */
proto.lens.StoredChunkOptions.prototype.setReadStoredChunks = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int64 total_stored_chunks = 2;
 * @return {number}
 */
proto.lens.StoredChunkOptions.prototype.getTotalStoredChunks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.StoredChunkOptions} returns this
 */
proto.lens.StoredChunkOptions.prototype.setTotalStoredChunks = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.Content.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.Content.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.Content.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.Content} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Content.toObject = function(includeInstance, msg) {
  var f, obj = {
webpageUrl: jspb.Message.getFieldWithDefault(msg, 1, ""),
webpageTitle: jspb.Message.getFieldWithDefault(msg, 4, ""),
contentDataList: jspb.Message.toObjectList(msg.getContentDataList(),
    proto.lens.ContentData.toObject, includeInstance),
requestType: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.Content}
 */
proto.lens.Content.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.Content;
  return proto.lens.Content.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.Content} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.Content}
 */
proto.lens.Content.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebpageUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setWebpageTitle(value);
      break;
    case 2:
      var value = new proto.lens.ContentData;
      reader.readMessage(value,proto.lens.ContentData.deserializeBinaryFromReader);
      msg.addContentData(value);
      break;
    case 3:
      var value = /** @type {!proto.lens.RequestType} */ (reader.readEnum());
      msg.setRequestType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.Content.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.Content.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.Content} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Content.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWebpageUrl();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getWebpageTitle();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getContentDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.lens.ContentData.serializeBinaryToWriter
    );
  }
  f = message.getRequestType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional string webpage_url = 1;
 * @return {string}
 */
proto.lens.Content.prototype.getWebpageUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.Content} returns this
 */
proto.lens.Content.prototype.setWebpageUrl = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string webpage_title = 4;
 * @return {string}
 */
proto.lens.Content.prototype.getWebpageTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.Content} returns this
 */
proto.lens.Content.prototype.setWebpageTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated ContentData content_data = 2;
 * @return {!Array<!proto.lens.ContentData>}
 */
proto.lens.Content.prototype.getContentDataList = function() {
  return /** @type{!Array<!proto.lens.ContentData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lens.ContentData, 2));
};


/**
 * @param {!Array<!proto.lens.ContentData>} value
 * @return {!proto.lens.Content} returns this
*/
proto.lens.Content.prototype.setContentDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.lens.ContentData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.ContentData}
 */
proto.lens.Content.prototype.addContentData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.lens.ContentData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.Content} returns this
 */
proto.lens.Content.prototype.clearContentDataList = function() {
  return this.setContentDataList([]);
};


/**
 * optional RequestType request_type = 3;
 * @return {!proto.lens.RequestType}
 */
proto.lens.Content.prototype.getRequestType = function() {
  return /** @type {!proto.lens.RequestType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.lens.RequestType} value
 * @return {!proto.lens.Content} returns this
 */
proto.lens.Content.prototype.setRequestType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.ContentData.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.ContentData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.ContentData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ContentData.toObject = function(includeInstance, msg) {
  var f, obj = {
contentType: jspb.Message.getFieldWithDefault(msg, 1, 0),
data: msg.getData_asB64(),
compressionType: jspb.Message.getFieldWithDefault(msg, 3, 0),
storedChunkOptions: (f = msg.getStoredChunkOptions()) && proto.lens.StoredChunkOptions.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.ContentData}
 */
proto.lens.ContentData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.ContentData;
  return proto.lens.ContentData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.ContentData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.ContentData}
 */
proto.lens.ContentData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lens.ContentData.ContentType} */ (reader.readEnum());
      msg.setContentType(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 3:
      var value = /** @type {!proto.lens.CompressionType} */ (reader.readEnum());
      msg.setCompressionType(value);
      break;
    case 4:
      var value = new proto.lens.StoredChunkOptions;
      reader.readMessage(value,proto.lens.StoredChunkOptions.deserializeBinaryFromReader);
      msg.setStoredChunkOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.ContentData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.ContentData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.ContentData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.ContentData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContentType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getCompressionType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getStoredChunkOptions();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.lens.StoredChunkOptions.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.lens.ContentData.ContentType = {
  CONTENT_TYPE_UNSPECIFIED: 0,
  CONTENT_TYPE_PDF: 1,
  CONTENT_TYPE_INNER_TEXT: 2,
  CONTENT_TYPE_INNER_HTML: 3,
  CONTENT_TYPE_ANNOTATED_PAGE_CONTENT: 4,
  CONTENT_TYPE_EARLY_PARTIAL_PDF: 5
};

/**
 * optional ContentType content_type = 1;
 * @return {!proto.lens.ContentData.ContentType}
 */
proto.lens.ContentData.prototype.getContentType = function() {
  return /** @type {!proto.lens.ContentData.ContentType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lens.ContentData.ContentType} value
 * @return {!proto.lens.ContentData} returns this
 */
proto.lens.ContentData.prototype.setContentType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes data = 2;
 * @return {!(string|Uint8Array)}
 */
proto.lens.ContentData.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes data = 2;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.lens.ContentData.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.lens.ContentData.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.lens.ContentData} returns this
 */
proto.lens.ContentData.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional CompressionType compression_type = 3;
 * @return {!proto.lens.CompressionType}
 */
proto.lens.ContentData.prototype.getCompressionType = function() {
  return /** @type {!proto.lens.CompressionType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.lens.CompressionType} value
 * @return {!proto.lens.ContentData} returns this
 */
proto.lens.ContentData.prototype.setCompressionType = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional StoredChunkOptions stored_chunk_options = 4;
 * @return {?proto.lens.StoredChunkOptions}
 */
proto.lens.ContentData.prototype.getStoredChunkOptions = function() {
  return /** @type{?proto.lens.StoredChunkOptions} */ (
    jspb.Message.getWrapperField(this, proto.lens.StoredChunkOptions, 4));
};


/**
 * @param {?proto.lens.StoredChunkOptions|undefined} value
 * @return {!proto.lens.ContentData} returns this
*/
proto.lens.ContentData.prototype.setStoredChunkOptions = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.ContentData} returns this
 */
proto.lens.ContentData.prototype.clearStoredChunkOptions = function() {
  return this.setStoredChunkOptions(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.ContentData.prototype.hasStoredChunkOptions = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * @enum {number}
 */
proto.lens.CompressionType = {
  UNCOMPRESSED: 0,
  ZSTD: 1
};

goog.object.extend(exports, proto.lens);
