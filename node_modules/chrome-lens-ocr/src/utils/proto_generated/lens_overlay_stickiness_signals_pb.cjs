// source: lens_overlay_stickiness_signals.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_math_solver_query_pb = require('./lens_overlay_math_solver_query_pb.cjs');
goog.object.extend(proto, lens_overlay_math_solver_query_pb);
var lens_overlay_message_set_pb = require('./lens_overlay_message_set_pb.cjs');
goog.object.extend(proto, lens_overlay_message_set_pb);
goog.exportSymbol('proto.lens.EducationInputExtension', null, global);
goog.exportSymbol('proto.lens.StickinessSignals', null, global);
goog.exportSymbol('proto.lens.StickinessSignals.Namespace', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.StickinessSignals = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.StickinessSignals, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.StickinessSignals.displayName = 'proto.lens.StickinessSignals';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.EducationInputExtension = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.EducationInputExtension, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.EducationInputExtension.displayName = 'proto.lens.EducationInputExtension';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.StickinessSignals.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.StickinessSignals.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.StickinessSignals} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.StickinessSignals.toObject = function(includeInstance, msg) {
  var f, obj = {
idNamespace: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
interpretation: (f = msg.getInterpretation()) && lens_overlay_message_set_pb.MessageSet.toObject(includeInstance, f),
educationInputExtension: (f = msg.getEducationInputExtension()) && proto.lens.EducationInputExtension.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.StickinessSignals}
 */
proto.lens.StickinessSignals.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.StickinessSignals;
  return proto.lens.StickinessSignals.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.StickinessSignals} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.StickinessSignals}
 */
proto.lens.StickinessSignals.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lens.StickinessSignals.Namespace} */ (reader.readEnum());
      msg.setIdNamespace(value);
      break;
    case 28:
      var value = new lens_overlay_message_set_pb.MessageSet;
      reader.readMessage(value,lens_overlay_message_set_pb.MessageSet.deserializeBinaryFromReader);
      msg.setInterpretation(value);
      break;
    case 121:
      var value = new proto.lens.EducationInputExtension;
      reader.readMessage(value,proto.lens.EducationInputExtension.deserializeBinaryFromReader);
      msg.setEducationInputExtension(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.StickinessSignals.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.StickinessSignals.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.StickinessSignals} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.StickinessSignals.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.lens.StickinessSignals.Namespace} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getInterpretation();
  if (f != null) {
    writer.writeMessage(
      28,
      f,
      lens_overlay_message_set_pb.MessageSet.serializeBinaryToWriter
    );
  }
  f = message.getEducationInputExtension();
  if (f != null) {
    writer.writeMessage(
      121,
      f,
      proto.lens.EducationInputExtension.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.lens.StickinessSignals.Namespace = {
  UNKNOWN: 0,
  TRANSLATE_LITE: 56,
  EDUCATION_INPUT: 79
};

/**
 * optional Namespace id_namespace = 1;
 * @return {!proto.lens.StickinessSignals.Namespace}
 */
proto.lens.StickinessSignals.prototype.getIdNamespace = function() {
  return /** @type {!proto.lens.StickinessSignals.Namespace} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lens.StickinessSignals.Namespace} value
 * @return {!proto.lens.StickinessSignals} returns this
 */
proto.lens.StickinessSignals.prototype.setIdNamespace = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.lens.StickinessSignals} returns this
 */
proto.lens.StickinessSignals.prototype.clearIdNamespace = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.StickinessSignals.prototype.hasIdNamespace = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional MessageSet interpretation = 28;
 * @return {?proto.lens.MessageSet}
 */
proto.lens.StickinessSignals.prototype.getInterpretation = function() {
  return /** @type{?proto.lens.MessageSet} */ (
    jspb.Message.getWrapperField(this, lens_overlay_message_set_pb.MessageSet, 28));
};


/**
 * @param {?proto.lens.MessageSet|undefined} value
 * @return {!proto.lens.StickinessSignals} returns this
*/
proto.lens.StickinessSignals.prototype.setInterpretation = function(value) {
  return jspb.Message.setWrapperField(this, 28, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.StickinessSignals} returns this
 */
proto.lens.StickinessSignals.prototype.clearInterpretation = function() {
  return this.setInterpretation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.StickinessSignals.prototype.hasInterpretation = function() {
  return jspb.Message.getField(this, 28) != null;
};


/**
 * optional EducationInputExtension education_input_extension = 121;
 * @return {?proto.lens.EducationInputExtension}
 */
proto.lens.StickinessSignals.prototype.getEducationInputExtension = function() {
  return /** @type{?proto.lens.EducationInputExtension} */ (
    jspb.Message.getWrapperField(this, proto.lens.EducationInputExtension, 121));
};


/**
 * @param {?proto.lens.EducationInputExtension|undefined} value
 * @return {!proto.lens.StickinessSignals} returns this
*/
proto.lens.StickinessSignals.prototype.setEducationInputExtension = function(value) {
  return jspb.Message.setWrapperField(this, 121, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.StickinessSignals} returns this
 */
proto.lens.StickinessSignals.prototype.clearEducationInputExtension = function() {
  return this.setEducationInputExtension(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.StickinessSignals.prototype.hasEducationInputExtension = function() {
  return jspb.Message.getField(this, 121) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.EducationInputExtension.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.EducationInputExtension.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.EducationInputExtension} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.EducationInputExtension.toObject = function(includeInstance, msg) {
  var f, obj = {
mathSolverQuery: (f = msg.getMathSolverQuery()) && lens_overlay_math_solver_query_pb.MathSolverQuery.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.EducationInputExtension}
 */
proto.lens.EducationInputExtension.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.EducationInputExtension;
  return proto.lens.EducationInputExtension.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.EducationInputExtension} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.EducationInputExtension}
 */
proto.lens.EducationInputExtension.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new lens_overlay_math_solver_query_pb.MathSolverQuery;
      reader.readMessage(value,lens_overlay_math_solver_query_pb.MathSolverQuery.deserializeBinaryFromReader);
      msg.setMathSolverQuery(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.EducationInputExtension.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.EducationInputExtension.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.EducationInputExtension} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.EducationInputExtension.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMathSolverQuery();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      lens_overlay_math_solver_query_pb.MathSolverQuery.serializeBinaryToWriter
    );
  }
};


/**
 * optional MathSolverQuery math_solver_query = 1;
 * @return {?proto.lens.MathSolverQuery}
 */
proto.lens.EducationInputExtension.prototype.getMathSolverQuery = function() {
  return /** @type{?proto.lens.MathSolverQuery} */ (
    jspb.Message.getWrapperField(this, lens_overlay_math_solver_query_pb.MathSolverQuery, 1));
};


/**
 * @param {?proto.lens.MathSolverQuery|undefined} value
 * @return {!proto.lens.EducationInputExtension} returns this
*/
proto.lens.EducationInputExtension.prototype.setMathSolverQuery = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.EducationInputExtension} returns this
 */
proto.lens.EducationInputExtension.prototype.clearMathSolverQuery = function() {
  return this.setMathSolverQuery(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.EducationInputExtension.prototype.hasMathSolverQuery = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.lens);
