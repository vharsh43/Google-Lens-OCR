// source: lens_overlay_text.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_geometry_pb = require('./lens_overlay_geometry_pb.cjs');
goog.object.extend(proto, lens_overlay_geometry_pb);
goog.exportSymbol('proto.lens.Alignment', null, global);
goog.exportSymbol('proto.lens.Text', null, global);
goog.exportSymbol('proto.lens.TextEntityIdentifier', null, global);
goog.exportSymbol('proto.lens.TextLayout', null, global);
goog.exportSymbol('proto.lens.TextLayout.Line', null, global);
goog.exportSymbol('proto.lens.TextLayout.Paragraph', null, global);
goog.exportSymbol('proto.lens.TextLayout.Word', null, global);
goog.exportSymbol('proto.lens.TextLayout.Word.FormulaMetadata', null, global);
goog.exportSymbol('proto.lens.TextLayout.Word.Type', null, global);
goog.exportSymbol('proto.lens.WritingDirection', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.Text = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.Text, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.Text.displayName = 'proto.lens.Text';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TextLayout = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.TextLayout.repeatedFields_, null);
};
goog.inherits(proto.lens.TextLayout, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TextLayout.displayName = 'proto.lens.TextLayout';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TextLayout.Word = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.TextLayout.Word, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TextLayout.Word.displayName = 'proto.lens.TextLayout.Word';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TextLayout.Word.FormulaMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.TextLayout.Word.FormulaMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TextLayout.Word.FormulaMetadata.displayName = 'proto.lens.TextLayout.Word.FormulaMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TextLayout.Line = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.TextLayout.Line.repeatedFields_, null);
};
goog.inherits(proto.lens.TextLayout.Line, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TextLayout.Line.displayName = 'proto.lens.TextLayout.Line';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TextLayout.Paragraph = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.lens.TextLayout.Paragraph.repeatedFields_, null);
};
goog.inherits(proto.lens.TextLayout.Paragraph, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TextLayout.Paragraph.displayName = 'proto.lens.TextLayout.Paragraph';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.TextEntityIdentifier = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.TextEntityIdentifier, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.TextEntityIdentifier.displayName = 'proto.lens.TextEntityIdentifier';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.Text.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.Text.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.Text} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Text.toObject = function(includeInstance, msg) {
  var f, obj = {
textLayout: (f = msg.getTextLayout()) && proto.lens.TextLayout.toObject(includeInstance, f),
contentLanguage: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.Text}
 */
proto.lens.Text.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.Text;
  return proto.lens.Text.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.Text} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.Text}
 */
proto.lens.Text.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.TextLayout;
      reader.readMessage(value,proto.lens.TextLayout.deserializeBinaryFromReader);
      msg.setTextLayout(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentLanguage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.Text.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.Text.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.Text} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.Text.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTextLayout();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.TextLayout.serializeBinaryToWriter
    );
  }
  f = message.getContentLanguage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional TextLayout text_layout = 1;
 * @return {?proto.lens.TextLayout}
 */
proto.lens.Text.prototype.getTextLayout = function() {
  return /** @type{?proto.lens.TextLayout} */ (
    jspb.Message.getWrapperField(this, proto.lens.TextLayout, 1));
};


/**
 * @param {?proto.lens.TextLayout|undefined} value
 * @return {!proto.lens.Text} returns this
*/
proto.lens.Text.prototype.setTextLayout = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.Text} returns this
 */
proto.lens.Text.prototype.clearTextLayout = function() {
  return this.setTextLayout(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.Text.prototype.hasTextLayout = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string content_language = 2;
 * @return {string}
 */
proto.lens.Text.prototype.getContentLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.Text} returns this
 */
proto.lens.Text.prototype.setContentLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.TextLayout.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TextLayout.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TextLayout.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TextLayout} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextLayout.toObject = function(includeInstance, msg) {
  var f, obj = {
paragraphsList: jspb.Message.toObjectList(msg.getParagraphsList(),
    proto.lens.TextLayout.Paragraph.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TextLayout}
 */
proto.lens.TextLayout.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TextLayout;
  return proto.lens.TextLayout.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TextLayout} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TextLayout}
 */
proto.lens.TextLayout.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.TextLayout.Paragraph;
      reader.readMessage(value,proto.lens.TextLayout.Paragraph.deserializeBinaryFromReader);
      msg.addParagraphs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TextLayout.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TextLayout.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TextLayout} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextLayout.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParagraphsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.lens.TextLayout.Paragraph.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TextLayout.Word.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TextLayout.Word.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TextLayout.Word} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextLayout.Word.toObject = function(includeInstance, msg) {
  var f, obj = {
id: (f = msg.getId()) && proto.lens.TextEntityIdentifier.toObject(includeInstance, f),
plainText: jspb.Message.getFieldWithDefault(msg, 2, ""),
textSeparator: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
geometry: (f = msg.getGeometry()) && lens_overlay_geometry_pb.Geometry.toObject(includeInstance, f),
type: jspb.Message.getFieldWithDefault(msg, 5, 0),
formulaMetadata: (f = msg.getFormulaMetadata()) && proto.lens.TextLayout.Word.FormulaMetadata.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TextLayout.Word}
 */
proto.lens.TextLayout.Word.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TextLayout.Word;
  return proto.lens.TextLayout.Word.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TextLayout.Word} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TextLayout.Word}
 */
proto.lens.TextLayout.Word.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.TextEntityIdentifier;
      reader.readMessage(value,proto.lens.TextEntityIdentifier.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlainText(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTextSeparator(value);
      break;
    case 4:
      var value = new lens_overlay_geometry_pb.Geometry;
      reader.readMessage(value,lens_overlay_geometry_pb.Geometry.deserializeBinaryFromReader);
      msg.setGeometry(value);
      break;
    case 5:
      var value = /** @type {!proto.lens.TextLayout.Word.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 6:
      var value = new proto.lens.TextLayout.Word.FormulaMetadata;
      reader.readMessage(value,proto.lens.TextLayout.Word.FormulaMetadata.deserializeBinaryFromReader);
      msg.setFormulaMetadata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TextLayout.Word.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TextLayout.Word.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TextLayout.Word} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextLayout.Word.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.TextEntityIdentifier.serializeBinaryToWriter
    );
  }
  f = message.getPlainText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getGeometry();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      lens_overlay_geometry_pb.Geometry.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getFormulaMetadata();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.lens.TextLayout.Word.FormulaMetadata.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.lens.TextLayout.Word.Type = {
  TEXT: 0,
  FORMULA: 1
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TextLayout.Word.FormulaMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TextLayout.Word.FormulaMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TextLayout.Word.FormulaMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextLayout.Word.FormulaMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
latex: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TextLayout.Word.FormulaMetadata}
 */
proto.lens.TextLayout.Word.FormulaMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TextLayout.Word.FormulaMetadata;
  return proto.lens.TextLayout.Word.FormulaMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TextLayout.Word.FormulaMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TextLayout.Word.FormulaMetadata}
 */
proto.lens.TextLayout.Word.FormulaMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setLatex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TextLayout.Word.FormulaMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TextLayout.Word.FormulaMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TextLayout.Word.FormulaMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextLayout.Word.FormulaMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLatex();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string latex = 1;
 * @return {string}
 */
proto.lens.TextLayout.Word.FormulaMetadata.prototype.getLatex = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.TextLayout.Word.FormulaMetadata} returns this
 */
proto.lens.TextLayout.Word.FormulaMetadata.prototype.setLatex = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional TextEntityIdentifier id = 1;
 * @return {?proto.lens.TextEntityIdentifier}
 */
proto.lens.TextLayout.Word.prototype.getId = function() {
  return /** @type{?proto.lens.TextEntityIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.lens.TextEntityIdentifier, 1));
};


/**
 * @param {?proto.lens.TextEntityIdentifier|undefined} value
 * @return {!proto.lens.TextLayout.Word} returns this
*/
proto.lens.TextLayout.Word.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.TextLayout.Word} returns this
 */
proto.lens.TextLayout.Word.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.TextLayout.Word.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string plain_text = 2;
 * @return {string}
 */
proto.lens.TextLayout.Word.prototype.getPlainText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.TextLayout.Word} returns this
 */
proto.lens.TextLayout.Word.prototype.setPlainText = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string text_separator = 3;
 * @return {string}
 */
proto.lens.TextLayout.Word.prototype.getTextSeparator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.TextLayout.Word} returns this
 */
proto.lens.TextLayout.Word.prototype.setTextSeparator = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.lens.TextLayout.Word} returns this
 */
proto.lens.TextLayout.Word.prototype.clearTextSeparator = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.TextLayout.Word.prototype.hasTextSeparator = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Geometry geometry = 4;
 * @return {?proto.lens.Geometry}
 */
proto.lens.TextLayout.Word.prototype.getGeometry = function() {
  return /** @type{?proto.lens.Geometry} */ (
    jspb.Message.getWrapperField(this, lens_overlay_geometry_pb.Geometry, 4));
};


/**
 * @param {?proto.lens.Geometry|undefined} value
 * @return {!proto.lens.TextLayout.Word} returns this
*/
proto.lens.TextLayout.Word.prototype.setGeometry = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.TextLayout.Word} returns this
 */
proto.lens.TextLayout.Word.prototype.clearGeometry = function() {
  return this.setGeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.TextLayout.Word.prototype.hasGeometry = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Type type = 5;
 * @return {!proto.lens.TextLayout.Word.Type}
 */
proto.lens.TextLayout.Word.prototype.getType = function() {
  return /** @type {!proto.lens.TextLayout.Word.Type} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.lens.TextLayout.Word.Type} value
 * @return {!proto.lens.TextLayout.Word} returns this
 */
proto.lens.TextLayout.Word.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional FormulaMetadata formula_metadata = 6;
 * @return {?proto.lens.TextLayout.Word.FormulaMetadata}
 */
proto.lens.TextLayout.Word.prototype.getFormulaMetadata = function() {
  return /** @type{?proto.lens.TextLayout.Word.FormulaMetadata} */ (
    jspb.Message.getWrapperField(this, proto.lens.TextLayout.Word.FormulaMetadata, 6));
};


/**
 * @param {?proto.lens.TextLayout.Word.FormulaMetadata|undefined} value
 * @return {!proto.lens.TextLayout.Word} returns this
*/
proto.lens.TextLayout.Word.prototype.setFormulaMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.TextLayout.Word} returns this
 */
proto.lens.TextLayout.Word.prototype.clearFormulaMetadata = function() {
  return this.setFormulaMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.TextLayout.Word.prototype.hasFormulaMetadata = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.TextLayout.Line.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TextLayout.Line.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TextLayout.Line.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TextLayout.Line} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextLayout.Line.toObject = function(includeInstance, msg) {
  var f, obj = {
wordsList: jspb.Message.toObjectList(msg.getWordsList(),
    proto.lens.TextLayout.Word.toObject, includeInstance),
geometry: (f = msg.getGeometry()) && lens_overlay_geometry_pb.Geometry.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TextLayout.Line}
 */
proto.lens.TextLayout.Line.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TextLayout.Line;
  return proto.lens.TextLayout.Line.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TextLayout.Line} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TextLayout.Line}
 */
proto.lens.TextLayout.Line.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.TextLayout.Word;
      reader.readMessage(value,proto.lens.TextLayout.Word.deserializeBinaryFromReader);
      msg.addWords(value);
      break;
    case 2:
      var value = new lens_overlay_geometry_pb.Geometry;
      reader.readMessage(value,lens_overlay_geometry_pb.Geometry.deserializeBinaryFromReader);
      msg.setGeometry(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TextLayout.Line.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TextLayout.Line.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TextLayout.Line} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextLayout.Line.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getWordsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.lens.TextLayout.Word.serializeBinaryToWriter
    );
  }
  f = message.getGeometry();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      lens_overlay_geometry_pb.Geometry.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Word words = 1;
 * @return {!Array<!proto.lens.TextLayout.Word>}
 */
proto.lens.TextLayout.Line.prototype.getWordsList = function() {
  return /** @type{!Array<!proto.lens.TextLayout.Word>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lens.TextLayout.Word, 1));
};


/**
 * @param {!Array<!proto.lens.TextLayout.Word>} value
 * @return {!proto.lens.TextLayout.Line} returns this
*/
proto.lens.TextLayout.Line.prototype.setWordsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.lens.TextLayout.Word=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.TextLayout.Word}
 */
proto.lens.TextLayout.Line.prototype.addWords = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.lens.TextLayout.Word, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.TextLayout.Line} returns this
 */
proto.lens.TextLayout.Line.prototype.clearWordsList = function() {
  return this.setWordsList([]);
};


/**
 * optional Geometry geometry = 2;
 * @return {?proto.lens.Geometry}
 */
proto.lens.TextLayout.Line.prototype.getGeometry = function() {
  return /** @type{?proto.lens.Geometry} */ (
    jspb.Message.getWrapperField(this, lens_overlay_geometry_pb.Geometry, 2));
};


/**
 * @param {?proto.lens.Geometry|undefined} value
 * @return {!proto.lens.TextLayout.Line} returns this
*/
proto.lens.TextLayout.Line.prototype.setGeometry = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.TextLayout.Line} returns this
 */
proto.lens.TextLayout.Line.prototype.clearGeometry = function() {
  return this.setGeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.TextLayout.Line.prototype.hasGeometry = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.lens.TextLayout.Paragraph.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TextLayout.Paragraph.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TextLayout.Paragraph.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TextLayout.Paragraph} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextLayout.Paragraph.toObject = function(includeInstance, msg) {
  var f, obj = {
id: (f = msg.getId()) && proto.lens.TextEntityIdentifier.toObject(includeInstance, f),
linesList: jspb.Message.toObjectList(msg.getLinesList(),
    proto.lens.TextLayout.Line.toObject, includeInstance),
geometry: (f = msg.getGeometry()) && lens_overlay_geometry_pb.Geometry.toObject(includeInstance, f),
writingDirection: jspb.Message.getFieldWithDefault(msg, 4, 0),
contentLanguage: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TextLayout.Paragraph}
 */
proto.lens.TextLayout.Paragraph.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TextLayout.Paragraph;
  return proto.lens.TextLayout.Paragraph.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TextLayout.Paragraph} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TextLayout.Paragraph}
 */
proto.lens.TextLayout.Paragraph.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.TextEntityIdentifier;
      reader.readMessage(value,proto.lens.TextEntityIdentifier.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    case 2:
      var value = new proto.lens.TextLayout.Line;
      reader.readMessage(value,proto.lens.TextLayout.Line.deserializeBinaryFromReader);
      msg.addLines(value);
      break;
    case 3:
      var value = new lens_overlay_geometry_pb.Geometry;
      reader.readMessage(value,lens_overlay_geometry_pb.Geometry.deserializeBinaryFromReader);
      msg.setGeometry(value);
      break;
    case 4:
      var value = /** @type {!proto.lens.WritingDirection} */ (reader.readEnum());
      msg.setWritingDirection(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setContentLanguage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TextLayout.Paragraph.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TextLayout.Paragraph.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TextLayout.Paragraph} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextLayout.Paragraph.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.TextEntityIdentifier.serializeBinaryToWriter
    );
  }
  f = message.getLinesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.lens.TextLayout.Line.serializeBinaryToWriter
    );
  }
  f = message.getGeometry();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      lens_overlay_geometry_pb.Geometry.serializeBinaryToWriter
    );
  }
  f = message.getWritingDirection();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getContentLanguage();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional TextEntityIdentifier id = 1;
 * @return {?proto.lens.TextEntityIdentifier}
 */
proto.lens.TextLayout.Paragraph.prototype.getId = function() {
  return /** @type{?proto.lens.TextEntityIdentifier} */ (
    jspb.Message.getWrapperField(this, proto.lens.TextEntityIdentifier, 1));
};


/**
 * @param {?proto.lens.TextEntityIdentifier|undefined} value
 * @return {!proto.lens.TextLayout.Paragraph} returns this
*/
proto.lens.TextLayout.Paragraph.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.TextLayout.Paragraph} returns this
 */
proto.lens.TextLayout.Paragraph.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.TextLayout.Paragraph.prototype.hasId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Line lines = 2;
 * @return {!Array<!proto.lens.TextLayout.Line>}
 */
proto.lens.TextLayout.Paragraph.prototype.getLinesList = function() {
  return /** @type{!Array<!proto.lens.TextLayout.Line>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lens.TextLayout.Line, 2));
};


/**
 * @param {!Array<!proto.lens.TextLayout.Line>} value
 * @return {!proto.lens.TextLayout.Paragraph} returns this
*/
proto.lens.TextLayout.Paragraph.prototype.setLinesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.lens.TextLayout.Line=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.TextLayout.Line}
 */
proto.lens.TextLayout.Paragraph.prototype.addLines = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.lens.TextLayout.Line, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.TextLayout.Paragraph} returns this
 */
proto.lens.TextLayout.Paragraph.prototype.clearLinesList = function() {
  return this.setLinesList([]);
};


/**
 * optional Geometry geometry = 3;
 * @return {?proto.lens.Geometry}
 */
proto.lens.TextLayout.Paragraph.prototype.getGeometry = function() {
  return /** @type{?proto.lens.Geometry} */ (
    jspb.Message.getWrapperField(this, lens_overlay_geometry_pb.Geometry, 3));
};


/**
 * @param {?proto.lens.Geometry|undefined} value
 * @return {!proto.lens.TextLayout.Paragraph} returns this
*/
proto.lens.TextLayout.Paragraph.prototype.setGeometry = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.TextLayout.Paragraph} returns this
 */
proto.lens.TextLayout.Paragraph.prototype.clearGeometry = function() {
  return this.setGeometry(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.TextLayout.Paragraph.prototype.hasGeometry = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional WritingDirection writing_direction = 4;
 * @return {!proto.lens.WritingDirection}
 */
proto.lens.TextLayout.Paragraph.prototype.getWritingDirection = function() {
  return /** @type {!proto.lens.WritingDirection} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.lens.WritingDirection} value
 * @return {!proto.lens.TextLayout.Paragraph} returns this
 */
proto.lens.TextLayout.Paragraph.prototype.setWritingDirection = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string content_language = 5;
 * @return {string}
 */
proto.lens.TextLayout.Paragraph.prototype.getContentLanguage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.lens.TextLayout.Paragraph} returns this
 */
proto.lens.TextLayout.Paragraph.prototype.setContentLanguage = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * repeated Paragraph paragraphs = 1;
 * @return {!Array<!proto.lens.TextLayout.Paragraph>}
 */
proto.lens.TextLayout.prototype.getParagraphsList = function() {
  return /** @type{!Array<!proto.lens.TextLayout.Paragraph>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.lens.TextLayout.Paragraph, 1));
};


/**
 * @param {!Array<!proto.lens.TextLayout.Paragraph>} value
 * @return {!proto.lens.TextLayout} returns this
*/
proto.lens.TextLayout.prototype.setParagraphsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.lens.TextLayout.Paragraph=} opt_value
 * @param {number=} opt_index
 * @return {!proto.lens.TextLayout.Paragraph}
 */
proto.lens.TextLayout.prototype.addParagraphs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.lens.TextLayout.Paragraph, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.lens.TextLayout} returns this
 */
proto.lens.TextLayout.prototype.clearParagraphsList = function() {
  return this.setParagraphsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.TextEntityIdentifier.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.TextEntityIdentifier.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.TextEntityIdentifier} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextEntityIdentifier.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.TextEntityIdentifier}
 */
proto.lens.TextEntityIdentifier.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.TextEntityIdentifier;
  return proto.lens.TextEntityIdentifier.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.TextEntityIdentifier} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.TextEntityIdentifier}
 */
proto.lens.TextEntityIdentifier.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.TextEntityIdentifier.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.TextEntityIdentifier.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.TextEntityIdentifier} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.TextEntityIdentifier.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 id = 1;
 * @return {number}
 */
proto.lens.TextEntityIdentifier.prototype.getId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.lens.TextEntityIdentifier} returns this
 */
proto.lens.TextEntityIdentifier.prototype.setId = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.lens.WritingDirection = {
  DEFAULT_WRITING_DIRECTION_LEFT_TO_RIGHT: 0,
  WRITING_DIRECTION_RIGHT_TO_LEFT: 1,
  WRITING_DIRECTION_TOP_TO_BOTTOM: 2
};

/**
 * @enum {number}
 */
proto.lens.Alignment = {
  DEFAULT_LEFT_ALIGNED: 0,
  RIGHT_ALIGNED: 1,
  CENTER_ALIGNED: 2
};

goog.object.extend(exports, proto.lens);
