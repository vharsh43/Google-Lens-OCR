// source: lens_overlay_visual_search_interaction_log_data.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var lens_overlay_client_platform_pb = require('./lens_overlay_client_platform_pb.cjs');
goog.object.extend(proto, lens_overlay_client_platform_pb);
var lens_overlay_filters_pb = require('./lens_overlay_filters_pb.cjs');
goog.object.extend(proto, lens_overlay_filters_pb);
var lens_overlay_selection_type_pb = require('./lens_overlay_selection_type_pb.cjs');
goog.object.extend(proto, lens_overlay_selection_type_pb);
goog.exportSymbol('proto.lens.FilterData', null, global);
goog.exportSymbol('proto.lens.LensOverlayVisualSearchInteractionLogData', null, global);
goog.exportSymbol('proto.lens.UserSelectionData', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.LensOverlayVisualSearchInteractionLogData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.LensOverlayVisualSearchInteractionLogData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.LensOverlayVisualSearchInteractionLogData.displayName = 'proto.lens.LensOverlayVisualSearchInteractionLogData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.FilterData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.FilterData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.FilterData.displayName = 'proto.lens.FilterData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.lens.UserSelectionData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.lens.UserSelectionData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.lens.UserSelectionData.displayName = 'proto.lens.UserSelectionData';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.LensOverlayVisualSearchInteractionLogData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.LensOverlayVisualSearchInteractionLogData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.toObject = function(includeInstance, msg) {
  var f, obj = {
filterData: (f = msg.getFilterData()) && proto.lens.FilterData.toObject(includeInstance, f),
userSelectionData: (f = msg.getUserSelectionData()) && proto.lens.UserSelectionData.toObject(includeInstance, f),
isParentQuery: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
clientPlatform: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.LensOverlayVisualSearchInteractionLogData}
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.LensOverlayVisualSearchInteractionLogData;
  return proto.lens.LensOverlayVisualSearchInteractionLogData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.LensOverlayVisualSearchInteractionLogData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.LensOverlayVisualSearchInteractionLogData}
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.lens.FilterData;
      reader.readMessage(value,proto.lens.FilterData.deserializeBinaryFromReader);
      msg.setFilterData(value);
      break;
    case 2:
      var value = new proto.lens.UserSelectionData;
      reader.readMessage(value,proto.lens.UserSelectionData.deserializeBinaryFromReader);
      msg.setUserSelectionData(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsParentQuery(value);
      break;
    case 4:
      var value = /** @type {!proto.lens.ClientPlatform} */ (reader.readEnum());
      msg.setClientPlatform(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.LensOverlayVisualSearchInteractionLogData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.LensOverlayVisualSearchInteractionLogData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilterData();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.lens.FilterData.serializeBinaryToWriter
    );
  }
  f = message.getUserSelectionData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.lens.UserSelectionData.serializeBinaryToWriter
    );
  }
  f = message.getIsParentQuery();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getClientPlatform();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * optional FilterData filter_data = 1;
 * @return {?proto.lens.FilterData}
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.getFilterData = function() {
  return /** @type{?proto.lens.FilterData} */ (
    jspb.Message.getWrapperField(this, proto.lens.FilterData, 1));
};


/**
 * @param {?proto.lens.FilterData|undefined} value
 * @return {!proto.lens.LensOverlayVisualSearchInteractionLogData} returns this
*/
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.setFilterData = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayVisualSearchInteractionLogData} returns this
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.clearFilterData = function() {
  return this.setFilterData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.hasFilterData = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional UserSelectionData user_selection_data = 2;
 * @return {?proto.lens.UserSelectionData}
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.getUserSelectionData = function() {
  return /** @type{?proto.lens.UserSelectionData} */ (
    jspb.Message.getWrapperField(this, proto.lens.UserSelectionData, 2));
};


/**
 * @param {?proto.lens.UserSelectionData|undefined} value
 * @return {!proto.lens.LensOverlayVisualSearchInteractionLogData} returns this
*/
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.setUserSelectionData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.lens.LensOverlayVisualSearchInteractionLogData} returns this
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.clearUserSelectionData = function() {
  return this.setUserSelectionData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.hasUserSelectionData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool is_parent_query = 3;
 * @return {boolean}
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.getIsParentQuery = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.lens.LensOverlayVisualSearchInteractionLogData} returns this
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.setIsParentQuery = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional ClientPlatform client_platform = 4;
 * @return {!proto.lens.ClientPlatform}
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.getClientPlatform = function() {
  return /** @type {!proto.lens.ClientPlatform} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.lens.ClientPlatform} value
 * @return {!proto.lens.LensOverlayVisualSearchInteractionLogData} returns this
 */
proto.lens.LensOverlayVisualSearchInteractionLogData.prototype.setClientPlatform = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.FilterData.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.FilterData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.FilterData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.FilterData.toObject = function(includeInstance, msg) {
  var f, obj = {
filterType: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.FilterData}
 */
proto.lens.FilterData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.FilterData;
  return proto.lens.FilterData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.FilterData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.FilterData}
 */
proto.lens.FilterData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lens.LensOverlayFilterType} */ (reader.readEnum());
      msg.setFilterType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.FilterData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.FilterData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.FilterData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.FilterData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFilterType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional LensOverlayFilterType filter_type = 1;
 * @return {!proto.lens.LensOverlayFilterType}
 */
proto.lens.FilterData.prototype.getFilterType = function() {
  return /** @type {!proto.lens.LensOverlayFilterType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lens.LensOverlayFilterType} value
 * @return {!proto.lens.FilterData} returns this
 */
proto.lens.FilterData.prototype.setFilterType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.lens.UserSelectionData.prototype.toObject = function(opt_includeInstance) {
  return proto.lens.UserSelectionData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.lens.UserSelectionData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.UserSelectionData.toObject = function(includeInstance, msg) {
  var f, obj = {
selectionType: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.lens.UserSelectionData}
 */
proto.lens.UserSelectionData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.lens.UserSelectionData;
  return proto.lens.UserSelectionData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.lens.UserSelectionData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.lens.UserSelectionData}
 */
proto.lens.UserSelectionData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.lens.LensOverlaySelectionType} */ (reader.readEnum());
      msg.setSelectionType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.lens.UserSelectionData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.lens.UserSelectionData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.lens.UserSelectionData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.lens.UserSelectionData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSelectionType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * optional LensOverlaySelectionType selection_type = 1;
 * @return {!proto.lens.LensOverlaySelectionType}
 */
proto.lens.UserSelectionData.prototype.getSelectionType = function() {
  return /** @type {!proto.lens.LensOverlaySelectionType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.lens.LensOverlaySelectionType} value
 * @return {!proto.lens.UserSelectionData} returns this
 */
proto.lens.UserSelectionData.prototype.setSelectionType = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


goog.object.extend(exports, proto.lens);
